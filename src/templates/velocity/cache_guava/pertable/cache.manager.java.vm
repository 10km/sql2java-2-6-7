#parse( "table.include.vm" )
#parse( "header.include.vm" )
######################
#if ($table.countPrimaryKeys() != 1)
$codewriter.setSaveCurrentFile(false)
#stop
#end
#set ( $primaryKey = $table.getPrimaryKey())
#set ( $cacheManagerClass = $table.asCacheManagerClass($isGeneral) )
#set ( $managerClass = $table.asManagerClass($isGeneral) )
###set ( $nativeClass = $table.asBeanClass() )
#set ( $beanClass = $table.asBeanClass($isGeneral) )
##set ( $listenerClass = $table.asListenerClassNSP() )
##set ( $nativeListener = $table.asListenerClass() )
$codewriter.setCurrentJavaFilename($codewriter.getImplPackageOfSchema(), "${cacheManagerClass}.java")
package $codewriter.getImplPackageOfSchema();


import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;

import ${gpkg}.Constant;
import ${gpkg}.${beanClass};
import ${gpkg}.IBeanConverter;
import ${gpkg}.IDbConverter;
import ${schemaPkg}.ITableCache;
import ${gpkg}.TableManager;
import ${gpkg}.$table.asManagerInterfaceNSP();
#foreach ($linkedTable in $linkedTables)
import ${linkedTable.getPackage(true)}.${linkedTable.asBeanClass($isGeneral)};
import ${linkedTable.getPackage(false)}.Cache.${linkedTable.asCacheClass($isGeneral)};
#end
import ${gpkg}.TableListener;
import ${gpkg}.WrapDAOException;

import ${pkg}.exception.DAOException;
import ${table.getPackage(false)}.${managerClass};
import ${table.getPackage(true)}.${beanClass};
import ${table.getPackage(false)}.Cache.${table.asCacheClass($isGeneral)};

/**
 * Handles database calls (save, load, count, etc...) for the $tablename table.<br>
#if ( $table.hasRemarks() )
 * Remarks: $table.getRemarks()
#end
 * @author guyadong
 */
public class $cacheManagerClass extends $managerClass
{
    private $managerClass nativeManager = ${managerClass}.getInstance();
    private final ${table.asCacheClass($isGeneral)} $table.asCacheVarName();
#foreach ($foreignTable in $linkedTables)
    private ${foreignTable.asCacheClass($isGeneral)} $foreignTable.asCacheVarName();
    public void $foreignTable.asCacheVarSetMethod()(${foreignTable.asCacheClass($isGeneral)} $foreignTable.asCacheVarName()){
        this.$foreignTable.asCacheVarName() = $foreignTable.asCacheVarName();
    }
#end
    public $cacheManagerClass(long maximumSize, long duration, TimeUnit unit) {
        this.$table.asCacheVarName() = new ${table.asCacheClass($isGeneral)}(maximumSize,duration,unit);
    }
    public $cacheManagerClass(long maximumSize, long durationMinutes) {
        this(maximumSize, durationMinutes, ITableCache.DEFAULT_TIME_UNIT);
    }

    public $cacheManagerClass(long maximumSize) {
        this(maximumSize,ITableCache.DEFAULT_DURATION,ITableCache.DEFAULT_TIME_UNIT);
    }
    public $cacheManagerClass() {
        this(ITableCache.DEFAULT_CACHE_MAXIMUMSIZE,ITableCache.DEFAULT_DURATION,ITableCache.DEFAULT_TIME_UNIT);
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    //1 override $table.asManagerInterfaceNSP()
    @Override 
    public $beanClass loadByPrimaryKey($primaryKey.getJavaType() $primaryKey.getVarName())
    {
        return ${table.asCacheVarName()}.getBean($primaryKey.getVarName());
    }

    //1.2
    @Override
    public $beanClass loadByPrimaryKey(${beanClass} bean)
    {        
        return null == bean ? null : ${table.asCacheVarName()}.getBean(bean.$primaryKey.getGetMethod()());
    }
## ======================================================
## xImportedKeys template
## ======================================================

#foreach ($importedTable in $importedTables)
#if ( $velocityCount == 1 )

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
#end
#foreach( $fkName in $importedTable.getFkMapNames($table.name) )
#set ( $importedClass = "$importedTable.asBeanClass($isGeneral)" )

    //3.2 GET IMPORTED override $table.asManagerInterfaceNSP()
    @Override 
    public java.util.List<$importedClass> ${importedTable.getImportedBeansGetMethod($fkName)}AsList($beanClass bean)
    {
        return (java.util.List<$importedClass>)${importedTable.asCacheVarName()}.put(super.${importedTable.getImportedBeansGetMethod($fkName)}AsList(bean));
    }
#end
#end


## ======================================================
## xForeignKeys template
## ======================================================
    
#foreach ($foreignTable in $foreignTables)
#if ( $velocityCount == 1 )
    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////

#end
#set ( $foreignClass = "$foreignTable.asBeanClassNSP()" )
#set ( $foreignNative = "$foreignTable.asBeanClass()" )
#set ( $foreignClassManager = "$foreignTable.asManagerClass()" )
#foreach( $fkName in $table.getFkMapNames($foreignTable.name))
#set ( $columnsOfFk = $table.getForeignKeysByFkName($fkName) )
#if( 1 == $columnsOfFk.size() )
    //5.1 GET REFERENCED VALUE override $table.asManagerInterfaceNSP()
    @Override 
    public $foreignClass $table.getReferencedVarGetMethod($fkName)($beanClass bean)
    {
        if(null == bean)return null;
        bean.$table.getReferencedVarSetMethod($fkName)(${foreignTable.asCacheVarName()}.getBean(bean.${columnsOfFk.get(0).getGetMethod()}())); 
        return bean.$table.getReferencedVarGetMethod($fkName)();        
    }
#end    
#end
#end
    private class CacheAction implements Action<$beanClass>{
        final Action<$beanClass> action;
        CacheAction(Action<$beanClass>action){
            this.action = action;            
        }
        @Override
        public void call($beanClass bean) {
            if(null != action){
                action.call(bean);
            }
            ${table.asCacheVarName()}.put(bean);
        }
        @Override
        public $beanClass getBean() {
            return null == action?null:action.getBean();
        }}
    //20-5
    @Override
    public int loadUsingTemplate(${beanClass} bean, int[] fieldList, int startRow, int numRows,int searchType, Action<$beanClass> action)
    {
        if(null == fieldList )
            action = new CacheAction(action);
        return super.loadUsingTemplate(bean,fieldList,startRow,numRows,searchType,action);
    }

#if ($table.countIndices() > 0)
    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________

#foreach ( $index in $table.getIndices() )
#if($index.isUnique() && 1 == $indexColumns.size())
#set ($indexColumn = $indexColumns.getIndexColumn())
#set ($columnType = $indexColumn.getJavaType())

    // override $table.asManagerInterfaceNSP()
    @Override 
    public $beanClass loadBy${indexColumn.asCamelCaseName()}($indexColumn.getJavaType() $indexColumn.getVarName())
    {
        ${index.getTable().asCacheVarName()}.put(super.loadBy${indexColumn.asCamelCaseName()}($indexColumn.getVarName()));
    }
#end## $index.isUnique() && 1 == $indexColumns.size()    
#end
#end##($table.countIndices() > 0)

}
