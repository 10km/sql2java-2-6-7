#parse( "table.include.vm" )
#parse( "header.include.vm" )
######################
#if ($table.countPrimaryKeys() != 1)
$codewriter.setSaveCurrentFile(false)
#stop
#end
#set ( $primaryKey = $table.getPrimaryKey())
#set ( $cacheManagerClass = $table.asCacheManagerClass($isGeneral) )
#set ( $managerClass = $table.asManagerClass($isGeneral) )
###set ( $nativeClass = $table.asBeanClass() )
#set ( $beanClass = $table.asBeanClass($isGeneral) )
##set ( $listenerClass = $table.asListenerClassNSP() )
##set ( $nativeListener = $table.asListenerClass() )
$codewriter.setCurrentJavaFilename($table.getPackage(false), "${cacheManagerClass}.java")
package $table.getPackage(false);

import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;

import ${schemaPkg}.ITableCache;
import ${schemaPkg}.ITableCache.UpdateStrategy;
import net.gdface.facelog.db.exception.ObjectRetrievalException;
import net.gdface.facelog.db.exception.WrapDAOException;
#importLinkedTable()
#if(!$isGeneral)
import ${pkg}.exception.DAOException;
#set ($throwsString = "throws DAOException")
#end
import ${table.getPackage(false)}.${managerClass};
import ${table.getPackage(true)}.${beanClass};
import ${table.getPackage(false)}.${table.asCacheClass($isGeneral)};
#macro(instanceOf $extMgr)#if($extMgr != $cacheManagerClass)${extMgr}.getInstance().#end#end

/**
 * cache implementation for $managerClass<br>
 * @author guyadong
 */
public class $cacheManagerClass extends $managerClass
{
    /** singleton of $cacheManagerClass */
    private static $cacheManagerClass instance;
    /** 
     * @return a instance of $cacheManagerClass
     * @throws IllegalStateException while {@link #instance} is null
     */
    public static final $cacheManagerClass getInstance(){
        if(null == instance){
            throw new IllegalStateException("uninitialized instance of $cacheManagerClass");
        }
        return instance;
    }
    /**
     * create a instance of $cacheManagerClass and assign to {@link #instance} if {@code instance} is not initialized.<br>
     * otherwise return {@code instance}.
     * @see {@link $cacheManagerClass#$cacheManagerClass(UpdateStrategy ,long , long , TimeUnit )}
     */
    public static synchronized final $cacheManagerClass makeInstance(UpdateStrategy updateStragey,long maximumSize, long duration, TimeUnit unit){
        if(null == instance){
            instance = new $cacheManagerClass(updateStragey,maximumSize,duration,unit);
        }
        return instance;
    }
    /** @see ${esc.hash}makeInstance(UpdateStrategy,long, long, TimeUnit) */
    public static final $cacheManagerClass makeInstance(long maximumSize, long duration, TimeUnit unit){
        return makeInstance(ITableCache.DEFAULT_STRATEGY,maximumSize, duration, unit);
    }
    /** @see ${esc.hash}makeInstance(long, long, TimeUnit) */
    public static final $cacheManagerClass makeInstance(long maximumSize, long durationMinutes){
        return makeInstance(maximumSize, durationMinutes, ITableCache.DEFAULT_TIME_UNIT);
    }
    /** @see ${esc.hash}makeInstance(long, long, TimeUnit) */
    public static final $cacheManagerClass makeInstance(long maximumSize){
        return makeInstance(maximumSize,ITableCache.DEFAULT_DURATION,ITableCache.DEFAULT_TIME_UNIT);
    }
    /** instance of {@link ${table.asCacheClass($isGeneral)}} */
    private final ${table.asCacheClass($isGeneral)} cache;
    /** constructor<br>
     * @see {@link ${table.asCacheClass($isGeneral)}#${table.asCacheClass($isGeneral)}(UpdateStrategy ,long , long , TimeUnit )}
     */
    protected $cacheManagerClass(UpdateStrategy updateStragey,long maximumSize, long duration, TimeUnit unit) {
        cache = new ${table.asCacheClass($isGeneral)}(updateStragey,maximumSize,duration,unit);
        cache.registerListener();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    //1.1 override $table.asManagerInterfaceNSP()
    @Override 
    public $beanClass loadByPrimaryKeyChecked($primaryKey.getJavaType() $primaryKey.getVarName()) throws ObjectRetrievalException
    {
        try{
            return cache.getBean($primaryKey.getVarName());
        }catch(ExecutionException ee){
            try{
                throw ee.getCause();
            }catch(ObjectRetrievalException oe){
                throw oe;
            } catch (WrapDAOException we) {
                throw we;
            } catch (RuntimeException re) {
                throw re;
            }catch (Throwable e) {
                throw new RuntimeException(ee);
            }
        }
    }
    //1.4 override $table.asManagerInterfaceNSP()
    @Override 
    public boolean existsPrimaryKey($primaryKey.getJavaType() $primaryKey.getVarName())
    {
        if(null != cache.getBeanIfPresent($primaryKey.getVarName()))return true;
        return super.existsPrimaryKey($primaryKey.getVarName());
    }
## ======================================================
## xForeignKeys template
## ======================================================
    
#foreach ($foreignTable in $foreignTables)
#if ( $velocityCount == 1 )
    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////

#end
#set ( $foreignClass = "$foreignTable.asBeanClass($isGeneral)" )
#set ( $foreignCache = "$foreignTable.asCacheManagerClass($isGeneral)" )
#foreach( $fkName in $table.getFkMapNames($foreignTable.name))
#set ( $columnsOfFk = $table.getForeignKeysByFkName($fkName) )
#if( 1 == $columnsOfFk.size() )
    //5.1 GET REFERENCED VALUE override $table.asManagerInterfaceNSP()
    @Override 
    public $foreignClass $table.getReferencedVarGetMethod($fkName)($beanClass bean){
        if(null == bean)return null;
        bean.$table.getReferencedVarSetMethod($fkName)(#instanceOf(${foreignCache})loadByPrimaryKey(bean.${columnsOfFk.get(0).getGetMethod()}())); 
        return bean.$table.getReferencedVarGetMethod($fkName)();
    }
#end    
#end
#end
    private class CacheAction implements Action<$beanClass>{
        final Action<$beanClass> action;
        CacheAction(Action<$beanClass>action){
            this.action = action;
        }
        @Override
        public void call($beanClass bean)$!throwsString {
            if(null != action){
                action.call(bean);
            }
            cache.update(bean);
        }
        @Override
        public $beanClass getBean() {
            return null == action?null:action.getBean();
        }
    }
    //20-5
    @Override
    public int loadUsingTemplate(${beanClass} bean, int[] fieldList, int startRow, int numRows,int searchType, Action<$beanClass> action)$!throwsString{
        if(null == fieldList )
            action = new CacheAction(action);
        return super.loadUsingTemplate(bean,fieldList,startRow,numRows,searchType,action);
    }

#set($uniqueIndices = $table.getUniqueIndicesAsList())
#if (!$uniqueIndices.empty)
    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________
#foreach ( $index in $uniqueIndices )
#if(1 == $index.getIndexColumnsList().size())
#set ($indexColumn = $index.getIndexColumn())
#set ($columnType = $indexColumn.getJavaType())
    // override $table.asManagerClassNSP()
    @Override 
    public $beanClass loadBy${index.asCamelCaseName()}Checked($indexColumn.getJavaType() $indexColumn.getVarName()) throws ObjectRetrievalException{
        try{
            return cache.${indexColumn.getGetCacheMethod()}($indexColumn.getVarName());
        }catch(ExecutionException ee){
            try{
                throw ee.getCause();
            }catch(ObjectRetrievalException oe){
                throw oe;
            } catch (WrapDAOException we) {
                throw we;
            } catch (RuntimeException re) {
                throw re;
            }catch (Throwable e) {
                throw new RuntimeException(ee);
            }
        }
    }
#end## 1 == $indexColumns.size()
#end
#end##($table.countIndices() > 0)
################### CHECK CYCLE BEFORE SAVE FOR SELF-REFERENCE FIELD#################
#if(!$table.selfRefKeys.empty)
    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    //12
    /**
     * check cycle for the self-reference field before save
     */
    @Override
    public $beanClass save($beanClass bean){
#foreach($selfFk in $table.selfRefKeys)
        $table.getCheckNotCycleMethod($selfFk)(bean);
#end
        return super.save(bean);
    }
#end

#set ( $jTables = $table.getJunctionTables() )
#foreach ( $jTable in $jTables )
#set ( $linkedTable = $jTable.tableOfJunction( $table) )
#if ( $velocityCount == 1)
    //_____________________________________________________________________
    //
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE
    //_____________________________________________________________________
#end
#set ( $junctionBeanClass = $jTable.asBeanClass($isGeneral))
#set ( $linkedBean = "${linkedTable.asBeanClass($isGeneral)}" )
#set ( $localFk = $jTable.getForeignKeys($table)[0])
#set ( $linkedFk = $jTable.getForeignKeys($linkedTable)[0])
#set ( $linkManagerClass = ${linkedTable.asManagerClass($isGeneral)})
    //23 MANY TO MANY
    // override $table.asManagerClassNSP()
    @Override 
    public java.util.List<${beanClass}> $jTable.getLoadMethodOfJunction()AsList($linkedBean bean, int startRow, int numRows)
    {
        java.util.List<$junctionBeanClass> junctions = 
            #instanceOf(${linkManagerClass})${jTable.getImportedBeansGetMethod($linkedFk.fkName)}AsList(bean,startRow,numRows);
        java.util.ArrayList<$beanClass> lbeans = new java.util.ArrayList<$beanClass>(junctions.size());
        for(${jTable.asBeanClass($isGeneral)} jbean:junctions){
        	try{
        		lbeans.add(loadByPrimaryKeyChecked(#join($localFk.columns 'jbean.$e.getGetMethod()()' ',')));
        	}catch(ObjectRetrievalException  e){}
        }
        return lbeans;
    }
#end
}
