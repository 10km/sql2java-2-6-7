#parse( "table.include.vm" )
#parse( "header.include.vm" )
######################
#if ($table.countPrimaryKeys() != 1)
$codewriter.setSaveCurrentFile(false)
#stop
#end
#set ( $primaryKey = $table.getPrimaryKey())
#set ( $cacheManagerClass = $table.asCacheManagerClass($isGeneral) )
#set ( $managerClass = $table.asManagerClass($isGeneral) )
###set ( $nativeClass = $table.asBeanClass() )
#set ( $beanClass = $table.asBeanClass($isGeneral) )
##set ( $listenerClass = $table.asListenerClassNSP() )
##set ( $nativeListener = $table.asListenerClass() )
$codewriter.setCurrentJavaFilename($table.getPackage(false), "${cacheManagerClass}.java")
package $table.getPackage(false);

import java.util.concurrent.TimeUnit;

import ${schemaPkg}.ITableCache;
#foreach ($foreignTable in $foreignTables)
import ${foreignTable.getPackage(true)}.${foreignTable.asBeanClass($isGeneral)};
import ${foreignTable.getPackage(false)}.${foreignTable.asCacheManagerClass($isGeneral)};
#end
#if(!$isGeneral)
import ${pkg}.exception.DAOException;
#set ($throwsString = "throws DAOException")
#end
import ${table.getPackage(false)}.${managerClass};
import ${table.getPackage(true)}.${beanClass};
import ${table.getPackage(false)}.${table.asCacheClass($isGeneral)};

/**
 * Handles database calls (save, load, count, etc...) for the $tablename table.<br>
#if ( $table.hasRemarks() )
 * Remarks: $table.getRemarks()
#end
 * @author guyadong
 */
public class $cacheManagerClass extends $managerClass
{
    /** singleton of $cacheManagerClass */
    private static $cacheManagerClass instance;
    /** 
     * @return a instance of $cacheManagerClass
     * @throws IllegalStateException while {@link #instance} is null
     */
    public static final $cacheManagerClass getInstance(){
        if(null == instance){
            throw new IllegalStateException("uninitialized instance of $cacheManagerClass");
        }
        return instance;
    }
    /**
     * create a instance of $cacheManagerClass and assign to {@link #instance},if <code>instance</code> is not initialized.<br>
     * otherwise return <code>instance</code>
     */
    public static synchronized final $cacheManagerClass makeInstance(long maximumSize, long duration, TimeUnit unit){
        if(null == instance){
            instance = new $cacheManagerClass(maximumSize,duration,unit);
        }
        return instance;
    }
    /** @see ${esc.hash}makeInstance(long, long, TimeUnit) */
    public static final $cacheManagerClass makeInstance(long maximumSize, long durationMinutes){
        return makeInstance(maximumSize, durationMinutes, ITableCache.DEFAULT_TIME_UNIT);
    }
    /** @see ${esc.hash}makeInstance(long, long, TimeUnit) */
    public static final $cacheManagerClass makeInstance(long maximumSize){
        return makeInstance(maximumSize,ITableCache.DEFAULT_DURATION,ITableCache.DEFAULT_TIME_UNIT);
    }
    /** instance of {@link ${table.asCacheClass($isGeneral)}} */
    private final ${table.asCacheClass($isGeneral)} cache;
    protected $cacheManagerClass(long maximumSize, long duration, TimeUnit unit) {
        cache = new ${table.asCacheClass($isGeneral)}(maximumSize,duration,unit);
        cache.registerListener();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    //1 override $table.asManagerInterfaceNSP()
    @Override 
    public $beanClass loadByPrimaryKey($primaryKey.getJavaType() $primaryKey.getVarName()){
        return cache.getBean($primaryKey.getVarName());
    }

    //1.2
    @Override
    public $beanClass loadByPrimaryKey(${beanClass} bean){        
        return null == bean ? null : loadByPrimaryKey(bean.$primaryKey.getGetMethod()());
    }
## ======================================================
## xForeignKeys template
## ======================================================
    
#foreach ($foreignTable in $foreignTables)
#if ( $velocityCount == 1 )
    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////

#end
#set ( $foreignClass = "$foreignTable.asBeanClass($isGeneral)" )
#set ( $foreignCache = "$foreignTable.asCacheManagerClass($isGeneral)" )
#foreach( $fkName in $table.getFkMapNames($foreignTable.name))
#set ( $columnsOfFk = $table.getForeignKeysByFkName($fkName) )
#if( 1 == $columnsOfFk.size() )
    //5.1 GET REFERENCED VALUE override $table.asManagerInterfaceNSP()
    @Override 
    public $foreignClass $table.getReferencedVarGetMethod($fkName)($beanClass bean){
        if(null == bean)return null;
        bean.$table.getReferencedVarSetMethod($fkName)(${foreignCache}.getInstance().loadByPrimaryKey(bean.${columnsOfFk.get(0).getGetMethod()}())); 
        return bean.$table.getReferencedVarGetMethod($fkName)();
    }
#end    
#end
#end
    private class CacheAction implements Action<$beanClass>{
        final Action<$beanClass> action;
        CacheAction(Action<$beanClass>action){
            this.action = action;
        }
        @Override
        public void call($beanClass bean)$!throwsString {
            if(null != action){
                action.call(bean);
            }
            cache.put(bean);
        }
        @Override
        public $beanClass getBean() {
            return null == action?null:action.getBean();
        }}
    //20-5
    @Override
    public int loadUsingTemplate(${beanClass} bean, int[] fieldList, int startRow, int numRows,int searchType, Action<$beanClass> action)$!throwsString{
        if(null == fieldList )
            action = new CacheAction(action);
        return super.loadUsingTemplate(bean,fieldList,startRow,numRows,searchType,action);
    }

#if ($table.countIndices() > 0)
    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________
#foreach ( $index in $table.getIndices() )
#if($index.isUnique() && 1 == $index.getIndexColumnsList().size())
#set ($indexColumn = $index.getIndexColumn())
#set ($columnType = $indexColumn.getJavaType())
    // override $table.asManagerInterfaceNSP()
    @Override 
    public $beanClass loadBy${index.asCamelCaseName()}($indexColumn.getJavaType() $indexColumn.getVarName()){
        return cache.${indexColumn.getGetCacheMethod()}($indexColumn.getVarName());
    }
#end## $index.isUnique() && 1 == $indexColumns.size()    
#end
#end##($table.countIndices() > 0)
}
