#parse( "table.include.vm" )
#parse( "header.include.vm" )
#if ($table.countPrimaryKeys() != 1)
$codewriter.setSaveCurrentFile(false)
#stop
#end
#set($beanClass = $table.asBeanClass($isGeneral))
#set($managerClass = $table.asManagerClass($isGeneral))
#set($cacheClass = $table.asCacheClass($isGeneral) )
$codewriter.setCurrentJavaFilename($table.getPackage(false), "${cacheClass}.java")
package $table.getPackage(false);

import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;

import ${schemaPkg}.BaseTableLoadCaching;
#if(!$isGeneral)
import ${pkg}.exception.DaoException;
#end
import $table.getPackage(true).$beanClass;
#if(!$isGeneral)
import $table.getPackage(false).$managerClass;
#end

#set($pk = $table.getPrimaryKey())
#set($pkType = $pk.getJavaType())
#set($uniqueIndices = $table.getUniqueIndicesAsList())
/**
 * cache manager for $beanClass base {@link com.google.common.cache.LoadingCache}<br>
 * primary key ($pk.fullName) is key
 * @author guyadong
 *
 */
public class $cacheClass extends BaseTableLoadCaching<$pkType, $beanClass> {
    private final $managerClass manager = ${managerClass}.getInstance();
    #join($uniqueIndices '
    private final BaseTableLoadCaching<${e.getIndexColumn().getJavaType()}, $beanClass> ${e.getIndexColumn().getCacheVarName()};' '')

    /** constructor<br>
     * @see BaseTableLoadCaching#BaseTableLoadCaching(UpdateStrategy ,long , long , TimeUnit )
     */
    public $cacheClass(UpdateStrategy updateStrategy,long maximumSize, long duration, TimeUnit unit) {
        super(updateStrategy,maximumSize, duration, unit);
        manager.bindForeignKeyListenerForDeleteRule();
############ FOR INDICES ############
#foreach ( $index in $table.getIndices() )
#if($index.isUnique())
#set ($indexColumn = $index.getIndexColumn())
#set ($columnType = $indexColumn.getJavaType())

        ${indexColumn.getCacheVarName()} = new BaseTableLoadCaching<$columnType, $beanClass>(updateStrategy, maximumSize, duration, unit){
            @Override
            public void registerListener() {
                manager.registerListener(this.tableListener);
            }
            @Override
            public void unregisterListener() {
                manager.unregisterListener(this.tableListener);
            }
            @Override
            protected $columnType returnKey($beanClass bean) {
                if(null == bean){
                    return null;
                }
                $columnType key = bean.$indexColumn.getGetMethod()();
                if(key == null){
                    bean = ${cacheClass}.this.getBeanIfPresent(bean.$pk.getGetMethod()());
                    return null == bean ? null : bean.$indexColumn.getGetMethod()();
                }
                return key;
            }
            @Override
            protected $beanClass loadfromDatabase($columnType key) throws Exception {
                $beanClass bean = manager.loadBy${index.asCamelCaseName()}Checked(key);
                addToOtherCache(bean,this);
                return bean;
            }};
#end###if($index.isUnique())
#end##foreach
    }
    /**
     * add bean to all other cacher
     * @param bean
     * @param exclude
     */
    private void addToOtherCache($beanClass bean,BaseTableLoadCaching<?,?> exclude){
        if(exclude != this){
            this.getCacheMap().putIfAbsent(bean.$pk.getGetMethod()(),bean);
        }
#foreach ( $index in $table.getIndices() )
#if($index.isUnique())
#set ($indexColumn = $index.getIndexColumn())
#set ($columnType = $indexColumn.getJavaType())
        if(exclude != ${indexColumn.cacheVarName}){
            $columnType key = bean.$indexColumn.getGetMethod()();
            if(key != null){
                ${indexColumn.cacheVarName}.getCacheMap().putIfAbsent(key,bean);
            }
        }
#end###if($index.isUnique())
#end##foreach            
    }    
    public $cacheClass(long maximumSize, long duration, TimeUnit unit) {
        this(DEFAULT_STRATEGY,maximumSize,duration,unit);
    }
    public $cacheClass(long maximumSize, long durationMinutes) {
        this(maximumSize, durationMinutes, DEFAULT_TIME_UNIT);
    }

    public $cacheClass(long maximumSize) {
        this(maximumSize,DEFAULT_DURATION,DEFAULT_TIME_UNIT);
    }
    public $cacheClass() {
        this(DEFAULT_CACHE_MAXIMUMSIZE,DEFAULT_DURATION,DEFAULT_TIME_UNIT);
    }
    
    @Override
    public void registerListener() {        
        #join($uniqueIndices '
        ${e.getIndexColumn().getCacheVarName()}.registerListener();' '')

        manager.registerListener(tableListener);
    }
    @Override
    public void unregisterListener() {
        manager.unregisterListener(tableListener);
        #join($uniqueIndices '
        ${e.getIndexColumn().getCacheVarName()}.unregisterListener();' '')

    }
    @Override
    protected $pkType returnKey($beanClass bean) {
        return null == bean ? null : bean.$pk.getGetMethod()();
    }
    @Override
    protected $beanClass loadfromDatabase($pkType key)throws Exception {
        $beanClass bean = manager.loadByPrimaryKeyChecked(key);
        addToOtherCache(bean,this);
        return bean;
    }
#if(!$uniqueIndices.empty)
    @Override
    public void update($beanClass bean){
        super.update(bean);
        #join($uniqueIndices '
        ${e.getIndexColumn().getCacheVarName()}.update(bean);' '')

    }
    @Override
    public void remove($beanClass bean){
        super.remove(bean);
        #join($uniqueIndices '
        ${e.getIndexColumn().getCacheVarName()}.remove(bean);' '')

    }
#end###if(!$uniqueIndices.empty)
    public $beanClass $pk.getGetCacheMethod()($pkType $pk.getVarName()) throws ExecutionException{
        return getBean($pk.getVarName());
    }
    public $beanClass $pk.getGetCacheMethod()Unchecked($pkType $pk.getVarName()){
        return getBeanUnchecked($pk.getVarName());
    }
#foreach ( $index in $table.getIndices() )
#if($index.isUnique())
#set ($indexColumn = $index.getIndexColumn())
#set ($columnType = $indexColumn.getJavaType())
    public $beanClass $indexColumn.getGetCacheMethod()($columnType $indexColumn.getVarName())  throws ExecutionException{
        return ${indexColumn.getCacheVarName()}.getBean($indexColumn.getVarName());
    }
    public $beanClass $indexColumn.getGetCacheMethod()Unchecked($columnType $indexColumn.getVarName()){
        return ${indexColumn.getCacheVarName()}.getBeanUnchecked($indexColumn.getVarName());
    }
#end
#end
}