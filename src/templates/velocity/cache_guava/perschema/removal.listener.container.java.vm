#parse( "header.include.vm" )
#set ( $javaClassName = 'RemovalListenerContainer' )
$codewriter.setCurrentJavaFilename($schemaPkg, "${javaClassName}.java")
package $schemaPkg;

import java.util.LinkedHashSet;

import com.google.common.base.Preconditions;
import com.google.common.cache.RemovalListener;
import com.google.common.cache.RemovalNotification;

/**
 * {@link RemovalListener}管理容器
 * @author guyadong
 *
 * @param <K>
 * @param <V>
 */
public class RemovalListenerContainer<K,V> implements RemovalListener<K, V> {
    LinkedHashSet<RemovalListener<K,V>> listeners = new LinkedHashSet<RemovalListener<K,V>>(); 
    public RemovalListenerContainer() {
    }

    /**
     * @param e
     * @return
     * @see java.util.HashSet{esc.hash}add(java.lang.Object)
     */
    public boolean add(RemovalListener<K, V> e) {
        Preconditions.checkNotNull(e);
        return listeners.add(e);
    }

    /**
     * @param o
     * @return
     * @see java.util.HashSet{esc.hash}remove(java.lang.Object)
     */
    public boolean remove(RemovalListener<K, V> o) {
        return listeners.remove(o);
    }

    /**
     * 
     * @see java.util.HashSet{esc.hash}clear()
     */
    public void clear() {
        listeners.clear();
    }

    @Override
    public void onRemoval(RemovalNotification<K, V> notification) {
        for(RemovalListener<K, V> listener:listeners){
            try{
                listener.onRemoval(notification);
            }catch(Exception e){
                e.printStackTrace();
            }
        }
    }

}
