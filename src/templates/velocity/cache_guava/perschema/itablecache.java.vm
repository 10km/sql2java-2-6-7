#parse( "header.include.vm" )
#set ( $javaClassName = 'ITableCache' )
$codewriter.setCurrentJavaFilename($schemaPkg, "${javaClassName}.java")
package $schemaPkg;

import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.TimeUnit;
import java.util.Collection;
/**
 * 数据库对象缓存接口
 * @param <K> 主键类型(Primary or Unique)
 * @param <B> 数据库记录对象类型(Java Bean)
 * @author guyadong
 */
public interface $javaClassName<K, B extends BaseBean<B>> {
    /** 
     * {@code always} update no matter whether key exists<br>
     * {@code ifAbsent} update if key not exists<br>
     * {@code replace} update only key exists 
     */
    public static enum UpdateStrategy{
        always,ifAbsent,replace;
        public <K,V> void update(ConcurrentMap<K,V> map,K key,V value){
            if(null == map || null == key || null == value)return ;
            switch(this){
            case always:
                map.put(key, value);
                break;
            case ifAbsent:
                map.putIfAbsent(key, value);
                break;
            case replace:
                map.replace(key, value);
                break;
            }
        }
    }
    public static final UpdateStrategy DEFAULT_STRATEGY = UpdateStrategy.always;
    public static final long DEFAULT_CACHE_MAXIMUMSIZE = 10000;
    public static final long DEFAULT_DURATION = 10;
    public static final TimeUnit DEFAULT_TIME_UNIT = TimeUnit.MINUTES;
    /**
     * 加载主键(key)指定的记录,如果缓存中没有则从数据库中查询<br>
     * 数据库中没有找到则抛出异常
     * @param key
     * @return
     */
    public B getBean(K key) throws Exception;
    /**
     * 加载主键(key)指定的记录,如果缓存中没有则从数据库中查询<br>
     * 数据库中没有找到则返回{@code null}
     * @param key
     * @return
     */
    public B getBeanUnchecked(K key);
    /**
     * 返回cache中{@code key}指定的记录,如果不存在就返回{@code null}
     * @param key  
     * @return return false if key is null
     */
    public B getBeanIfPresent(K key);
    /**
     * 删除cache中{@code key}指定的记录
     * @param bean
     */
    public void remove(B bean);
    /**
     * 向cache中更新数据
     * @param bean
     * @return
     * @see {@link UpdateStrategy}
     */
    public void update(B bean);
    /**
     * @param beans
     * @return always beans 
     * @see #update(B) 
     */
    public Collection<B> update(Collection<B> beans);
    /** 注册侦听器 */
    public void registerListener();
    /** 注销侦听器 */
    public void unregisterListener();
}