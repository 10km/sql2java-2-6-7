#parse( "header.include.vm" )
#if(!$codewriter.existsDependencyPackage())
$codewriter.setSaveCurrentFile(false);
#stop
#end
## swift生成的client代码的package
#set ( $thriftPackage = ${codewriter.getDependencyPackage()})
#set ( $javaClassName = "ServiceRuntimeException" )
$codewriter.setCurrentJavaFilename("${schemaPkg}", "${javaClassName}.java")
package ${schemaPkg};

import java.io.PrintStream;
import java.io.PrintWriter;

import com.google.common.base.Preconditions;

/**
 * Runtime exception wrap class<br>
 * all {@link RuntimeException} threw from service was wrapped to the exception<br>
 * catch the exception to retrieve detail error message from service<br>
 * retrieve service stack trace message by call {@link #getServiceStackTraceMessage()}<br>
 * get exception type by call {@link getType()}
 * @author guyadong
 *
 */
public final class ServiceRuntimeException extends RuntimeException {
    private static final long serialVersionUID = 1L;
    private final int type;    
    private String serviceMessage;    
    private String causeClass;
    private final String serviceStackTraceMessage;
    /**
     * @param cause
     */
    ServiceRuntimeException(${thriftPackage}.ServiceRuntimeException cause) {
        super(cause);
        type = cause.getType();
        serviceMessage = cause.getServiceMessage();
        causeClass = cause.getCauseClass();
        serviceStackTraceMessage = cause.getServiceStackTraceMessage();
    }

    @Override
    public String getMessage() {
        return getServiceStackTraceMessage();
    }
    /**
     * print stack trace message from service to {@link System#err}
     * @see ${esc.hash}printStackTrace()
     */
    public void printServiceStackTrace() {
        printServiceStackTrace(System.err);
    }

    /**
     * @param s
     * @see ${esc.hash}printServiceStackTrace()
     * @see ${esc.hash}printStackTrace(PrintStream)
     * @throws NullPointerException s is {@code null}
     */
    public void printServiceStackTrace(PrintStream s) {
        synchronized (Preconditions.checkNotNull(s)) {
            s.println(serviceStackTraceMessage);
        }
    }

    /**
     * @param s
     * @see ${esc.hash}printServiceStackTrace()
     * @see ${esc.hash}printStackTrace(PrintWriter)
     * @throws NullPointerException s is {@code null}
     */
    public void printServiceStackTrace(PrintWriter s) {
        synchronized (Preconditions.checkNotNull(s)) {
            s.println(serviceStackTraceMessage);
        }
    }
    /** return exception type */
    public int getType() {
        return type;
    }    
    /** return error message from service */
    public String getServiceMessage() {
        return serviceMessage;
    }
    /** return cause exception class name */
    public String getCauseClass() {
        return causeClass;
    }
    /** return stack trace message from service */
    public String getServiceStackTraceMessage() {
        return serviceStackTraceMessage;
    }
}
