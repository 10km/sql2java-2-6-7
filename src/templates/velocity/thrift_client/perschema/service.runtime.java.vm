#parse( "header.include.vm" )
#if(!$codewriter.existsDependencyPackage())
$codewriter.setSaveCurrentFile(false);
#stop
#end
## swift生成的client代码的package
#set ( $thriftPackage = ${codewriter.getDependencyPackage()})
#set ( $javaClassName = "ServiceRuntime" )
$codewriter.setCurrentJavaFilename("${schemaPkg}", "${javaClassName}.java")
package ${schemaPkg};

import java.io.PrintStream;
import java.io.PrintWriter;

import com.google.common.base.Preconditions;

/**
 * 封装服务端调用产生的运行时异常<br>
 * 调用service端方法时产生的所有{@link RuntimeException}在抛出到客户端时被封装在{@link ${thriftPackage}.ServiceRuntime}中,
 * 捕获此异常可以获取服务端抛出的{@link RuntimeException}的详细信息<br>
 * 调用{@link #getServerStackTraceMessage()}可以获取服务器端的堆栈错误信息<br>
 * 调用{@link #printServerStackTrace()}控制台输出服务器端的堆栈错误信息<br>
 * @author guyadong
 *
 */
public final class ServiceRuntime extends RuntimeException {
    private static final long serialVersionUID = 1L;
    /**
     * 服务器端错误堆栈信息
     */
    private final String serverStackTraceMessage;

    /**
     * @param cause
     */
    ServiceRuntime(${thriftPackage}.ServiceRuntime cause) {
        super(cause);
        serverStackTraceMessage = cause.getServerStackTraceMessage();
    }

    @Override
    public String getMessage() {
        return getServerStackTraceMessage();
    }
    /**
     * 输出服务器端堆栈错误信息到{@link System#err}
     * @see ${esc.hash}printStackTrace()
     */
    public void printServerStackTrace() {
        printServerStackTrace(System.err);
    }

    /**
     * @param s
     * @see ${esc.hash}printServerStackTrace()
     * @see ${esc.hash}printStackTrace(PrintStream)
     * @throws NullPointerException s is {@code null}
     */
    public void printServerStackTrace(PrintStream s) {
        synchronized (Preconditions.checkNotNull(s)) {
            s.println(serverStackTraceMessage);
        }
    }

    /**
     * @param s
     * @see ${esc.hash}printServerStackTrace()
     * @see ${esc.hash}printStackTrace(PrintWriter)
     * @throws NullPointerException s is {@code null}
     */
    public void printServerStackTrace(PrintWriter s) {
        synchronized (Preconditions.checkNotNull(s)) {
            s.println(serverStackTraceMessage);
        }
    }
    
    /** 返回服务器端异常的堆栈信息 */
    public String getServerStackTraceMessage() {
        return serverStackTraceMessage;
    }
}
