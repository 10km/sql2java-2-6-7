## set your macro here
## example:
## #macro( myFunction $a $b $c)
##  1st argument : $a, 2nd argument : $b and third one is $c
## #end
##
## call your macro with #myFunction("un","dos","three")
#macro (join $elements $do $separator)#foreach($e in $elements)#set($m_0count = $velocityCount - 1)#if ( $velocityCount > 1 )$separator#end#evaluate($do)#end#end
#####################
#macro(foreachImportedTables $native $m_table $do $separator $newline)
#set ( $m_count = 0 ) 
#foreach ($m_importedTable in $m_table.importedTables)
#if($native == 'native')
#set ( $m_importedClass = "$m_importedTable.asBeanClassNSP()" )
#set ( $m_importedNative = "$m_importedTable.asBeanClass()" )
#else
#set ( $m_importedClass = "$m_importedTable.asBeanClass()" )
#end
#set ( $m_importedClassManager = "$m_importedTable.asManagerClass()" )
#foreach( $m_fkName in $m_importedTable.getFkMapNames($m_table.name) )
#set($m_count = $m_count + 1)
#set ( $m_columnsOfFk = $m_importedTable.getForeignKeysByFkName($m_fkName) )#if($m_count > 1 )$separator#end$do#if(!$newline.empty)

#end#end#end
#end
#######################
#macro (foreachForeignTables $native $m_table $do $separator $newline)
#set ( $m_count = 0 )
#foreach($m_foreignTable in $m_table.foreignTables)
#if($native == 'native')
#set ( $m_foreignClass = "$m_foreignTable.asBeanClassNSP()" )
#set ( $m_foreignNative = "$m_foreignTable.asBeanClass()" )
#else
#set ( $m_foreignClass = "$m_foreignTable.asBeanClass()" )
#end
#set ( $m_foreignClassManager = "$m_foreignTable.asManagerClass()" )
#foreach( $m_fkName in $m_table.getFkMapNames($m_foreignTable.name) )
#set($m_count = $m_count + 1)
#set ( $m_columnsOfFk = $m_table.getForeignKeysByFkName($m_fkName) )#if($m_count > 1)$separator#end$do#if(!$newline.empty)

#end#end#end
#end
########################
#macro(swiftThriftStruct)#if($swiftBeanSupport)@ThriftStruct
#set($final = 'final' )
#end#end
#macro(swiftThriftConstructor)#if($swiftBeanSupport)$!SPACE@ThriftConstructor
#end#end
#macro(swiftThriftField $index $requiredness $name)#if($swiftBeanSupport)$!SPACE@ThriftField(#if($index)value=$index#end#if($name),name="$name"#end#if($requiredness),requiredness=$requiredness#end)
#end#end
########################
#macro(swiftImport)
#if($swiftBeanSupport)
import com.facebook.swift.codec.ThriftStruct;
import com.facebook.swift.codec.ThriftField;
import com.facebook.swift.codec.ThriftField.Requiredness;
#end
#end
########################
#macro(swaggerModel $description)#if($swaggerBeanSupport)@ApiModel(description=$strUtil.asJavaString($description))
#end#end
#macro(swaggerField $value $dataType $required)##
#if($swaggerBeanSupport)##
@ApiModelProperty(value=$strUtil.asJavaString($value)#if($dataType),dataType="$dataType"#end#if($required),required=$required#end)
#end#end
#macro(swaggerColumn $column)##
#if($swaggerBeanSupport)##
@ApiModelProperty(##
value = #if ( $column.remarks.length() > 0 )$strUtil.asJavaString($column.remarks)#{else}"$column.name"#end ##
#if($column.notNull && !$column.originalDefaultValue),required=true#end ##
,dataType="$strUtil.simpleName($column.javaType)"##
)
#end##
#end
########################
#macro(swaggerImport)
#if($swaggerBeanSupport)
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
#end
#end
########################
#macro( converterClass $c)${c}Converter#end
########################
#macro(importLinkedTable)
#foreach ($linkedTable in $linkedTables)
#if(${linkedTable.getPackage(true)} != $table.getPackage(false))
import ${linkedTable.getPackage(true)}.${linkedTable.asBeanClass($isGeneral)};
#end
#if(${linkedTable.getPackage(false)} != $table.getPackage(false))
import ${linkedTable.getPackage(false)}.${linkedTable.asManagerClass($isGeneral)};
#end
#end
#end
####################
#macro(defineInstanceMehod $table $currentManagerClass $override)

#define($linkedManagerClass)$linkedTable.asCacheManagerClass($isGeneral)#end
#foreach ($linkedTable in $table.linkedTables)
#if($override)
    @Override
#end
    protected ${linkedTable.asManagerClass($isGeneral)} ${linkedTable.asInstanceMethod($isGeneral)}(){
#if($currentManagerClass == $table.asManagerClass($isGeneral))
        return ${linkedTable.asManagerClass($isGeneral)}.getInstance();
#else
        try{
            return ${linkedManagerClass}.getInstance();
        } catch(IllegalStateException e){
            return ${linkedTable.asManagerClass($isGeneral)}.getInstance();
        }
#end
    }
#end
#if($table.getImportedTablesAsList().contains($table))
#if($override)
    @Override
#end    
    protected $currentManagerClass ${table.asInstanceMethod($isGeneral)}(){
        return this;
    }
#end
#end