##$Id: tablelistener.java.vm,v 1.3 2007/11/12 14:06:30 kameleono Exp $
#parse( "schema.include.vm" )
#parse( "header.include.vm" )
$codewriter.setCurrentJavaFilename($schemaPkg, "TableListener.java")
package $schemaPkg;

import java.util.LinkedHashSet;
#if(!$isGeneral)
import ${schemaPkg}.exception.DAOException;
#set ( $throwsString = "throws DAOException" )
#end

/**
 * Listener that is notified of table changes.
 * @author guyadong
 */
public interface TableListener<B>{
    /**
     * This adapter class provides default implementations for the
     * methods declared by the {@link TableListener} interface.<br>
     * 
     * @author guyadong
     */
    public static class Adapter<B> implements TableListener<B>{

        @Override
        public void beforeInsert(B bean)$!throwsString {}

        @Override
        public void afterInsert(B bean)$!throwsString {}

        @Override
        public void beforeUpdate(B bean)$!throwsString {}

        @Override
        public void afterUpdate(B bean)$!throwsString {}

        @Override
        public void beforeDelete(B bean)$!throwsString {}

        @Override
        public void afterDelete(B bean)$!throwsString {}
    }
    /**
     * Invoked just before inserting a B record into the database.
     *
     * @param bean the B that is about to be inserted
#if($throwsString)
     * @$!throwsString
#end  
     */
    public void beforeInsert(B bean)$!throwsString;


    /**
     * Invoked just after a B record is inserted in the database.
     *
     * @param bean the B that was just inserted
#if($throwsString)
     * @$!throwsString
#end  
     */
    public void afterInsert(B bean)$!throwsString;


    /**
     * Invoked just before updating a B record in the database.
     *
     * @param bean the B that is about to be updated
#if($throwsString)
     * @$!throwsString
#end  
     */
    public void beforeUpdate(B bean)$!throwsString;


    /**
     * Invoked just after updating a B record in the database.
     *
     * @param bean the B that was just updated
#if($throwsString)
     * @$!throwsString
#end  
     */
    public void afterUpdate(B bean)$!throwsString;


    /**
     * Invoked just before deleting a B record in the database.
     *
     * @param bean the B that is about to be deleted
#if($throwsString)
     * @$!throwsString
#end  
     */
    public void beforeDelete(B bean)$!throwsString;


    /**
     * Invoked just after deleting a B record in the database.
     *
     * @param bean the B that was just deleted
#if($throwsString)
     * @$!throwsString
#end  
     */
    public void afterDelete(B bean)$!throwsString;

    /**
     * listener event
     * {@code INSERT} insert a bean<br>
     * {@code UPDATE} update a bean<br>
     * {@code DELETE} delete a bean<br>
     * @author guyadong
     *
     */
    public static enum Event{
        /** insert a bean */
        INSERT,UPDATE,DELETE;
        /**
         * fire current event by  {@link ListenerContainer}
         * @param container
         * @param bean
#if($throwsString)
         * @$!throwsString
#end
         */
        public <B> void fire(ListenerContainer<B> container,B bean)$!throwsString {
            if(null == container || null == bean){
                return;
            }
            switch(this){
            case INSERT:
                container.afterInsert(bean);
                break;
            case UPDATE:
                container.afterUpdate(bean);
                break;
            case DELETE:
                container.afterDelete(bean);
                break;
            default:
                break;
            }
        }
        public <B extends BaseBean<B>> void fire(TableManager<B > manager,B bean)$!throwsString {
            if(null == manager || null == bean){
                return;
            }
            manager.fire(this, bean);
        }
    }
    /** container for manager multiple listener */
    public static class ListenerContainer <B> implements TableListener<B> {
        private final LinkedHashSet<TableListener<B>> listeners = new LinkedHashSet<TableListener<B>>();
        public ListenerContainer() {
        }
    
        @Override
        public void beforeInsert(B bean)$!throwsString{
            for(TableListener<B> listener:listeners){
                listener.beforeInsert(bean);
            }
        }
    
        @Override
        public void afterInsert(B bean)$!throwsString{
            for(TableListener<B> listener:listeners){
                listener.afterInsert(bean);
            }
        }
    
        @Override
        public void beforeUpdate(B bean)$!throwsString{
            for(TableListener<B> listener:listeners){
                listener.beforeUpdate(bean);
            }
        }
    
        @Override
        public void afterUpdate(B bean)$!throwsString{
            for(TableListener<B> listener:listeners){
                listener.afterUpdate(bean);
            }
        }
    
        @Override
        public void beforeDelete(B bean)$!throwsString{
            for(TableListener<B> listener:listeners){
                listener.beforeDelete(bean);
            }
        }
    
        @Override
        public void afterDelete(B bean)$!throwsString{
            for(TableListener<B> listener:listeners){
                listener.afterDelete(bean);
            }
        }
    
        public boolean isEmpty() {
            return listeners.isEmpty();
        }
    
        public boolean contains(TableListener<B> o) {
            return listeners.contains(o);
        }
    
        public synchronized boolean add(TableListener<B> e) {
            if(null == e){
                throw new NullPointerException();
            }
            return listeners.add(e);
        }
    
        public synchronized boolean remove(TableListener<B> o) {
            return null == o? false : listeners.remove(o);
        }
    
        public synchronized void clear() {
            listeners.clear();
        }
    }
}

