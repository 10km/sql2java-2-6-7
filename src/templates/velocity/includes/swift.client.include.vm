#parse( "header.include.vm" )
#parse( "schema.include.vm" )
#if($isAsync)
#set ($asyncSuffix = 'Async')
#set ($asyncComment = '(asynchronous implementation)')
#else
#set ($asyncSuffix = $null)
#set ($asyncComment = $null)
#end
#if(!$codewriter.existsDependencyPackage() || !$codewriter.existsDependencySrc())
$codewriter.setSaveCurrentFile(false);
#stop
#end
#set ($swiftParser = $codewriter.loadExtensionClass("gu.rpc.thrift.SwiftServiceParser").newInstance())
#set ($typeUtils = $codewriter.loadExtensionClass("gu.rpc.thrift.TypeUtils").newInstance())
#set ($javadocReader = $codewriter.loadExtensionClass("gu.doc.JavadocReader").newInstance())
#set ($serviceSrcDir = $codewriter.getProperty("swift.service.source"))
#set ($nothing = $typeUtils.setPackagePrefix("net.gdface.facelog.db"))
## $bean$用于替换beanClass
#set ($nothing = $typeUtils.setConvertVar('converter$bean$'))
#set ($nothing = $typeUtils.setToBytesMethodPrefix("GenericUtils.toBytes"))
#set ($nothing = $typeUtils.setToLongMethodPrefix("GenericUtils.toLong"))
#set ($nothing = $typeUtils.setToDateMethodPrefix("GenericUtils.toDate"))
#set ($classpath = $codewriter.getPropertyExploded("swift.service.classpath"))
#set ($metadata = $swiftParser.parse('net.gdface.facelog.FaceLogDefinition',$classpath))
#set ($serviceSourceFile = $codewriter.getSourceFile($serviceSrcDir,$swiftParser.serviceClass))
#set ($serviceComment    = $javadocReader.read($serviceSourceFile))
## disable to show @throws tag
#set ( $thriftSrc = $codewriter.getProperty("dependency.src"))
#set ( $thriftPackage = $codewriter.getProperty("dependency.package"))
#set ( $serviceName = ${metadata.name} )
## 删除原注释中的 @throws 标记
#set ($nothing = $serviceComment.addExcludeTag("@throws"))
## 修改注释
#set ($nothing = $serviceComment.additionalText("remote implementation of the service $serviceName$!asyncComment<br>
all method comments be copied from {@code ${swiftParser.serviceClass.name}.java}<br>
<b>NOTE:</b>methods with 'Generic' suffix support generic type argument for {@code byte[]}.<br>
","APPEND","CLASS"))
#set ( $javaClassName = "${serviceName}Client$!asyncSuffix" )
$codewriter.setCurrentJavaFilename("${gpkg}", "${javaClassName}.java")
package ${gpkg};
#macro( convertVar $c)converter$c#end
#if($isAsync)
import com.google.common.util.concurrent.Futures;
import com.google.common.util.concurrent.ListenableFuture;
#end
import static com.google.common.base.Preconditions.checkNotNull;
import java.nio.ByteBuffer;
import java.util.*;
#macro( convertVar $c)converter$c#end
#macro( eachDepencyTable $do $separator)
#set ( $m_count = 0 )
#foreach($table in $tables)
#set ( $leftClass  = "${table.asBeanClassNSP()}" )
#if($codewriter.existsInDependencyPackage($leftClass))
#set ( $m_count = $m_count + 1 )
#set ( $rightClass = "${codewriter.getDependencyPackage()}.${leftClass}" )#if( $m_count > 1 )$!separator#end#evaluate($do)#end
#end
#end
#define($interfaceClass)${thriftPackage}.${serviceName}#if($isAsync).$asyncSuffix#end#end
$!{serviceComment.getClassComment()}
class $javaClassName implements Constant{
## 从properties 文件中读取converter的初始化代码
#set ( $converterInit = $codewriter.getProperty('swift.service.converter.init'))
    #eachDepencyTable("
    /** bean converter between {@link $leftClass} and corresponding thrift bean */
    private IBeanConverter<$leftClass,$rightClass> #convertVar(${leftClass}) $!converterInit;" $null)
## 如果properties 文件中没有指定初始化代码,就生成getter/setter方法
#if(!$converterInit)
#eachDepencyTable('
    /** 
     * @return converter of $leftClass 
     */
    public IBeanConverter<$leftClass,$rightClass> get${leftClass}Converter(){
        return #convertVar(${leftClass});
    }
    /** 
     * setup converter of $leftClass 
     * @param #convertVar(${leftClass}) must not be null. 
     */
    public void set${leftClass}Converter(IBeanConverter<$leftClass,$rightClass> #convertVar(${leftClass})){
        if(null == #convertVar(${leftClass}))
            throw new NullPointerException();
        this.#convertVar(${leftClass}) = #convertVar(${leftClass});
    }' $null)
#end##(!$converterInit)


    private final $interfaceClass service;
    /**
     * constructor 
     * @param service a instance of ${interfaceClass} created by Swift, must not be null
     */
    $javaClassName(${interfaceClass} service){
        checkNotNull(service,"service is null");
        this.service = service;
    }
## 
## 生成方法参数列表
#macro(eachparam $method $params)
#set ($thriftSignture = $swiftParser.signtureOfMethod($method))
$typeUtils.formateParam($method.method,$thriftSignture,$params)#end##macro(signture)
#########################
#macro(defineMethod $isGeneric)
#set ($thriftReturnType = $method.returnType.javaType)
#set ($returnType = $typeUtils.returnTypeOfMethod($method.method,$thriftReturnType))
#if(!$typeUtils.isVoid($returnType) || $isAsync)
#set ( $thriftReturn = "return ")
#else
#set ( $thriftReturn = $null)
#end
#define($returnTypeStr)
#set ($tmp = $typeUtils.asJavaType($returnType,$isAsync))
#if($isAsync)ListenableFuture<$tmp>#else$tmp#end#end
#if($isGeneric)
    /** 
     * Generic version of {@link ${esc.hash}${method.method.name}(#eachparam($method {'withType':true,'rawTypeOnly':true}))}<br>
     * {@code Object} type instead of all argument with {@code byte[]} type,which can read binary data,
     * such as {@code InputStream,URL,URI,File,ByteBuffer},supported type depend on {@link GenericUtils#toBytes(Object)} <br>
     * @see {@link GenericUtils#toBytes(Object)}
     */
    // $velocityCount GENERIC
#else
$!{serviceComment.getMethodComment($method.method)}
    // $velocityCount SERIVCE PORT : $method.name
#end    
    public $returnTypeStr ${method.method.name}#if($isGeneric)Generic#end(#eachparam($method {'isGeneric':$isGeneric,'withType':true,'withName':true, 'indent':'
            '})){
#define( $callThrift )service.${method.name}(#eachparam($method {'isGeneric':$isGeneric,'toRight':true,'withName':true, 'indent':'
                    '}))#end
#if($isAsync && $typeUtils.needFromRight($returnType))
#set ( $fromType = $typeUtils.asJavaType($thriftReturnType,true,$thriftPackage))
#set ( $toType = $typeUtils.asJavaType($returnType))
        return Futures.transform(
                $callThrift, 
                new com.google.common.base.Function<$fromType,$toType>(){
                    @Override
                    public $toType apply($fromType input) {
                        return $typeUtils.fromRight($returnType,"input");
                    }
                });
#else
        $!{thriftReturn}$typeUtils.fromRight($returnType,"$callThrift");
#end
    }
#end###macro(defineMethod)
## 遍历所有方法输出
#foreach($method in $sorter.sort($metadata.methods.values(),"name"))
#defineMethod(false)
## 生成泛型方法
#if($typeUtils.existsBinaryParam($method.method))
#defineMethod(true)
#end
#end
}
