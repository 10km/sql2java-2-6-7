import java.util.List;
import java.util.LinkedList;
import java.util.Collection;
import java.util.concurrent.Callable;
$!importThrows
#####################
#macro(defineFkConst $m_table)
#set ( $m_fkIndex = 0)
#foreach($m_foreignTable in $m_table.foreignTables)
#foreach( $m_fkName in $m_table.getFkMapNames($m_foreignTable.name) )
#set ( $m_columnsOfFk = $m_table.getForeignKeysByFkName($m_fkName) )
    /** foreign key ${m_table.name}(#join($m_columnsOfFk "$e.name" ',')) -> $m_foreignTable.name */
    public static final int ${m_table.asFKConst($m_fkName)}=$m_fkIndex;
#set ( $m_fkIndex = $m_fkIndex +1 )
#end
#end
#end
#####################
#macro(defineIkConst $m_table)
#set ( $m_ikIndex = 0)
#foreach($m_importedTable in $m_table.importedTables)
#foreach( $m_ikName in $m_importedTable.getFkMapNames($m_table.name) )
#set ( $m_columnsOfFk = $m_importedTable.getForeignKeysByFkName($m_ikName) )
    /** imported key ${m_importedTable.name}(#join($m_columnsOfFk "$e.name" ',')) -> $m_table.name */
    public static final int ${m_importedTable.asIKConst($m_ikName)}=$m_ikIndex;
#set ( $m_ikIndex = $m_ikIndex +1 )
#end
#end
#end
#####################
/**
 * Interface to handle database calls (save, load, count, etc...) for table.
 * @author guyadong
 */
public interface $javaClassName<B extends $B_parentClass> {    

    /** set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /** set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /** set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /** set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;
    
    //////////////////////////////////////
    // FOREIGN KEY INDEX DECLARE
    //////////////////////////////////////    
#foreach($t in $tables)
#defineFkConst($t)
#end
    //////////////////////////////////////
    // IMPORTED KEY INDEX DECLARE
    //////////////////////////////////////    
#foreach($t in $tables)
#defineIkConst($t)
#end

    public interface Action<B>{
        public abstract class Adapter<B> implements Action<B>{
            @Override
            public B getBean() {return null;}            
        }
        void call(B bean)$!throwsString;
        B getBean();
    }
    public abstract static class Adapter<B${B_extends}> implements $javaClassName<B>{
       /**
         * Insert the B bean into the database.
         * 
         * @param bean the B bean to be saved
         * @return the inserted bean
#if($throwsString)
         * @$!throwsString
#end    
         */
        //13
        protected abstract B insert(B bean)$!throwsString;
        /**
         * Update the B bean record in the database according to the changes.
         *
         * @param bean the B bean to be updated
         * @return the updated bean
#if($throwsString)
         * @$!throwsString
#end         
         */
        //14
        protected abstract B update(B bean)$!throwsString;
        
        public class ListAction implements Action<B> {
            final List<B> list;
            public ListAction() {
                list=new LinkedList<B>();
            }

            public List<B> getList() {
                return list;
            }

            @Override
            public void call(B bean) {
                list.add(bean);
            }

            @Override
            public B getBean() {
                return null;
            }
        }
        @Override
        public int countAll()$!throwsString{
            return this.countWhere("");
        }

        @Override
        public int countUsingTemplate(B bean)$!throwsString{
            return this.countUsingTemplate(bean, SEARCH_EXACT);
        }

        @Override
        public int deleteAll()$!throwsString{
            return this.deleteByWhere("");
        }


        @Override
        public B[] loadAll()$!throwsString{
            return this.loadUsingTemplate(null);
        }

        @Override
        public int loadAll(Action<B> action)$!throwsString{
            return this.loadUsingTemplate(null,action);
        }

        @Override
        public B[] loadAll(int startRow, int numRows)$!throwsString{
            return this.loadUsingTemplate(null, startRow, numRows);
        }

        @Override
        public int loadAll(int startRow, int numRows, Action<B> action)$!throwsString{
            return this.loadUsingTemplate(null, startRow, numRows,action);
        }

        @Override
        public List<B> loadAllAsList()$!throwsString{
            return this.loadUsingTemplateAsList(null);
        }

        @Override
        public List<B> loadAllAsList(int startRow, int numRows)$!throwsString{
            return this.loadUsingTemplateAsList(null, startRow, numRows);
        }

        @Override
        public boolean existsPrimaryKey(B bean)$!throwsString{
            return null!=loadByPrimaryKey(bean);
        }
        
        @Override
        public boolean existsPrimaryKey(Object ...keys)$!throwsString{
            return null!=loadByPrimaryKey(keys);
        }
        
        @Override
        public B[] loadByWhere(String where)$!throwsString{
            return this.loadByWhere(where, (int[])null);
        }

        @Override
        public int loadByWhere(String where, Action<B> action)$!throwsString{
            return this.loadByWhere(where, null,action);
        }

        @Override
        public B[] loadByWhere(String where, int[] fieldList)$!throwsString{
            return this.loadByWhere(where, fieldList, 1, -1);
        }

        @Override
        public int loadByWhere(String where, int[] fieldList, Action<B> action)$!throwsString{
            return this.loadByWhere(where, fieldList, 1, -1,action);
        }

        @SuppressWarnings("unchecked")
        @Override
        public B[] loadByWhere(String where, int[] fieldList, int startRow, int numRows)$!throwsString{
            return this.loadByWhereAsList(where, fieldList, startRow, numRows).toArray((B[])new Object[0]);
        }

        @Override
        public int loadByWhere(String where, int[] fieldList, int startRow, int numRows,
                Action<B> action)$!throwsString{
            return this.loadByWhereForAction(where, fieldList, startRow, numRows,action);
        }

        @Override
        public List<B> loadByWhereAsList(String where)$!throwsString{
            return this.loadByWhereAsList(where, null);
        }

        @Override
        public List<B> loadByWhereAsList(String where, int[] fieldList)$!throwsString{
            return this.loadByWhereAsList(where, fieldList, 1, -1);
        }

        @Override
        public List<B> loadByWhereAsList(String where, int[] fieldList, int startRow, int numRows)$!throwsString{
            ListAction action = new ListAction();
            loadByWhereForAction(where,fieldList,startRow,numRows,action);              
            return action.getList();
        }
    
        @Override
        public int loadByWhereForAction(String where, int[] fieldList, int startRow, int numRows,Action<B> action)$!throwsString{
            String sql=createSelectSql(fieldList, where);
            // System.out.println("loadByWhere: " + sql);
            return this.loadBySqlForAction(sql, null, fieldList, startRow, numRows, action);
        }
    
        @Override
        public B[] loadUsingTemplate(B bean)$!throwsString{
            return this.loadUsingTemplate(bean, 1, -1);
        }

        @Override
        public int loadUsingTemplate(B bean, Action<B> action)$!throwsString{
            return this.loadUsingTemplate(bean, 1, -1,action);
        }

        @Override
        public B[] loadUsingTemplate(B bean, int startRow, int numRows)$!throwsString{
            return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
        }

        @Override
        public int loadUsingTemplate(B bean, int startRow, int numRows,
                Action<B> action)$!throwsString{
            return this.loadUsingTemplate(bean, null, startRow, numRows,SEARCH_EXACT, action);
        }

        @SuppressWarnings("unchecked")
        @Override
        public B[] loadUsingTemplate(B bean, int startRow, int numRows, int searchType)$!throwsString{
            return this.loadUsingTemplateAsList(bean, startRow, numRows, searchType).toArray((B[])new Object[0]);
        }

        @Override
        public List<B> loadUsingTemplateAsList(B bean)$!throwsString{
            return this.loadUsingTemplateAsList(bean, 1, -1);
        }

        @Override
        public List<B> loadUsingTemplateAsList(B bean, int startRow, int numRows)$!throwsString{
            return this.loadUsingTemplateAsList(bean, startRow, numRows, SEARCH_EXACT);
        }

        @Override
        public List<B> loadUsingTemplateAsList(B bean, int startRow, int numRows, int searchType)$!throwsString{
            ListAction action = new ListAction();
            loadUsingTemplate(bean,null,startRow,numRows,searchType, action);
            return action.getList();
        }

        @Override
        public B save(B bean)$!throwsString{
            if(null == bean)return null;
            if (bean.isNew()) {
                return this.insert(bean);
            } else {
                return this.update(bean);
            }
        }
        
        @Override
        public B[] save(B[] beans)$!throwsString{
            if(null != beans){
                for (B bean : beans) 
                {
                    this.save(bean);
                }
            }
            return beans;
        }

        @Override
        public <C extends Collection<B>> C save(C beans)$!throwsString{
            if(null != beans){
                for (B bean : beans) 
                {
                    this.save(bean);
                }
            }
            return beans;
        }
        
        @Override
        public <C extends Collection<B>> C saveAsTransaction(final C beans)$!throwsString{
            return this.runAsTransaction(new Callable<C>(){
                @Override
                public C call() throws Exception {
                    return save(beans);
                }});
        }

        @Override
        public B[] saveAsTransaction(final B[] beans)$!throwsString{
            return this.runAsTransaction(new Callable<B[]>(){
                @Override
                public B[] call() throws Exception {
                    return save(beans);
                }});
        }

        @SuppressWarnings("unchecked")
        @Override
        public B[] loadBySql(String sql, Object[] argList, int[] fieldList)$!throwsString{
            return loadBySqlAsList(sql, argList, fieldList).toArray((B[])new Object[0]);
        }

        @Override
        public List<B> loadBySqlAsList(String sql, Object[] argList, int[] fieldList)$!throwsString{
            ListAction action = new ListAction();
            loadBySqlForAction(sql,argList,fieldList,1,-1,action);
            return action.getList();
        }
        
        @Override
        public String createSelectSql(int[] fieldList,String where){
            StringBuffer sql = new StringBuffer(128);
            if(fieldList == null) {
                sql.append("SELECT ").append(this.getFieldNamesAsString());
            } else{
                sql.append("SELECT ");
                for(int i = 0; i < fieldList.length; ++i){
                    if(i != 0) {
                        sql.append(",");
                    }
                    sql.append(this.getFullFieldNames()[fieldList[i]]);
                }            
            }
            sql.append(" FROM " + this.getTableName() + " ");
            if(null!=where)
                sql.append(where);
            return sql.toString();
        }

        @Override
        public int delete(B bean)$!throwsString{
            return deleteByPrimaryKey(bean);
        }
        
        @Override
        public <T${T_extends}> T getReferencedBean(B bean, int fkName)$!throwsString{
            throw new UnsupportedOperationException();
        }

        @Override
        public <T${T_extends}> T setReferencedBean(B bean, T beanToSet, int fkName)$!throwsString{
            throw new UnsupportedOperationException();
        }

        @Override
        public <T${T_extends}> T[] getImportedBeans(B bean, String fkName)$!throwsString{
            throw new UnsupportedOperationException();
        }

        @Override
        public <T${T_extends}> List<T> getImportedBeansAsList(B bean, String fkName)$!throwsString{
            throw new UnsupportedOperationException();
        }

        @Override
        public <T${T_extends}> T[] setImportedBeans(B bean, T[] importedBeans, String fkName)$!throwsString{
            throw new UnsupportedOperationException();
        }

        @Override
        public <T${T_extends}, C extends Collection<T>> C setImportedBeans(B bean, C importedBeans,
                String fkName)$!throwsString{
            throw new UnsupportedOperationException();
        }

        @Override
        public B loadByPrimaryKey(B bean)$!throwsString{
            throw new UnsupportedOperationException();
        }

        @Override
        public B loadByPrimaryKey(Object ...keys)$!throwsString{
            throw new UnsupportedOperationException();
        }

        @Override
        public int deleteByPrimaryKey(Object ...keys)$!throwsString{
            throw new UnsupportedOperationException();
        }

    }

    public abstract String[] getFieldNames();

    public abstract String[] getPrimarykeyNames();

    public abstract String getTableName();
    
    public abstract String getFieldNamesAsString();
    
    public abstract String[] getFullFieldNames();
    
    /**
     * return true if @{code column}(case insensitive)is primary key,otherwise return false <br>
     * return false if @{code column} is null or empty 
     * @param column
     * @return
     */
    //43
    public abstract boolean isPrimaryKey(String column);
    
    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________
    /**
     * Retrieves the number of rows of the table.
     *
     * @return the number of rows returned
#if($throwsString)
     * @$!throwsString
#end
     */
    //24
    public abstract int countAll()$!throwsString;
    
    /**
     * count the number of elements of a specific bean
     *
     * @param bean the bean to look for ant count
     * @return the number of rows returned
#if($throwsString)
     * @$!throwsString
#end
     */
    //27
    public abstract int countUsingTemplate( B bean)$!throwsString;
  
    /**
     * count the number of elements of a specific bean given the search type
     *
     * @param bean the template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ? ending link ? <br>
     *                {@value #SEARCH_EXACT}   {@link #SEARCH_EXACT} <br>
     *                {@value #SEARCH_LIKE}   {@link #SEARCH_LIKE} <br>
     *                {@value #SEARCH_STARTING_LIKE}   {@link #SEARCH_STARTING_LIKE} <br>
     *                {@value #SEARCH_ENDING_LIKE}   {@link #SEARCH_ENDING_LIKE} <br>  
     * @return the number of rows returned
#if($throwsString)
     * @$!throwsString
#end
     */
    //20
    public abstract int countUsingTemplate(B bean, int searchType)$!throwsString;

    /**
     * Retrieves the number of rows of the table with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
#if($throwsString)
     * @$!throwsString
#end
     */
    //25
    public abstract int countWhere(String where)$!throwsString;

    /**
     * Deletes all rows from table.
     * @return the number of deleted rows.
#if($throwsString)
     * @$!throwsString
#end
     */
    //10
    public abstract int deleteAll()$!throwsString;

    /**
     * Deletes rows from the table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
#if($throwsString)
     * @$!throwsString
#end
     */
    //11
    public abstract int deleteByWhere(String where)$!throwsString;

    /**
     * Deletes rows using a template.
     *
     * @param bean the template object(s) to be deleted
     * @return the number of deleted objects
#if($throwsString)
     * @$!throwsString
#end
     */
    //21
    public abstract int deleteUsingTemplate(B bean)$!throwsString;

    /**
     * Delete row according to its primary keys.
     *
     * @param keys primary keys value
     * @return the number of deleted rows
     * @see #delete(B)
#if($throwsString)
     * @$!throwsString
#end
     */   
    //2.1
    public abstract int deleteByPrimaryKey(Object ...keys)$!throwsString;

    /**
     * Delete row according to primary keys of bean.<br>
     * 
     * @param bean will be deleted ,all keys must not be null
     * @return the number of deleted rows,0 returned if bean is null
#if($throwsString)
     * @$!throwsString
#end
     */
    //2.2
    public abstract int delete(B bean)$!throwsString;


    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from table.
     *
     * @return an array of B bean
#if($throwsString)
     * @$!throwsString
#end
     */
    //5
    public abstract B[] loadAll()$!throwsString;

    /**
     * Loads each row from table and dealt with action.
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
#if($throwsString)
     * @$!throwsString
#end
     */
    //5-1    
    public abstract int loadAll(Action<B> action)$!throwsString;

    /**
     * Loads the given number of rows from table, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of B bean
#if($throwsString)
     * @$!throwsString
#end
     */
    //6
    public abstract B[] loadAll(int startRow, int numRows)$!throwsString;

    /**
     *  Loads the given number of rows from table, given the start row and dealt with action.
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
#if($throwsString)
     * @$!throwsString
#end
     */
    //6-1    
    public abstract int loadAll(int startRow, int numRows,Action<B> action)$!throwsString;

    /**
     * Loads all the rows from table.
     *
     * @return a list of B bean
#if($throwsString)
     * @$!throwsString
#end
     */
    //5-2
    public abstract List<B> loadAllAsList()$!throwsString;

    /**
     * Loads the given number of rows from table, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return a list of B bean
#if($throwsString)
     * @$!throwsString
#end
     */
    //6-2
    public abstract List<B> loadAllAsList(int startRow, int numRows)$!throwsString;

    /**
     * Loads a B bean from the table using primary key fields of {@code bean}.
     * when you don't know which is primary key of table,you can use the method.
     * @param bean the B bean with primary key fields
     * @return a unique B or {@code null} if not found or bean is null
#if($throwsString)
     * @$!throwsString
#end
     */
    //1.2
    public abstract B loadByPrimaryKey(B bean)$!throwsString;
    
    /**
     * Loads a B bean from the table using primary key fields.
     * when you don't know which is primary key of table,you can use the method.
     * @param keys primary keys value:<br> 
     * @return a unique B or {@code null} if not found
#if($throwsString)
     * @$!throwsString
#end
     */
    //1.3
    public abstract B loadByPrimaryKey(Object ...keys)$!throwsString;
    
    /**
     * Returns true if this table contains row with primary key fields.
     * @param keys primary keys value:<br>
     * @see #loadByPrimaryKey(Object...)
#if($throwsString)
     * @$!throwsString
#end
     */
    //1.5
    public abstract boolean existsPrimaryKey(Object ...keys)$!throwsString;
    
    /**
     * Returns true if this table contains row specified by primary key fields of B.<br>
     * when you don't know which is primary key of table,you can use the method.
     * @param bean the B bean with primary key fields
     * @return 
     * @see {@link #loadByPrimaryKey(B bean)}
#if($throwsString)
     * @$!throwsString
#end
     */
    //1.6
    public abstract boolean existsPrimaryKey(B bean)$!throwsString;
   
    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of B given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return 
#if($throwsString)
     * @$!throwsString
#end
     */
    //7 
    public abstract B[] loadByWhere(String where)$!throwsString;
    
    /**
     * Retrieves each row of B bean given a sql 'where' clause and dealt with action.
     * @param where the sql 'where' clause
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
#if($throwsString)
     * @$!throwsString
#end
     */
    //7-1
    public abstract int loadByWhere(String where,Action<B> action)$!throwsString;

    /**
     * Retrieves an array of B bean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return 
#if($throwsString)
     * @$!throwsString
#end
     */
    //8
    public abstract B[] loadByWhere(String where, int[] fieldList)$!throwsString;
   
    /**
     * Retrieves each row of B bean given a sql where clause, and a list of fields,
     * and dealt with action.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @param action Action object for do something(not null)
     * @return the count dealt by action
#if($throwsString)
     * @$!throwsString
#end
     */
    //8-1 
    public abstract int loadByWhere(String where, int[] fieldList,Action<B> action)$!throwsString;

    /**
     * Retrieves an array of B bean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return 
#if($throwsString)
     * @$!throwsString
#end
     */
    //9
    public abstract B[] loadByWhere(String where, int[] fieldList, int startRow, int numRows)$!throwsString;

    /**
     * Retrieves each row of B bean given a sql where clause and a list of fields, and startRow and numRows,
     * and dealt wity action.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
#if($throwsString)
     * @$!throwsString
#end
     */
    //9-1    
    public abstract int loadByWhere(String where, int[] fieldList, int startRow, int numRows,Action<B> action)$!throwsString;
    /**
     * Retrieves a list of B bean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return
#if($throwsString)
     * @$!throwsString
#end
     */
    //7
    public abstract List<B> loadByWhereAsList(String where)$!throwsString;

    /**
     * Retrieves a list of B bean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return
#if($throwsString)
     * @$!throwsString
#end
     */
    //8
    public abstract List<B> loadByWhereAsList(String where, int[] fieldList)$!throwsString;
    
    /**
     * Retrieves a list of B bean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return
#if($throwsString)
     * @$!throwsString
#end
     */
    //9-2
    public abstract List<B> loadByWhereAsList(String where, int[] fieldList, int startRow, int numRows)$!throwsString;

    /**
     * Retrieves each row of B bean given a sql where clause and a list of fields, and startRow and numRows,
     * and dealt wity action
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
#if($throwsString)
     * @$!throwsString
#end
     */
    //9-3
    public abstract int loadByWhereForAction(String where, int[] fieldList, int startRow, int numRows,Action<B> action)$!throwsString;

    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique B bean from a template one giving a c
     *
     * @param bean the B bean to look for
     * @return the bean matching the template
#if($throwsString)
     * @$!throwsString
#end
     */
    //18   
    public abstract B loadUniqueUsingTemplate(B bean)$!throwsString;

    /**
     * Loads an array of B from a template one.
     *
     * @param bean the B bean template to look for
     * @return all the B beans matching the template
#if($throwsString)
     * @$!throwsString
#end
     */
    //19
    public abstract B[] loadUsingTemplate(B bean)$!throwsString;
    
    /**
     * Loads each row from a template one and dealt with action.
     *
     * @param bean the B bean template to look for
     * @param action Action object for do something(not null)
     * @return the count dealt by action
#if($throwsString)
     * @$!throwsString
#end
     */
    //19-1
    public abstract int loadUsingTemplate(B bean,Action<B> action)$!throwsString;

    /**
     * Loads an array of B bean from a template one, given the start row and number of rows.
     *
     * @param bean the B bean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the B matching the template
#if($throwsString)
     * @$!throwsString
#end
     */
    //20
    public abstract B[] loadUsingTemplate(B bean, int startRow, int numRows)$!throwsString;
    
    /**
     * Loads each row from a template one, given the start row and number of rows and dealt with action.
     *
     * @param bean the B bean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
#if($throwsString)
     * @$!throwsString
#end
     */
    //20-1
    public abstract int loadUsingTemplate(B bean, int startRow, int numRows,Action<B> action)$!throwsString;

    /**
     * Loads each row from a template one, given the start row and number of rows and dealt with action.
     *
     * @param bean the B template to look for
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ? ending link ? <br>
     *                {@value #SEARCH_EXACT}   {@link #SEARCH_EXACT} <br>
     *                {@value #SEARCH_LIKE}   {@link #SEARCH_LIKE} <br>
     *                {@value #SEARCH_STARTING_LIKE}   {@link #SEARCH_STARTING_LIKE} <br>
     *                {@value #SEARCH_ENDING_LIKE}   {@link #SEARCH_ENDING_LIKE} <br>  
     * @param action Action object for do something(not null)
     * @return the count dealt by action
#if($throwsString)
     * @$!throwsString
#end
     */
    //20-5
    public abstract int loadUsingTemplate(B bean, int[] fieldList, int startRow, int numRows,int searchType, Action<B> action)$!throwsString;
    /**
     * Loads a list of B bean from a template one, given the start row and number of rows.
     *
     * @param bean the B bean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ? ending link ? <br>
     *                {@value #SEARCH_EXACT}   {@link #SEARCH_EXACT} <br>
     *                {@value #SEARCH_LIKE}   {@link #SEARCH_LIKE} <br>
     *                {@value #SEARCH_STARTING_LIKE}   {@link #SEARCH_STARTING_LIKE} <br>
     *                {@value #SEARCH_ENDING_LIKE}   {@link #SEARCH_ENDING_LIKE} <br>  
     * @return all the B bean matching the template
#if($throwsString)
     * @$!throwsString
#end
     */
    //20-4
    public abstract B[] loadUsingTemplate(B bean, int startRow, int numRows, int searchType)$!throwsString;

    /**
     * Loads a list of B bean from a template one.
     *
     * @param bean the B bean template to look for
     * @return all the B beans matching the template
#if($throwsString)
     * @$!throwsString
#end
     */
    //19-2
    public abstract List<B> loadUsingTemplateAsList(B bean)$!throwsString;

    /**
     * Loads a list of B bean from a template one, given the start row and number of rows.
     *
     * @param bean the B bean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the B bean matching the template
#if($throwsString)
     * @$!throwsString
#end
     */
    //20-2
    public abstract List<B> loadUsingTemplateAsList(B bean, int startRow, int numRows)$!throwsString;

    /**
     * Loads an array of B bean from a template one, given the start row and number of rows.
     *
     * @param bean the B bean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ? ending link? <br>
     *                {@value #SEARCH_EXACT}   {@link #SEARCH_EXACT} <br>
     *                {@value #SEARCH_LIKE}   {@link #SEARCH_LIKE} <br>
     *                {@value #SEARCH_STARTING_LIKE}   {@link #SEARCH_STARTING_LIKE} <br>
     *                {@value #SEARCH_ENDING_LIKE}   {@link #SEARCH_ENDING_LIKE} <br>  
     * @return all the B beans matching the template
#if($throwsString)
     * @$!throwsString
#end
     */
    //20-3
    public abstract List<B> loadUsingTemplateAsList(B bean, int startRow, int numRows, int searchType)$!throwsString;
    
    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________

    /**
     * Registers a unique {@link TableListener} listener.
     */
    //35
    public abstract void registerListener(TableListener<B> listener);

    /**
     * remove listener.
     */
    //36
    public abstract void unregisterListener(TableListener<B> listener);

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the B bean into the database.
     *
     * @param bean the B bean to be saved
     * @return the inserted or updated bean,or null if bean is null
#if($throwsString)
     * @$!throwsString
#end
     */
    //12
    public abstract B save(B bean)$!throwsString;

    /**
     * Saves an array of B bean into the database.
     *
     * @param beans the array of  B bean to be saved
     * @return alwarys beans saved
#if($throwsString)
     * @$!throwsString
#end
     */
    //15
    public abstract B[] save(B[] beans)$!throwsString;
    
    /**
     * Saves a collection of B bean into the database.
     *
     * @param beans the B bean table to be saved
     * @return alwarys beans saved
#if($throwsString)
     * @$!throwsString
#end
     */
    //15-2
    public abstract <C extends Collection<B>> C saveAsTransaction(C beans)$!throwsString;
    
    /**
     * Saves an array of B bean into the database as transaction.
     *
     * @param beans the B bean table to be saved
     * @return alwarys beans saved
     * @see #save(B[])
#if($throwsString)
     * @$!throwsString
#end
     */
    //15-3
    public abstract B[] saveAsTransaction(B[] beans)$!throwsString;

    /**
     * Saves a collection of B bean into the database as transaction.
     *
     * @param beans the B bean table to be saved
     * @return alwarys beans saved
#if($throwsString)
     * @$!throwsString
#end
     */
    //15-4
    public abstract <C extends Collection<B>> C save(C beans)$!throwsString;

    /**
     * Load all the elements using a SQL statement specifying a list of fields to be retrieved.
     * @param sql the SQL statement for retrieving
     * @param argList the arguments to use fill given prepared statement,may be null
     * @param fieldList table of the field's associated constants
     * @return an array of B bean
#if($throwsString)
     * @$!throwsString
#end
     */
    public abstract B[] loadBySql(String sql, Object[] argList, int[] fieldList)$!throwsString;
    
    /**
     * Load all elements using a SQL statement specifying a list of fields to be retrieved.
     * @param sql the SQL statement for retrieving
     * @param argList the arguments to use fill given prepared statement,may be null
     * @param fieldList table of the field's associated constants
     * @return an list of B bean
#if($throwsString)
     * @$!throwsString
#end
     */
    public abstract List<B> loadBySqlAsList(String sql, Object[] argList, int[] fieldList)$!throwsString;
    
    /**
     * Load each the elements using a SQL statement specifying a list of fields to be retrieved and dealt by action.
     * @param sql the SQL statement for retrieving
     * @param argList the arguments to use fill given prepared statement,may be null
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
#if($throwsString)
     * @$!throwsString
#end
     */
    public int loadBySqlForAction(String sql, Object[] argList, int[] fieldList,int startRow, int numRows,Action<B> action)$!throwsString;
    /**
     * Run {@code Callable<T>} as a transaction.<br>
     * all exceptions but {@code SQLException} threw by {@code Callable<T>} is warpped into {@code RuntimeException}<br>
     * throw {@code NullPointerException} if {@code fun} be {@code null}<br>
     * @param <T>  type of return result
     * @param fun
     * @return
#if($throwsString)
     * @$!throwsString
#end
     */
    public abstract<T> T runAsTransaction(Callable<T> fun)$!throwsString;
    /**
     * Run {@code Runnable} as a transaction.no return
     * @param fun
     * @
     * @see #runAsTransaction(Runnable)
#if($throwsString)
     * @$!throwsString
#end
     */
    public abstract void runAsTransaction(final Runnable fun)$!throwsString;
    
    /**
     * Retrieves the T object referenced by fkName.<br>
     * @param bean the B object to use
     * @param fkName foreign key name. for detail see implementation class
     * @return the associated <T> bean or {@code null} if {@code bean}  is {@code null}
#if($throwsString)
     * @$!throwsString
#end
     */
    public abstract <T${T_extends}> T getReferencedBean(B bean,int fkName)$!throwsString;
    
    /**
     * Associates the B object to the T object by fkName field.<br>
     * @param bean the B object to use
     * @param beanToSet the T object to associate to the B bean
     * @param fkName
     * @return always beanToSet saved
#if($throwsString)
     * @$!throwsString
#end
     */
    public abstract <T${T_extends}> T setReferencedBean(B bean,T beanToSet,int fkName)$!throwsString;
    
    /**
     * Retrieves imported T objects by fkName.<br>
     * @param bean the B object to use
     * @param fkName foreign key name. for detail see implementation class
     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
#if($throwsString)
     * @$!throwsString
#end
     */
    public <T${T_extends}> T[] getImportedBeans(B bean,String fkName)$!throwsString;
    
    /**
     * Retrieves imported T objects by fkName.<br>
     * @param bean the B object to use
     * @param fkName foreign key name. for detail see implementation class
     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
#if($throwsString)
     * @$!throwsString
#end
     */
    public <T${T_extends}> List<T> getImportedBeansAsList(B bean,String fkName)$!throwsString;
    
    /**
     * Set the importedBeans associates to the bean by fkName<br>
     * 
     * @param bean the bean object to use
     * @param importedBeans the T object to associate to bean
     * @param fkName foreign key name. for detail see implementation class
     * @return importedBeans always
#if($throwsString)
     * @$!throwsString
#end
     */
    public <T${T_extends}> T[] setImportedBeans(B bean,T[] importedBeans,String fkName)$!throwsString;
    
    /**
     * Set the importedBeans associates to the bean by fkName<br>
     * 
     * @param bean the bean object to use
     * @param importedBeans the T object to associate to bean
     * @param fkName foreign key name. for detail see implementation class
     * @return importedBeans always
#if($throwsString)
     * @$!throwsString
#end
     */
    public <T${T_extends},C extends Collection<T>> C setImportedBeans(B bean,C importedBeans,String fkName)$!throwsString;
    
    public String createSelectSql(int[] fieldList,String where);
}
