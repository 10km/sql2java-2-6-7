##$Id: bean.java.vm,v 1.8 2008/05/05 11:54:35 kameleono Exp $
/**
 * $beanClass is a mapping of $table.getName() Table.
#if ( $table.getRemarks().length() > 0 )
 * <br>Meta Data Information (in progress):
 * <ul>
 *    <li>comments: $table.getRemarks() </li>
 * </ul>
#end
 * @author guyadong
*/
#swiftThriftStruct()
#set( $fieldIndex = 1 )
public class ${beanClass}
    implements Serializable,BaseBean<$beanClass>,Comparable<$beanClass>,Constant
#if ($implementsClasses)
    #foreach( $implements in $implementsClasses )$implements #end
#end
{
    private static final long serialVersionUID = ${table.getSerialVersionUID($beanClassFullName)}L;
    
#foreach ( $column in $columns )
#if ( $column.getRemarks().length() > 0 )
    /** comments:$column.getRemarks() */
#end
    private $column.getJavaType() $column.getVarName()#if ( $column.getDefaultValue().length() > 0) =#if ($column.isString())"$column.getDefaultValue()"#else$column.getDefaultValue()#end#end;

#end
    /** columns modified flag */
    private $table.stateVarType() modified = $table.stateVarInitializedStatement();
    /** columns initialized flag */
    private $table.stateVarType() initialized = $table.stateVarInitializedStatement();
    private boolean _isNew = true;
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
#swiftThriftField( $fieldIndex )
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }
    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
#swiftThriftField( null )
    public void setNew(boolean isNew)
    {
        this._isNew = isNew;
    }
    /**
     * @return the modified status of columns
     */
#set( $fieldIndex = $fieldIndex + 1 )
#swiftThriftField( $fieldIndex )
    public $table.stateVarType() getModified(){
        return modified;
    }

    /**
     * @param modified the modified status bit to be assigned to {@link #modified}
     */
#swiftThriftField( null )
    public void setModified($table.stateVarType() modified){
#if( $table.countColumns() > 64 )	
        if( null == modified || this.modified.length != modified.length )return;
        for(int i =0 ; i < this.modified.length ; ++i)this.modified[i] = modified[i];
#else
        this.modified = modified;
#end
    }
    /**
     * @return the initialized status of columns
     */
#set( $fieldIndex = $fieldIndex + 1 )
#swiftThriftField( $fieldIndex )
    public $table.stateVarType() getInitialized(){
        return initialized;
    }

    /**
     * @param initialized the initialized status bit to be assigned to {@link #initialized}
     */
#swiftThriftField( null )
    public void setInitialized($table.stateVarType() initialized){
#if( $table.countColumns() > 64 )	
        if( null == initialized || this.modified.length != initialized.length )return;
        for(int i =0 ; i < this.initialized.length ; ++i)this.initialized[i] = initialized[i];
#else
        this.initialized = initialized;
#end
    }
    public ${beanClass}(){
        super();
    }
#foreach ( $column in $columns )
#set( $fieldIndex = $fieldIndex + 1 )
    /**
     * Getter method for {@link #$column.getVarName()}.<br>
#if ( $column.isPrimaryKey() )
     * PRIMARY KEY.<br>
#end
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: $column.getFullName()</li>
#foreach ( $fKey in $column.getForeignKeys() )
     * <li> foreign key: ${fKey.getTableName()}.${fKey.getName()}</li>
#end
#foreach ( $iKey in $column.getImportedKeys() )
     * <li> imported key: ${iKey.getTableName()}.${iKey.getName()}</li>
#end
#if ( $column.getRemarks().length() > 0 )
     * <li>comments: $column.getRemarks()</li>
#end
#if ( $column.getDefaultValue().length() > 0 )
     * <li>default value: $column.getDefaultValue()</li>
#end
     * <li>column size: $column.getSize()</li>
     * <li>jdbc type returned by the driver: $column.getJavaTypeAsTypeName()</li>
     * </ul>
     *
     * @return the value of $column.getVarName()
     */
#swiftThriftField( $fieldIndex )
    public $column.getJavaType() ${column.getGetMethod()}(){
        return $column.getVarName();
    }
    /**
     * Setter method for {@link #$column.getVarName()}.<br>
#if ( $column.hasCompareTo() )
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
#else
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
#end
     *
     * @param newVal the new value to be assigned to $column.getVarName()
     */
#swiftThriftField( null )
    public void $column.getSetMethod()($column.getJavaType() newVal)
    {
#if ($column.hasCompareTo())
        if ((newVal != null && $column.getVarName() != null && (newVal.compareTo($column.getVarName()) == 0)) ||
            (newVal == null && $column.getVarName() == null && ${column.getInitializedMethod()}())) {
            return;
        }
#elseif ( $column.useEqualsInSetter() )
        if ((newVal != null && $column.getVarName() != null && newVal.equals($column.getVarName())) ||
            (newVal == null && $column.getVarName() == null && ${column.getInitializedMethod()}())) {
            return;
        }
#end
#if ( $column.hasPrimaryType() && $codewriter.getProperty('bean.compatible_axis2') )
#if($column.getJavaType()=='Integer')
        //compatible for axis2
        $column.getVarName() = null==newVal||newVal==Integer.MIN_VALUE?null:newVal;
#elseif($column.getJavaType()=='Long')
        //compatible for axis2
        $column.getVarName() = null==newVal||newVal==Long.MIN_VALUE?null:newVal;
#elseif($column.getJavaType()=='Byte')
        //compatible for axis2
        $column.getVarName() = null==newVal||newVal==Byte.MIN_VALUE?null:newVal;
#elseif($column.getJavaType()=='Double')
        //compatible for axis2
        $column.getVarName() = null==newVal||newVal==Double.MIN_VALUE?null:newVal;
#elseif($column.getJavaType()=='Float')
        //compatible for axis2
        $column.getVarName() = null==newVal||newVal==Float.MIN_VALUE?null:newVal;
#elseif($column.getJavaType()=='Character')
        //compatible for axis2
        $column.getVarName() = null==newVal||newVal==Character.MIN_VALUE?null:newVal;
#elseif($column.getJavaType()=='Short')
        //compatible for axis2
        $column.getVarName() = null==newVal||newVal==Short.MIN_VALUE?null:newVal;
#elseif($column.getJavaType()=='Boolean')
        //compatible for axis2
        $column.getVarName() = null==newVal||newVal==Boolean.FALSE?null:newVal;       
#else
        $column.getVarName() = newVal;
#end
#else
        $column.getVarName() = newVal;
#end###if ( $column.hasPrimaryType() && $codewriter.getProperty('bean.compatible_axis2') )

        $column.bitORAssignExpression("modified");
        $column.bitORAssignExpression("initialized");
    }

#if ( $column.hasPrimaryType() )
    /**
     * Setter method for {@link #$column.getVarName()}.<br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to $column.getVarName()
     */
    public void $column.getSetMethod()($column.getJavaPrimaryType() newVal)
    {
        $column.getSetMethod()(new $column.getJavaType()(newVal));
    }
#end
    /**
     * Determines if the $column.getVarName() has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean ${column.getModifiedMethod()}()
    {
        return 0L !=  ${column.bitAndExpression("modified")};
    }

    /**
     * Determines if the $column.getVarName() has been initialized.<br>
     *
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean ${column.getInitializedMethod()}()
    {
        return 0L !=  ${column.bitAndExpression("initialized")};
    }
#end
##########################################
#foreach ($foreignTable in $foreignTables)
#if ( $velocityCount == 1 )
    //////////////////////////////////////
    // referenced bean for FOREIGN KEYS
    //////////////////////////////////////
#end
#set ( $foreignClass = "$foreignTable.asBeanClass($generateNative)" )
#set ( $foreignClassManager = "$foreignTable.asManagerClass()" )
#foreach( $fkName in $table.getFkMapNames($foreignTable.name) )
#set ( $columnsOfFk = $table.getForeignKeysByFkName($fkName) )
#set ( $referencedBean = $table.getReferencedVarName($fkName) )
#set( $fieldIndex = $fieldIndex + 1 )
    /** 
     * The referenced {@link $foreignClass} by #join($columnsOfFk "{@link #$e.getVarName()}" ",") . <br>
     * FOREIGN KEY (#join($columnsOfFk "$e.name" ",")) REFERENCES ${foreignTable.name}(#join($columnsOfFk "$e.getForeignColumn().name" ","))
     */
    private $foreignClass $referencedBean;
    /** Getter method for {@link #${referencedBean}}. */
#swiftThriftField( $fieldIndex )
    public $foreignClass $table.getReferencedVarGetMethod($fkName)() {
        return this.$referencedBean;
    }
    /** Setter method for {@link #${referencedBean}}. */
#swiftThriftField( null )
    public void $table.getReferencedVarSetMethod($fkName)($foreignClass reference) {
        this.$referencedBean = reference;
    }
#end        
#end

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
#if( $table.countColumns() > 64 )
        for( long m: modified )if( 0 != m )return true;
        return false;
#else
        return 0 != modified;
#end
    }
  
    /**
     * Determines if the {@code column} has been modified.
     * @param columnID
     * @return true if the field has been modified, false if the field has not been modified
     * @author guyadong
     */
    public boolean isModified(int columnID){
        switch ( columnID ){
#foreach ( $column in $columns )
        case $column.getIDConstName():
            return ${column.getModifiedMethod()}();
#end
        }
        return false;
    }
    /**
     * Determines if the {@code column} has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     * @param columnID
     * @return true if the field has been initialized, false otherwise
     * @author guyadong
     */
    public boolean isInitialized(int columnID){
        switch(columnID) {
#foreach ( $column in $columns )
        case $column.getIDConstName():
            return ${column.getInitializedMethod()}();
#end
        }
        return false;
    }
    
    /**
     * Determines if the {@code column} has been modified.
     * @param column
     * @return true if the field has been modified, false if the field has not been modified
     * @author guyadong
     */
    public boolean isModified(String column){        
        return isModified(columnIDOf(column));
    }

    /**
     * Determines if the {@code column} has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     * @param column
     * @return true if the field has been initialized, false otherwise
     * @author guyadong
     */
    public boolean isInitialized(String column){
        return isInitialized(columnIDOf(column));
    }
    
    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
#if( $table.countColumns() > 64 )
        for( int i=0;i<modified.length;++i)modified[i]= 0L;
#else
        modified = 0L;
#end
    }
    /**
     * Resets the object initialization status to 'not initialized'.
     */
    private void resetInitialized()
    {
#if( $table.countColumns() > 64 )
        for( int i=0;i<initialized.length;++i)initialized[i]= 0L;
#else
        initialized = 0L;
#end
    }
    @Override
    public boolean equals(Object object)
    {
        if (!(object instanceof ${beanClass})) {
            return false;
        }

        $beanClass obj = ($beanClass) object;
        return new EqualsBuilder()
#foreach ( $column in $columns )
            .append(${column.getGetMethod()}(), obj.${column.getGetMethod()}())
#end
            .isEquals();
    }

    @Override
    public int hashCode()
    {
        return new HashCodeBuilder(-82280557, -700257973)
#foreach ( $column in $columns )
            .append(${column.getGetMethod()}())
#end
            .toHashCode();
    }

    @Override
    public String toString() {
        return new StringBuilder(this.getClass().getName()).append("@").append(Integer.toHexString(this.hashCode())).append("[\n")
#foreach ( $column in $columns )
#if($column.getJavaType().equals('byte[]'))
            .append("\t$column.getName()=").append(${column.getGetMethod()}().length).append(" bytes\n")
#else
            .append("\t$column.getName()=").append(${column.getGetMethod()}()).append("\n")
#end
#end
            .append("]\n")
            .toString();
    }

    @Override
    public int compareTo($beanClass object){
#if($table.hasPrimaryKey())
#set ($compareColumns = $primaryKeys)
#else
#set ($compareColumns = $columns)
#end
        return new CompareToBuilder()
#foreach ( $column in $compareColumns )
            .append(${column.getGetMethod()}(), object.${column.getGetMethod()}())
#end
            .toComparison();
    }

    /**
    * set all field to null
    *
    * @author guyadong
    */
    public ${beanClass} clean()
    {
#foreach ( $column in $columns )
        $column.getSetMethod()(null);
#end
        isNew(true);
        resetInitialized();
        resetIsModified();
        return this;
    }
    
    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     * @param fieldList the column id list to copy into the current bean
     */
    public void copy(${beanClass} bean, int... fieldList)
    {
        if (null == fieldList || 0 == fieldList.length)
            for (int i = 0; i < $table.countColumns(); ++i) {
                if( bean.isInitialized(i))
                    setValue(i, bean.getValue(i));
            }
        else
            for (int i = 0; i < fieldList.length; ++i) {
                if( bean.isInitialized(fieldList[i]))
                    setValue(fieldList[i], bean.getValue(fieldList[i]));
            }
    }
        
    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     * @param fieldList the column name list to copy into the current bean
     */
    public void copy(${beanClass} bean, String... fieldList)
    {
        if (null == fieldList || 0 == fieldList.length)
            copy(bean,(int[])null);
        else{
            int field;
            for (int i = 0; i < fieldList.length; i++) {
                field = columnIDOf(fieldList[i].trim());
                if(bean.isInitialized(field))
                    setValue(field, bean.getValue(field));
            }
        }
    }

    /**
     * return a object representation of the given column id
     */
    @SuppressWarnings("unchecked")
    public <T>T getValue(int columnID)
    {
        switch( columnID ){
#foreach ( $column in $columns )
        case $column.getIDConstName(): 
            return (T)${column.getGetMethod()}();        
#end
        }
        return null;
    }

    /**
     * set a value representation of the given column id
     */
    public <T> void setValue(int columnID,T value)
    {
        switch( columnID ) {
#foreach ( $column in $columns )
        case $column.getIDConstName():        
            ${column.getSetMethod()}(($column.getJavaType())value);
#end
        }
    }
    
    /**
     * return a object representation of the given field
     */
    public <T>T getValue(String column)
    {
        return getValue(columnIDOf(column));
    }

    /**
     * set a value representation of the given field
     */
    public <T>void setValue(String column,T value)
    {
        setValue(columnIDOf(column),value);
    }

    public static int columnIDOf(String column){
        int index = ${table.name.toUpperCase()}_FIELDS_LIST.indexOf(column);
        if( 0 > index ) 
            index = ${table.name.toUpperCase()}_JAVA_FIELDS_LIST.indexOf(column);
        return index;    
    }
}
