/**
 * constant declare
 * @author guyadong
 */
public interface $javaClassName {    
    public static final int LONG_BIT_NUM = 64;
    public static final String SQL_LIKE_WILDCARD = "%";
    /** set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /** set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /** set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /** set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;
    /** meta data of table's column */
    public static class ColumnMeta{            
        final String table;
        final String field;
        final String fullName;
        final int index;
        final int ordinal;
        final long mask;
        final String getter;
        final String setter;
        private ColumnMeta(String table,String field,int ordinal,String getter,String setter){
            this.table = table;
            this.field = field;
            this.fullName = this.table + field;
            this.ordinal = ordinal;
            this.index = ordinal -1;
            this.mask = (1L << index);
            this.getter = setter;
            this.setter = setter;
        }
    }
#foreach($table in $tables)
    /** Constant definition for $table.name */
    public static interface $table.asConstClassNSP(){
        public static final String TABLENAME = "$table.name";
        /** column count for $table.name table */
        public static final int COLUMN_COUNT = $table.countColumns();
        /** primary keys count for $table.name table */
        public static final int PRIMARY_KEY_COUNT = $table.countPrimaryKeys();
        /** foreign keys count for $table.name table */
        public static final int FOREIGN_KEY_COUNT = $table.countForeignKeyNames();
        /** imported keys count for $table.name table */
        public static final int IMPORTED_KEY_COUNT = $table.countImportedKeyNames();
        /** Contains all the primary key fields of the $table.name table. */
        public static final String[] PRIMARYKEY_NAMES = {#join($table.primaryKeys '"$e.name"' ',')};
        /** Contains all the full fields of the $table.name table.*/
        public static final String FULL_FIELDS ="#join($table.columns '$e.fullName' '"
                            + ",')";
        /** Field that contains the comma separated fields of the $table.name table. */
        public static final String FIELDS = "#join($table.columns '$e.name' '"
                            + ",')";
        /** immutable list of {@link ${esc.hash}FIELDS} */
        public static final java.util.List<String> FIELDS_LIST = java.util.Collections.unmodifiableList(java.util.Arrays.asList(FIELDS.split(",")));
        /** Field that contains the comma separated java fields of the $table.name table. */
        public static final String JAVA_FIELDS = "#join($table.columns '$e.varName' '"
                            + ",')";
        /** immutable list of {@link ${esc.hash}JAVA_FIELDS} */
        public static final java.util.List<String> JAVA_FIELDS_LIST = java.util.Collections.unmodifiableList(java.util.Arrays.asList(JAVA_FIELDS.split(",")));
        public static enum Fk{
#foreach($fkObj in $table.getForeignKeysAsList())
#if($velocityCount > 1),
#end
            /** foreign key ${table.name}(#join($fkObj.columns "$e.name" ',')) -> $fkObj.foreignTable.name */${fkObj.asFkVar()}#end

        }
        public static enum Ik{
#foreach($fkObj in $table.getImportedFoeignKeysAsList())
#if($velocityCount > 1),
#end
            /** imported key ${fkObj.table.name}(#join($fkObj.columns "$e.name" ',')) -> $fkObj.foreignTable.name */${fkObj.asIkVar()}#end

        }
        public static enum Index{
#foreach($index in $table.getIndices())
#if($velocityCount > 1),
#end
            /** $index.table.name index (#join($index.getIndexColumnsList() "$e.name" ',')) */${index.asIndexVar()}#end

        }
        /** Column Constant definition for $table.name */
        public static enum Column{            
            #join($table.columns '/** constant for $e.fullName  */
            ${e.varName}("$table.name","$e.name",$e.ordinalPosition,"$e.getGetMethod()","$e.getSetMethod()")' ',
            ');
            final ColumnMeta meta;
            private Column(String table,String field,int ordinal,String getter,String setter){
                meta = new ColumnMeta(table,field,ordinal,getter,setter);
            }
        }
    }
#end
}
