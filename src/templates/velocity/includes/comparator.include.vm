##included template: comparator.include.vm
#parse( "table.include.vm" )
#parse( "header.include.vm" )
#set ( $beanClass = $table.asBeanClass($isGeneral) )
#set ( $comparatorClass = $table.asComparatorClass($isGeneral) )
$codewriter.setCurrentJavaFilename("$table.getPackage(true)", "${comparatorClass}.java")
package $table.getPackage(true);

import java.util.Comparator;
#if(!$isGeneral)
import ${schemaPkg}.Constant;
#end

##import $pkg.*;

/**
 * Comparator class is used to sort the $beanClass objects.
 * @author sql2java
 */
public class $comparatorClass implements Comparator<$beanClass>,Constant
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for $comparatorClass.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new $comparatorClass(Constant.$table.getFirstColumn().getIDConstName(), bReverse));</code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
#foreach( $column in $columns )
#if ( $column.hasCompareTo() )
     *   <li>{@link Constant#$column.getIDConstName()}
#end
#end
     * </ul>
     */
    public $comparatorClass(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for ${comparatorClass}.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new $comparatorClass(Constant.$table.getFirstColumn().getIDConstName(), bReverse));</code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
#foreach( $column in $columns )
     *   <li>{@link Constant#$column.getIDConstName()})
#end
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public $comparatorClass(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    @Override
    public int compare($beanClass b1, $beanClass b2)
    {
        int iReturn = 0;
        switch(iType)
        {
## I need to add a try catch here??????
#set ( $nbColumns = 0 )
#foreach( $column in $columns )
#set ( $getMethod = $column.getGetMethod() )
#if ( $column.hasCompareTo() )
            case $column.getIDConstName():
                if (b1.$getMethod() == null && b2.$getMethod() != null) {
                    iReturn = -1;
                } else if (b1.$getMethod() == null && b2.$getMethod() == null) {
                    iReturn = 0;
                } else if (b1.$getMethod() != null && b2.$getMethod() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.$getMethod().compareTo(b2.$getMethod());
                }
                break;
#set ( $nbColumns = $nbColumns + 1 )
#end
#end
            default:
#if ( $nbColumns != 0 )
                throw new IllegalArgumentException("Type passed for the field is not supported");
#end
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
