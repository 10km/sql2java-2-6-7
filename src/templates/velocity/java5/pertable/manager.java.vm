##$Id: manager.java.vm,v 1.13 2008/05/07 17:50:12 kameleono Exp $
#parse( "table.include.vm" )
#parse( "header.include.vm" )
$codewriter.setCurrentJavaFilename("$table.getPackage()", "${managerClass}.java")
package $table.getPackage();
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.Callable;
import java.util.concurrent.atomic.AtomicInteger;

import ${pkg}.Constant;
import ${pkg}.Manager;
import ${pkg}.TableListener;
import ${pkg}.TableManager;
import ${pkg}.exception.DAOException;
import ${pkg}.exception.DataAccessException;
import ${pkg}.exception.ObjectRetrievalException;
#if ( $table.hasVersionColumn() )
import ${pkg}.exception.OptimisticLockingException;
#end
#foreach ($linkedTable in $linkedTables)
import ${linkedTable.getPackage()}.${linkedTable.asBeanClass()};
import ${linkedTable.getPackage()}.${linkedTable.asManagerClass()};
#end

/**
 * Handles database calls (save, load, count, etc...) for the $tablename table.
#if ( $table.hasRemarks() )
 * Remarks: $table.getRemarks()
#end
 * @author sql2java
 */
public class $managerClass extends TableManager.Adapter<$beanClass>
{
    /**
     * Tablename.
     */
    public static final String TABLE_NAME="$tablename";

   /**
     * Contains all the primarykey fields of the $tablename table.
     */
    public static final String[] PRIMARYKEY_NAMES =
    {
#foreach ( $column in $primaryKeys )
        #if ( $velocityCount > 1 ),#end"$column.getName()"
#end
    };

    /**
    * @return tableName
    */
    public String getTableName() {
        return TABLE_NAME;
    }

    public String getFields() {
        return ${tablename.toUpperCase()}_FIELDS;
    }
    
    public String getFullFields() {
        return ${tablename.toUpperCase()}_FULL_FIELDS;
    }
    
    /**
    * @return primarykeyNames
    */
    public String[] getPrimarykeyNames() {
        return PRIMARYKEY_NAMES;
    }

    private static $managerClass singleton = new $managerClass();

    /**
     * Get the $managerClass singleton.
     *
     * @return $managerClass
     */
    public static $managerClass getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new $beanClass instance.
     *
     * @return the new $beanClass
     */
    public $beanClass createBean()
    {
        return new $beanClass();
    }

#if ( $table.countPrimaryKeys() > 0 )
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

#set ( $keys = "" )
#set ( $sql = "" )
##set ( $noWhereSelect = "SELECT \" + ${tablename.toUpperCase()}_FIELDS + \" FROM \" + $tablename" )
##set ( $baseSelect = "$noWhereSelect WHERE " )
    /**
     * Loads a {@link $beanClass} from the $tablename using primary key fields.
     *
#foreach ( $pk in $primaryKeys )
     * @param $pk.getVarName() $pk.getJavaType() - PK# $velocityCount
## part 1
#if ( $velocityCount > 1 )#set( $keys = "$keys, " )#set ( $sql = "$sql and " )#end
#set ( $keys = "$keys${pk.getJavaType()} $pk.getVarName()" )
## part 2
#set ( $sql = "$sql$pk.getName()=?" )
#end     
     * @return a unique $beanClass or {@code null} if not found or have null argument
     * @throws DAOException
     */
    //1
    @SuppressWarnings("unused")
    public $beanClass loadByPrimaryKey($keys) throws DAOException
    {
        if(#join($primaryKeys "null == $e.getVarName()" ' || ')){
            return null;
        }
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("SELECT " + ${tablename.toUpperCase()}_FIELDS + " FROM $tablename WHERE $sql");
            // System.out.println("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
#foreach( $pk in $primaryKeys )
            $pk.getPreparedStatementMethod($pk.getVarName(), $velocityCount)
#end
            List<$beanClass> pReturn = this.loadByPreparedStatementAsList(ps);
            if (0 == pReturn.size()) {
                return null;
            } else {
                return pReturn.get(0);
            }
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //1.2
    @Override
    public $beanClass loadByPrimaryKey(${beanClass} bean) throws DAOException
    {
#set ( $methods = "" ) 
#foreach ( $pk in $primaryKeys )
## part 1
#if ( $velocityCount > 1 )#set( $methods = "$methods, " )#end
## part 2
#set ( $methods = "$methods bean.${pk.getGetMethod()}()" )
#end     
        return bean==null?null:loadByPrimaryKey($methods);
    }
    
    /**
     * Loads a {@link $beanClass} from the $tablename using primary key fields.
     * @param keys primary keys value:<br> 
     * @return a unique {@link $beanClass} or {@code null} if not found
     * @see {@link #loadByPrimaryKey($keys)}
     */
    //1.3
    @Override
    public $beanClass loadByPrimaryKey(Object ...keys) throws DAOException{
        if(keys.length != $table.countPrimaryKeys() )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
#foreach ( $pk in $primaryKeys )
#set( $kidx = $velocityCount - 1 )
        if(! (keys[$kidx] instanceof $pk.getJavaType()))
            throw new IllegalArgumentException("invalid type for the No.$velocityCount argument,expected type:$pk.getJavaType()");
#end        
        return loadByPrimaryKey(#foreach($pk in $primaryKeys)#if ( $velocityCount > 1 ),#end#set( $kidx = $velocityCount - 1 )($pk.getJavaType())keys[$kidx]#end);
    }
    
#set( $keys = "" )    
    /**
     * Returns true if this $tablename contains row with primary key fields.
#foreach ( $pk in $primaryKeys )
     * @param $pk.getVarName() $pk.getJavaType() - PK# $velocityCount
## part 1
#if ( $velocityCount > 1 )#set( $keys = "$keys, " )#set ( $sql = "$sql and " )#end
#set ( $keys = "$keys${pk.getJavaType()} $pk.getVarName()" )
## part 2
#set ( $sql = "$sql$pk.getName()=?" )
#end     
     * @throws DAOException
     * @see #loadByPrimaryKey($keys)
     */
    //1.3
    public boolean existsPrimaryKey($keys) throws DAOException
    {
        return null!=loadByPrimaryKey(#join($primaryKeys "$e.getVarName()" ',') );
    }
    
#set ( $sql = "" )
    /**
     * Delete row according to its primary keys.<br>
     * all keys must not be null
     * 
#foreach ( $pk in $primaryKeys )
     * @param $pk.getVarName() $pk.getJavaType() - PK# $velocityCount
## part 1     
#if ( $velocityCount > 1 )#set ( $sql = "$sql and " )#end
#set ( $sql = "$!sql$pk.getName()=?" )     
#end     
     * @return the number of deleted rows
     * @throws DAOException
     * @see {@link #delete($beanClass)}
     */
    //2
    public int deleteByPrimaryKey($keys) throws DAOException
    {
        ${beanClass} bean=createBean();
#foreach ( $pk in $primaryKeys )
        bean.${pk.getSetMethod()}(${pk.getVarName()});
#end
        return this.delete(bean);
    }

    /**
     * Delete row according to primary keys of bean.<br>
     * 
     * @param bean will be deleted ,all keys must not be null
     * @return the number of deleted rows,0 returned if bean is null
     * @throws DAOException
     */
    //2
    @Override
    public int delete($beanClass bean) throws DAOException
    {
        if(null == bean) return 0;
        if(#join($primaryKeys "null == bean.${e.getGetMethod()}()" ' || ')){
            throw new IllegalArgumentException("primary keys must no be null ");
        }
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            this.listenerContainer.beforeDelete(bean); // listener callback
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM $tablename WHERE $sql");
            // System.out.println("deleteByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
#foreach( $pk in $primaryKeys )
            $pk.getPreparedStatementMethod("bean.${pk.getGetMethod()}()", $velocityCount)
#end
            int _rows=ps.executeUpdate();
            if(_rows>0)
                this.listenerContainer.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Delete row according to its primary keys.
     *
     * @param keys primary keys value:<br> 
     * @return the number of deleted rows
     * @see {@link #delete($beanClass)}
     */   
    //2.1
    @Override
    public int deleteByPrimaryKey(Object ...keys) throws DAOException{
        if(keys.length != $table.countPrimaryKeys() )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        ${beanClass} bean=createBean();   
#foreach ( $pk in $primaryKeys )
#set( $kidx = $velocityCount - 1 )
        if(null!= keys[$kidx] && !(keys[$kidx] instanceof $pk.getJavaType()))
            throw new IllegalArgumentException("invalid type for the No.$velocityCount argument,expected type:$pk.getJavaType()");
        bean.${pk.getSetMethod()}(($pk.getJavaType())keys[$kidx]);
#end    
        return delete(bean);
    }
    
#end ## $table.countPrimaryKeys() > 0
## ======================================================
## xImportedKeys template
## ======================================================

#if ($table.hasImportedKeys())
    //////////////////////////////////////
    // IMPORT KEY GENERIC METHOD
    //////////////////////////////////////

    /**
     * Retrieves imported T objects by fkName.<br>
     * @param <T>
     * <ul>
    #foreachImportedTables('' $table " *     <li> {@link Constant#${m_importedTable.asIKConst($m_fkName)}} -> {@link ${m_importedClass}}</li>" '    ' 'true')
     * </ul>
     * @param bean the {@link $beanClass} object to use
     * @param ikIndex valid values: #foreachImportedTables('' $table "{@link Constant#${m_importedTable.asIKConst($m_fkName)}}" ',' '')

     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends ${pkg}.FullBean<?>> List<T> getImportedBeansAsList($beanClass bean,int ikIndex)throws DAOException{
        switch(ikIndex){
#foreach($importedTable in $importedTables)
#set ( $importedClass = "$importedTable.asBeanClass()" )
#set ( $importedClassManager = "$importedTable.asManagerClass()" )
#foreach( $fkName in $importedTable.getFkMapNames($table.name) )
#set ( $columnsOfFk = $importedTable.getForeignKeysByFkName($fkName) )
        case ${importedTable.asIKConst($fkName)}:
            return (List<T>)this.${importedTable.getImportedBeansGetMethod($fkName)}AsList(bean);
#end
#end
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }

    /**
     * Set the T objects as imported beans of bean object by fkName.<br>
     * @param <T> see also {@link #getImportedBeansAsList($beanClass,int)}
     * @param bean the {@link $beanClass} object to use
     * @param importedBeans the ${importedClass} array to associate to the {@link $beanClass}
     * @param ikIndex valid values: see also {@link #getImportedBeansAsList($beanClass,int)}
     * @return importedBeans always
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends ${pkg}.FullBean<?>> T[] setImportedBeans($beanClass bean,T[] importedBeans,int ikIndex)throws DAOException{
        switch(ikIndex){
#foreach($importedTable in $importedTables)
#set ( $importedClass = "$importedTable.asBeanClass()" )
#set ( $importedClassManager = "$importedTable.asManagerClass()" )
#foreach( $fkName in $importedTable.getFkMapNames($table.name) )
#set ( $columnsOfFk = $importedTable.getForeignKeysByFkName($fkName) )
        case ${importedTable.asIKConst($fkName)}:
            return (T[])${importedTable.getImportedBeansSetMethod($fkName)}(bean,(${importedClass}[])importedBeans);
#end
#end
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
    /**
     * Set the importedBeans associates to the bean by fkName<br>
     * @param <T> see also {@link #getImportedBeansAsList($beanClass,int)}
     * @param bean the {@link $beanClass} object to use
     * @param importedBeans the <T> object to associate to the {@link $beanClass}
     * @param ikIndex valid values: see also {@link #getImportedBeansAsList($beanClass,int)}

     * @return importedBeans always
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends ${pkg}.FullBean<?>,C extends java.util.Collection<T>> C setImportedBeans($beanClass bean,C importedBeans,int ikIndex)throws DAOException{
        switch(ikIndex){
#foreach($importedTable in $importedTables)
#set ( $importedClass = "$importedTable.asBeanClass()" )
#set ( $importedClassManager = "$importedTable.asManagerClass()" )
#foreach( $fkName in $importedTable.getFkMapNames($table.name) )
#set ( $columnsOfFk = $importedTable.getForeignKeysByFkName($fkName) )
        case ${importedTable.asIKConst($fkName)}:
            return (C)${importedTable.getImportedBeansSetMethod($fkName)}(bean,(java.util.Collection<${importedClass}>)importedBeans);
#end
#end
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
#end ## $table.hasImportedKeys()
########################################
#foreach ($importedTable in $importedTables)
#if ( $velocityCount == 1 )

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
#end
#set ( $importedClass = "$importedTable.asBeanClass()" )
#set ( $importedClassManager = "$importedTable.asManagerClass()" )
#foreach( $fkName in $importedTable.getFkMapNames($table.name) )
#set ( $columnsOfFk = $importedTable.getForeignKeysByFkName($fkName) )
    /**
     * Retrieves the {@link $importedClass} object from the #join($columnsOfFk "$e.fullName" ",") field.<BR>
     * FK_NAME : $fkName 
     * @param bean the {@link $beanClass}
     * @return the associated {@link $importedClass} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public $importedClass[] ${importedTable.getImportedBeansGetMethod($fkName)}($beanClass bean) throws DAOException
    {
        return ${importedTable.getImportedBeansGetMethod($fkName)}AsList(bean).toArray(new $importedClass[0]);
    }

    /**
     * Retrieves the {@link $importedClass} object from #join($columnsOfFk "$e.fullName" ",") field.<BR>
     * FK_NAME:$fkName
     * @param bean the {@link $beanClass}
     * @return the associated {@link $importedClass} beans 
     * @throws DAOException
     */
    //3.2 GET IMPORTED
    public List<$importedClass> ${importedTable.getImportedBeansGetMethod($fkName)}AsList($beanClass bean) throws DAOException
    {
        if(null == bean)return new java.util.ArrayList<$importedClass>();
        $importedClass other = ${importedClassManager}.getInstance().createBean();
#foreach ( $fk in $columnsOfFk ) 
        other.$fk.getSetMethod()(bean.$fk.getForeignColumn().getGetMethod()());
#end
        return ${importedClassManager}.getInstance().loadUsingTemplateAsList(other);
    }

    /**
     * set  the {@link $importedClass} object array associate to $beanClass by the #join($columnsOfFk "$e.fullName" ",") field.<BR>
     * FK_NAME : $fkName 
     * @param bean the referenced {@link $beanClass}
     * @param importedBeans imported beans from $importedTable.name
     * @return importedBeans always
     * @throws DAOException
     * @see {@link ${importedClassManager}#$importedTable.getReferencedVarSetMethod($fkName)($importedClass, $beanClass)
     */
    //3.3 SET IMPORTED
    public $importedClass[] ${importedTable.getImportedBeansSetMethod($fkName)}($beanClass bean , $importedClass[] importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( $importedClass importBean : importedBeans ){
                ${importedClassManager}.getInstance().$importedTable.getReferencedVarSetMethod($fkName)(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * set  the {@link $importedClass} object collection associate to $beanClass by the #join($columnsOfFk "$e.fullName" ",") field.<BR>
     * FK_NAME:$fkName
     * @param bean the referenced {@link $beanClass} 
     * @param importedBeans imported beans from $importedTable.name 
     * @return importedBeans always
     * @throws DAOException
     * @see {@link ${importedClassManager}#$importedTable.getReferencedVarSetMethod($fkName)($importedClass, $beanClass)
     */
    //3.4 SET IMPORTED
    public <C extends java.util.Collection<$importedClass>> C ${importedTable.getImportedBeansSetMethod($fkName)}($beanClass bean , C importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( $importedClass importBean : importedBeans ){
                ${importedClassManager}.getInstance().$importedTable.getReferencedVarSetMethod($fkName)(importBean , bean);
            }
        }
        return importedBeans;
    }

#end
#end
## ======================================================
## only xImportedKeys template
## ======================================================
#if( $table.hasForeignTables() || $table.hasImportedTables() )
    /**
     * Save the $beanClass bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link $beanClass} bean to be saved
    #foreachForeignTables('' $table " * @param $table.asRefArg($m_fkName) the {@link $m_foreignClass} bean referenced by {@link $beanClass} " '    ' 'true')
    #foreachImportedTables('' $table " * @param $m_importedTable.asImpArg($m_fkName) the {@link $m_importedClass} beans refer to {@link $beanClass} " '    ' 'true' )
     * @return the inserted or updated {@link $beanClass} bean
     * @throws DAOException
     */
    //3.5 SYNC SAVE 
    public $beanClass save($beanClass bean
        #foreachForeignTables('' $table  ", $m_foreignClass $table.asRefArg($m_fkName) " '' '')

        #foreachImportedTables('' $table  ", $m_importedClass[] $m_importedTable.asImpArg($m_fkName) " '' '')) throws DAOException
    {
        if(null == bean) return null;
#foreach($foreignTable in $foreignTables)
#set ( $foreignClassManager = "$foreignTable.asManagerClass()" )
#foreach ( $fkName in $table.getFkMapNames($foreignTable.name) )
#set ( $columnsOfFk = $table.getForeignKeysByFkName($fkName) )
        this.$table.getReferencedVarSetMethod($fkName)(bean,$table.asRefArg($fkName));
#end
#end
        bean = this.save( bean );
#foreach($importedTable in $importedTables)
#set ( $importedClass = "$importedTable.asBeanClass()" )
#set ( $importedClassManager = "$importedTable.asManagerClass()" )
#foreach ( $fkName in $importedTable.getFkMapNames($table.name) )
#set ( $columnsOfFk = $importedTable.getForeignKeysByFkName($fkName) )
#set ( $impVar= $importedTable.asImpArg($fkName) )
        this.${importedTable.getImportedBeansSetMethod($fkName)}(bean,$impVar);
        ${importedClassManager}.getInstance().save( $impVar );
#end
#end
        return bean;
    } 

    /**
     * Transaction version for sync save
     * @see {@link #save($beanClass #foreachForeignTables('' $table  ", $m_foreignClass " '' '')#foreachImportedTables('' $table  ", $m_importedClass[] " '' ''))}
     */
    //3.6 SYNC SAVE AS TRANSACTION
    public $beanClass saveAsTransaction(final $beanClass bean
        #foreachForeignTables('' $table  ",final $m_foreignClass $table.asRefArg($m_fkName) " '' '')

        #foreachImportedTables('' $table  ",final $m_importedClass[] $m_importedTable.asImpArg($m_fkName) " '' '')) throws DAOException
    {
        return this.runAsTransaction(new Callable<$beanClass>(){
            @Override
            public $beanClass call() throws Exception {
                return save(bean #foreachForeignTables('' $table  ", $table.asRefArg($m_fkName) " '' '')#foreachImportedTables('' $table  ", $m_importedTable.asImpArg($m_fkName) " '' ''));
            }});
    }
#if( $table.hasImportedTables() )
    /**
     * Save the $beanClass bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link $beanClass} bean to be saved
    #foreachForeignTables('' $table " * @param $table.asRefArg($m_fkName) the {@link $m_foreignClass} bean referenced by {@link $beanClass} " '    ' 'true')
    #foreachImportedTables('' $table " * @param $m_importedTable.asImpArg($m_fkName) the {@link $m_importedClass} bean refer to {@link $beanClass} " '    ' 'true' )
     * @return the inserted or updated {@link $beanClass} bean
     * @throws DAOException
     */
    //3.7 SYNC SAVE 
    public $beanClass save($beanClass bean
        #foreachForeignTables('' $table  ", $m_foreignClass $table.asRefArg($m_fkName) " '' '')

        #foreachImportedTables('' $table  ", java.util.Collection<$m_importedClass> $m_importedTable.asImpArg($m_fkName) " '' '')) throws DAOException
    {
        if(null == bean) return null;
#foreach($foreignTable in $foreignTables)
#set ( $foreignClassManager = "$foreignTable.asManagerClass()" )
#foreach ( $fkName in $table.getFkMapNames($foreignTable.name) )
#set ( $columnsOfFk = $foreignTable.getForeignKeysByFkName($fkName) )
        this.$table.getReferencedVarSetMethod($fkName)(bean,$table.asRefArg($fkName));
#end
#end
        bean = this.save( bean );
#foreach($importedTable in $importedTables)
#set ( $importedClass = "$importedTable.asBeanClass()" )
#set ( $importedClassManager = "$importedTable.asManagerClass()" )
#foreach ( $fkName in $importedTable.getFkMapNames($table.name) )
#set ( $columnsOfFk = $importedTable.getForeignKeysByFkName($fkName) )
#set ( $impVar= $importedTable.asImpArg($fkName) )
        this.${importedTable.getImportedBeansSetMethod($fkName)}(bean,$impVar);
        ${importedClassManager}.getInstance().save( $impVar );
#end
#end
        return bean;
    }

    /**
     * Transaction version for sync save
     * @see {@link #save($beanClass #foreachForeignTables('' $table  ", $m_foreignClass " '' '')#foreachImportedTables('' $table  ", java.util.Collection " '' ''))}
     */
    //3.8 SYNC SAVE AS TRANSACTION
    public $beanClass saveAsTransaction(final $beanClass bean
        #foreachForeignTables('' $table  ",final $m_foreignClass $table.asRefArg($m_fkName) " '' '')

        #foreachImportedTables('' $table  ",final  java.util.Collection<$m_importedClass> $m_importedTable.asImpArg($m_fkName) " '' '')) throws DAOException
    {
        return this.runAsTransaction(new Callable<$beanClass>(){
            @Override
            public $beanClass call() throws Exception {
                return save(bean #foreachForeignTables('' $table  ", $table.asRefArg($m_fkName) " '' '')#foreachImportedTables('' $table  ", $m_importedTable.asImpArg($m_fkName) " '' ''));
            }});
    }
#end## $table.hasImportedTables()
    /**
     * Save the $beanClass bean and referenced beans and imported beans (array) into the database.
     *
     * @param bean the {@link $beanClass} bean to be saved
     * @param args referenced beans or imported beans<br>
     *      see also {@link #save($beanClass #foreachForeignTables('' $table  ", $m_foreignClass " '' '')#foreachImportedTables('' $table  ", $m_importedClass[] " '' ''))}
     * @return the inserted or updated {@link $beanClass} bean
     * @throws DAOException
     */
    //3.9 SYNC SAVE 
    @Override
    public $beanClass save($beanClass bean,Object ...args) throws DAOException
    {
#set ( $argLength = $table.countForeignKeyNames() + $table.countImportedKeyNames() )
#set ( $argIndex = 0 )
#set ( $argCount = 1 )
#set ( $callList= "" )
        if(args.length > $argLength)
            throw new IllegalArgumentException("too many dynamic arguments,max dynamic arguments number: $argLength");
#foreach($foreignTable in $foreignTables)
#set ( $foreignClass = "$foreignTable.asBeanClass()" )
#foreach ( $fkName in $table.getFkMapNames($foreignTable.name) )
#set ( $columnsOfFk = $table.getForeignKeysByFkName($fkName) )
        if( args.length > $argIndex && null != args[$argIndex] && !(args[$argIndex] instanceof $foreignClass)){
            throw new IllegalArgumentException("invalid type for the No.$argCount dynamic argument,expected type:$foreignClass");
        }
#set ( $callList = "$callList,(args.length < $argCount || null == args[$argIndex])?null:($foreignClass)args[$argIndex]")
#set ( $argIndex = $argIndex + 1 )            
#set ( $argCount = $argCount + 1 )
#end
#end
#foreach($importedTable in $importedTables)
#set ( $importedClass = "$importedTable.asBeanClass()" )
#foreach ( $fkName in $importedTable.getFkMapNames($table.name) )
#set ( $columnsOfFk = $importedTable.getForeignKeysByFkName($fkName) )
#set ( $impVar= $importedTable.asImpArg($fkName) )
        if( args.length > $argIndex && null != args[$argIndex] && !(args[$argIndex] instanceof $importedClass[])){
            throw new IllegalArgumentException("invalid type for the No.$argCount dynamic argument,expected type:$importedClass[]");
        }
#set ( $callList = "$callList,(args.length < $argCount || null == args[$argIndex])?null:($importedClass[])args[$argIndex]")
#set ( $argIndex = $argIndex + 1 )            
#set ( $argCount = $argCount + 1 )
#end
#end
        return save(bean$callList);
    } 

    /**
     * Save the $beanClass bean and referenced beans and imported beans (collection) into the database.
     *
     * @param bean the {@link $beanClass} bean to be saved
     * @param args referenced beans or imported beans<br>
     *      see also {@link #save($beanClass #foreachForeignTables('' $table  ", $m_foreignClass " '' '')#foreachImportedTables('' $table  ", java.util.Collection " '' ''))}
     * @return the inserted or updated {@link $beanClass} bean
     * @throws DAOException
     */
    //3.10 SYNC SAVE 
    @SuppressWarnings("unchecked")
    @Override
    public $beanClass saveCollection($beanClass bean,Object ...args) throws DAOException
    {
#set ( $argLength = $table.countForeignKeyNames() + $table.countImportedKeyNames() )
#set ( $argIndex = 0 )
#set ( $argCount = 1 )
#set ( $callList= "" )
        if(args.length > $argLength)
            throw new IllegalArgumentException("too many dynamic arguments,max dynamic arguments number: $argLength");
#foreach($foreignTable in $foreignTables)
#set ( $foreignClass = "$foreignTable.asBeanClass()" )
#set ( $foreignClassManager = "$foreignTable.asManagerClass()" )
#foreach ( $fkName in $table.getFkMapNames($foreignTable.name) )
#set ( $columnsOfFk = $table.getForeignKeysByFkName($fkName) )
        if( args.length > $argIndex && null != args[$argIndex] && !(args[$argIndex] instanceof $foreignClass)){
            throw new IllegalArgumentException("invalid type for the No.$argCount argument,expected type:$foreignClass");
        }
#set ( $callList = "$callList,(args.length < $argCount || null == args[$argIndex])?null:($foreignClass)args[$argIndex]")
#set ( $argIndex = $argIndex + 1 )            
#set ( $argCount = $argCount + 1 )
#end
#end
#foreach($importedTable in $importedTables)
#set ( $importedClass = "$importedTable.asBeanClass()" )
#set ( $importedClassManager = "$importedTable.asManagerClass()" )
#foreach ( $fkName in $importedTable.getFkMapNames($table.name) )
#set ( $columnsOfFk = $importedTable.getForeignKeysByFkName($fkName) )
#set ( $impVar= $importedTable.asImpArg($fkName) )
        if( args.length > $argIndex && null != args[$argIndex] && !(args[$argIndex] instanceof java.util.Collection)){
            throw new IllegalArgumentException("invalid type for the No.$argCount argument,expected type:java.util.Collection<$importedClass>");
        }
#set ( $callList = "$callList,(args.length < $argCount || null == args[$argIndex])?null:(java.util.Collection<$importedClass>)args[$argIndex]")
#set ( $argIndex = $argIndex + 1 )
#set ( $argCount = $argCount + 1 )
#end
#end
        return save(bean$callList);
    } 
#end## $table.hasForeignTables() || $table.hasImportedTables()
## ======================================================
## xForeignKeys template
## ======================================================
#if ($table.hasForeignKeys())
    //////////////////////////////////////
    // FOREIGN KEY GENERIC METHOD
    //////////////////////////////////////

    /**
     * Retrieves the bean object referenced by fkIndex.<br>
     * @param <T>
     * <ul>
    #foreachForeignTables('' $table " *     <li> {@link Constant#${table.asFKConst($m_fkName)}} -> {@link ${m_foreignClass}}</li>" '    ' 'true')
     * </ul>
     * @param bean the {@link $beanClass} object to use
     * @param fkIndex valid values: <br>
     *        #foreachForeignTables('' $table "{@link Constant#${table.asFKConst($m_fkName)}}" ',' '')

     * @return the associated <T> bean or {@code null} if {@code bean} or {@code beanToSet} is {@code null}
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends ${pkg}.FullBean<?>> T getReferencedBean($beanClass bean,int fkIndex)throws DAOException{
        switch(fkIndex){
#foreach($foreignTable in $foreignTables)
#set ( $foreignClass = "$foreignTable.asBeanClass()" )
#set ( $foreignClassManager = "$foreignTable.asManagerClass()" )
#foreach( $fkName in $table.getFkMapNames($foreignTable.name) )
#set ( $columnsOfFk = $table.getForeignKeysByFkName($fkName) )
        case ${table.asFKConst($fkName)}:
            return  (T)this.${table.getReferencedVarGetMethod($fkName)}(bean);
#end
#end
        }
        throw new IllegalArgumentException(String.format("invalid fkIndex %d", fkIndex));
    }
    
    /**
     * Associates the {@link $beanClass} object to the bean object by fkIndex field.<br>
     * 
     * @param <T> see also {@link #getReferencedBean($beanClass,int)}
     * @param bean the {@link $beanClass} object to use
     * @param beanToSet the <T> object to associate to the {@link $beanClass}
     * @param fkIndex valid values: see also {@link #getReferencedBean($beanClass,int)}
     * @return always beanToSet saved
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends ${pkg}.FullBean<?>> T setReferencedBean($beanClass bean,T beanToSet,int fkIndex)throws DAOException{
        switch(fkIndex){
#foreach($foreignTable in $foreignTables)
#set ( $foreignClass = "$foreignTable.asBeanClass()" )
#set ( $foreignClassManager = "$foreignTable.asManagerClass()" )
#foreach( $fkName in $table.getFkMapNames($foreignTable.name) )
#set ( $columnsOfFk = $table.getForeignKeysByFkName($fkName) )
        case ${table.asFKConst($fkName)}:
            return  (T)this.${table.getReferencedVarSetMethod($fkName)}(bean, (${foreignClass})beanToSet);
#end
#end
        }
        throw new IllegalArgumentException(String.format("invalid fkIndex %d", fkIndex));
    }
#end ## $table.hasForeignKeys()
    
#foreach ($foreignTable in $foreignTables)
#if ( $velocityCount == 1 )
    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////

#end
#set ( $foreignClass = "$foreignTable.asBeanClass()" )
#set ( $foreignClassManager = "$foreignTable.asManagerClass()" )
#foreach( $fkName in $table.getFkMapNames($foreignTable.name) )
#set ( $columnsOfFk = $table.getForeignKeysByFkName($fkName) )

    /**
     * Retrieves the {@link $foreignClass} object referenced by #join($columnsOfFk "{@link $beanClass#$e.getGetMethod()}()" ",") field.<br>
     * FK_NAME : $fkName
     * @param bean the {@link $beanClass}
     * @return the associated {@link $foreignClass} bean or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.2 GET REFERENCED VALUE
    public $foreignClass $table.getReferencedVarGetMethod($fkName)($beanClass bean) throws DAOException
    {
        if(null == bean)return null;
        $foreignClass other = ${foreignClassManager}.getInstance().createBean();
#foreach ( $fk in $columnsOfFk ) 
        other.$fk.getForeignColumn().getSetMethod()(bean.$fk.getGetMethod()()); 
#end 
        bean.$table.getReferencedVarSetMethod($fkName)(${foreignClassManager}.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.$table.getReferencedVarGetMethod($fkName)();
    }

    /**
     * Associates the {@link $beanClass} object to the {@link $foreignClass} object by #join($columnsOfFk "{@link $beanClass#$e.getGetMethod()}()" ",") field.
     *
     * @param bean the {@link $beanClass} object to use
     * @param beanToSet the {@link $foreignClass} object to associate to the {@link $beanClass}
     * @return always beanToSet saved
     * @throws Exception
     */
    //5.2 SET REFERENCED 
    public $foreignClass $table.getReferencedVarSetMethod($fkName)($beanClass bean, $foreignClass beanToSet) throws DAOException
    {
        if(null != bean){
            ${foreignClassManager}.getInstance().save(beanToSet);
            bean.$table.getReferencedVarSetMethod($fkName)(beanToSet);
            if( null == beanToSet){
#foreach ( $fk in $columnsOfFk ) 
                bean.$fk.getSetMethod()(null);
#end 
            }else{
#foreach ( $fk in $columnsOfFk ) 
                bean.$fk.getSetMethod()(beanToSet.${fk.getForeignColumn().getGetMethod()}());
#end 
            }
        }
        return beanToSet;
    }
#end
#end

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Deletes rows from the $tablename table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clauses.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    @Override
    public int deleteByWhere(String where) throws DAOException
    {
        if( !this.listenerContainer.isEmpty()){
            final DeleteBeanAction action = new DeleteBeanAction(); 
            this.loadByWhere(where,action);
            return action.getCount();
        }
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM $tablename " + where);
            // System.out.println("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________

    //13
    @Override
    public $beanClass insert($beanClass bean) throws DAOException
    {
        // mini checks
        if (null == bean || !bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();
##-------------writePreInsert
#set( $genKeyRetrieve = $codewriter.getProperty("generatedkey.retrieve", "") )
#set ( $hint = $codewriter.getProperty("generatedkey.statement").replaceAll("<TABLE>", $tablename) )
#if ( $table.getAutoincrement() )
#set($pKey = $table.getAutoincrement())
#if ( $genKeyRetrieve == "before" && $pKey.isColumnNumeric() )
            if (!bean.$pKey.getModifiedMethod()())
            {
#set ( $keyFilteredHint = $hint.replaceAll("<KEY>", $pKey.getName()) )
                StringBuilder hint = new StringBuilder("$keyFilteredHint");
                // System.out.println("generatedKey : " + hint);

                ps = c.prepareStatement(hint.toString());
                ResultSet rs = null;
                try
                {
                    rs = ps.executeQuery();
                    if(rs.next()) {
                        bean.$pKey.getSetMethod()($pKey.getResultSetMethodObject("1"));
                    } else {
                        this.getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                }
                finally
                {
                    this.getManager().close(ps, rs);
                    ps=null;
                }
            }
#end
#end## $table.getAutoincrement()
##------------/writePreInsert
            this.listenerContainer.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
#if ( $table.hasVersionColumn() )
#set ($lockColumn = $table.getVersionColumn())
        bean.$lockColumn.getSetMethod()(new $lockColumn.getJavaType()(String.valueOf(System.currentTimeMillis())));

#end
            sql = new StringBuilder("INSERT into $tablename (");

#foreach( $column in $columns )
            if (bean.$column.getModifiedMethod()()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("$column.getName()");
                _dirtyCount++;
            }

#end
            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");

#if ( $genKeyRetrieve == "auto" )
#set( $prestArgs = "Statement.RETURN_GENERATED_KEYS" )
#else
#set( $prestArgs = "ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY" )
#end

            // System.out.println("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), $prestArgs);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();
##------------------writePostInsert
#if ( $table.getAutoincrement() )
#set($pKey = $table.getAutoincrement())
#set ( $hint = $codewriter.getProperty("generatedkey.statement").replaceAll("<TABLE>", $tablename) )
#if ( $genKeyRetrieve == "after" )

            if (!bean.$pKey.getModifiedMethod()())
            {
                PreparedStatement ps2 = null;
                ResultSet rs = null;
                try {
#set ( $keyFilteredHint = $hint.replaceAll("<KEY>", $pKey.getName()) )
                    ps2 = c.prepareStatement("$keyFilteredHint");
                    rs = ps2.executeQuery();
                    if(rs.next()) {
                        bean.$pKey.getSetMethod()($pKey.getResultSetMethodObject("1"));
                    } else {
                        this.getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                } finally {
                    this.getManager().close(ps2, rs);
                }
            }
#elseif ( $genKeyRetrieve == "auto" )
            if (!bean.$pKey.getModifiedMethod()())
            {
                ResultSet rs = ps.getGeneratedKeys();
                try {
                    if(rs.next()) {
                        bean.$pKey.getSetMethod()($pKey.getResultSetMethodObject("1"));
                    } else {
                        this.getManager().log("ATTENTION: Could not retrieve auto generated key!");
                    }
                } finally {
                    this.getManager().close(rs);
                }
            }
#end
#end## $table.getAutoincrement()
##-------------------/writePostInsert

            bean.isNew(false);
            bean.resetIsModified();
            this.listenerContainer.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //14
    @Override
    public $beanClass update($beanClass bean) throws DAOException
    {
        // mini checks
        if (null == bean || !bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();

#if ( $table.countPrimaryKeys() == 0 )
$codewriter.log("    WARN : $tablename does not have any primary key...")
#end
            this.listenerContainer.beforeUpdate(bean); // listener callback
#if ( $table.hasVersionColumn )
#set ($lockColumn = $table.getVersionColumn() )
            $lockColumn.getJavaType() oldLockValue = bean.$lockColumn.getGetMethod()();
            bean.$lockColumn.getSetMethod())(new $lockColumn.getJavaType()(String.valueOf(System.currentTimeMillis())));

#end
            sql = new StringBuilder("UPDATE $tablename SET ");
            boolean useComma=false;
#foreach( $column in $columns )

            if (bean.$column.getModifiedMethod()()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("${column.getName()}=?");
            }
#end
#if ( $table.countPrimaryKeys() > 0 )
            sql.append(" WHERE ");
#end
#set ($sql = "" )
#macro ( sqlAppend $somestr )
#set ( $sql = "$!sql$somestr" )
#end
#foreach( $primaryKey in $primaryKeys )
#if ( $velocityCount > 1 )#sqlAppend( " AND " )#end
#sqlAppend( "$primaryKey.getName()=?" )
#end
#if ( $table.hasVersionColumn() )
#set ( $lockColumn = $table.getVersionColumn() )
#if ( $table.countPrimaryKeys() > 0 )#sqlAppend( " AND " )#end
#sqlAppend( "$lockColumn.getName()=?")
#end
            sql.append("$sql");
            // System.out.println("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                // System.out.println("The bean to look is not initialized... do not update.");
                return bean;
            }

#foreach ( $pKey in $primaryKeys )
            $pKey.getPreparedStatementMethod("bean.$pKey.getGetMethod()()", "++_dirtyCount")
#end
#if ( $table.hasVersionColumn() )
#if ( $lockColumn == $table.getVersionColumn() )
            $lockColumn.getPreparedStatementMethod( "oldLockValue", "++_dirtyCount")
            if (ps.executeUpdate()==0) {
                throw new OptimisticLockingException("sql2java.exception.optimisticlock");
            }
#end
#else
            ps.executeUpdate();
#end
            bean.resetIsModified();
            this.listenerContainer.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    //18
    @Override
    public $beanClass loadUniqueUsingTemplate(${beanClass} bean) throws DAOException
    {
         $beanClass[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    //20-5
    @Override
    public int loadUsingTemplate(${beanClass} bean, int[] fieldList, int startRow, int numRows,int searchType, Action<$beanClass> action) throws DAOException
    {
        // System.out.println("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        StringBuilder sqlWhere = new StringBuilder("");
        String sql=createSelectSql(fieldList,this.fillWhere(sqlWhere, bean, searchType) > 0?" WHERE "+sqlWhere.toString():null);
        PreparedStatement ps = null;
        Connection connection = null;
        // logger.debug("sql string:\n" + sql + "\n");
        try {
            connection = this.getConnection();
            ps = connection.prepareStatement(sql,
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);
            return this.loadByPreparedStatement(ps, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        }catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(ps);
            this.freeConnection(connection);
        }
    }

    //21
    @Override
    public int deleteUsingTemplate(${beanClass} bean) throws DAOException
    {
#if ( $table.countPrimaryKeys() > 0)
        if(#join($primaryKeys "bean.$e.getInitializedMethod()() && null != bean.$e.getGetMethod()()" ' && ' )){
            return this.deleteByPrimaryKey(#join($primaryKeys "bean.$e.getGetMethod()()" ', '));
        }
#end
        if( !this.listenerContainer.isEmpty()){
            final DeleteBeanAction action=new DeleteBeanAction(); 
            this.loadUsingTemplate(bean,action);
            return action.getCount();
        }
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("DELETE FROM $tablename ");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... deleting all");
            }
            // System.out.println("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

#if ($table.countIndices() > 0)

    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________

#foreach ( $index in $table.getIndices() )
#if($index.isUnique())
    /**
     * Retrieves an unique $beanClass using the ${index.getName()} index.
     *
#foreach ( $column in $index.getIndexColumnsList() )
     * @param ${column.getVarName()} the ${column.getName()} column's value filter. must not be null
#end
     * @return a list of $beanClass
     * @throws DAOException
     */
    public $beanClass loadBy${index.asCamelCaseName()}(#join($index.getIndexColumnsList() "$e.getJavaType() ${e.getVarName()}" ',')) throws DAOException
    {
        ${beanClass} bean = this.createBean();
#foreach ( $column in $index.getIndexColumnsList() )
        if( null == ${column.getVarName()})
            throw new IllegalArgumentException("the key '${column.getVarName()}'  must not be null");
        bean.${column.getSetMethod()}(${column.getVarName()});
#end
        return loadUniqueUsingTemplate(bean);
    }
#else## $index.isUnique()
    /**
     * Retrieves an array of $beanClass using the ${index.getName()} index.
     *
#foreach ( $column in $index.getIndexColumnsList() )
     * @param ${column.getVarName()} the ${column.getName()} column's value filter.
#end
     * @return an array of $beanClass
     * @throws DAOException
     */
    public $beanClass[] loadBy${index.asCamelCaseName()}(#join($index.getIndexColumnsList() "$e.getJavaType() ${e.getVarName()}" ',')) throws DAOException
    {
        return ($beanClass[])this.loadBy${index.asCamelCaseName()}AsList(#join($index.getIndexColumnsList() "${e.getVarName()}" ',')).toArray(new $beanClass[0]);
    }
    
    /**
     * Retrieves a list of $beanClass using the ${index.getName()} index.
     *
#foreach ( $column in $index.getIndexColumnsList() )
     * @param ${column.getVarName()} the ${column.getName()} column's value filter.
#end
     * @return a list of $beanClass
     * @throws DAOException
     */
    public List<$beanClass> loadBy${index.asCamelCaseName()}AsList(#join($index.getIndexColumnsList() "$e.getJavaType() ${e.getVarName()}" ',')) throws DAOException
    {
        ${beanClass} bean = this.createBean();
#foreach ( $column in $index.getIndexColumnsList() )
        bean.${column.getSetMethod()}(${column.getVarName()});
#end
        return loadUsingTemplateAsList(bean);
    }
#end## $index.isUnique()    
    /**
     * Deletes rows using the ${index.getName()} index.
     *
#foreach ( $column in $index.getIndexColumnsList() )
     * @param ${column.getVarName()} the ${column.getName()} column's value filter.
#end
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteBy${index.asCamelCaseName()}(#join($index.getIndexColumnsList() "$e.getJavaType() ${e.getVarName()}" ',')) throws DAOException
    {
        ${beanClass} bean = this.createBean();
#foreach ( $column in $index.getIndexColumnsList() )
        bean.${column.getSetMethod()}(${column.getVarName()});
#end
        return deleteUsingTemplate(bean);
    }
    
#end
    
    /**
     * Retrieves a list of $beanClass using the index specified by keyIndex.
     * @param keyIndex valid values: <br>
     *        #join($table.getIndices() "{@link Constant#${e.asConstName()}}" ',')

     * @param keys key values of index
     * @return a list of $beanClass
     * @throws DAOException
     */
    public List<$beanClass> loadByIndexAsList(int keyIndex,Object ...keys)throws DAOException
    {
        switch(keyIndex){
#foreach($index in $table.getIndices())
#set ( $idxIndex = $velocityCount - 1 )
        case ${index.asConstName()}:{
            if(keys.length != $index.getIndexColumns().size())
                throw new IllegalArgumentException("argument number mismatch with index '${index.name}' column number");
#foreach($column in $index.getIndexColumns())
            if(null != keys[$idxIndex] && !(keys[$idxIndex] instanceof $column.getJavaType()))
                throw new IllegalArgumentException("invalid type for the No.$velocityCount argument,expected type:$column.getJavaType()");
#end
#if($index.isUnique())
            $beanClass bean= this.loadBy${index.asCamelCaseName()}(#join($index.getIndexColumnsList() "($e.getJavaType())keys[$m_0count]" ','));
            return null == bean ? new java.util.ArrayList<$beanClass>() : java.util.Arrays.asList(bean);
#else
            return this.loadBy${index.asCamelCaseName()}AsList(#join($index.getIndexColumnsList() "($e.getJavaType())keys[$m_0count]" ','));        
#end
        }
#end
        default:
            throw new IllegalArgumentException(String.format("invalid keyIndex %d", keyIndex));
        }
    }
    
    /**
     * Deletes rows using key.
     * @param keyIndex valid values: <br>
     *        #join($table.getIndices() "{@link Constant#${e.asConstName()}}" ',')

     * @param keys key values of index
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteByIndex(int keyIndex,Object ...keys)throws DAOException
    {
        switch(keyIndex){
#foreach($index in $table.getIndices())
#set ( $idxIndex = $velocityCount - 1 )
        case ${index.asConstName()}:{
            if(keys.length != $index.getIndexColumns().size())
                throw new IllegalArgumentException("argument number mismatch with index '${index.name}' column number");
#foreach($column in $index.getIndexColumns())
            if(null != keys[$idxIndex] && !(keys[$idxIndex] instanceof $column.getJavaType()))
                throw new IllegalArgumentException("invalid type for the No.$velocityCount argument,expected type:$column.getJavaType()");
#end                
            return this.deleteBy${index.asCamelCaseName()}(#join($index.getIndexColumnsList() "($e.getJavaType())keys[$m_0count]" ','));
        }
#end
        default:
            throw new IllegalArgumentException(String.format("invalid keyIndex %d", keyIndex));
        }        
    }
#end##($table.countIndices() > 0)

## Many to Many needs to be templatized.
#set ( $rTables = $codewriter.getRelationTables() )
#foreach ( $rTable in $rTables )
#### if there is a foreign key present in that relation table
#* *##if (! ("$!rTable.getForeignKeyFor( $table )" == "") )
#* *##set ( $oVelocityCount = $velocityCount )
#* *##set ( $lTables = $rTable.linkedTables($db, $codewriter.getTable() ) )
#* *##set ( $rName = $rTable.getName() )
#* *##foreach ( $lTable in $lTables )
#*      *##set ( $lName = $lTable.getName() )
#*      *##if ( $velocityCount == 1 && $oVelocityCount == 1 )
    
    //_____________________________________________________________________
    //
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE
    //_____________________________________________________________________
#*      *##end
#set ( $strLinkedCore = "$!{codewriter.getClassPrefix()}$lTable.asCoreClass()" )
#set ( $strLinkedBean = "${lTable.asBeanClass()}" )
#set ( $strLinkedManager = "${lTable.asManagerClass()}" )
#set ( $strRelationCore = "${rTable.asCoreClass()}" )
#set ( $strRelationBean = "${rTable.asBeanClass()}" )
#set ( $localKey = $rTable.getForeignKeyFor( $table ) )
#set ( $externalKey = $rTable.getForeignKeyFor( $lTable ) )
    /**
     * Retrieves an array of $strLinkedBean using the relation table $strRelationCore given a $beanClass object.
     *
     * @param bean the $beanClass bean to be used
     * @return an array of $strLinkedBean
     * @throws DAOException
     */
    //22 MANY TO MANY
    public $strLinkedBean[] load${strLinkedCore}Via$strRelationCore($beanClass bean) throws DAOException
    {
         return this.load${strLinkedCore}Via$strRelationCore(bean, 1, -1);
    }

    /**
     * Retrieves an array of $strLinkedBean using the relation table $strRelationCore given a $beanClass object, specifying the start row and the number of rows.
     *
     * @param bean the $beanClass bean to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of $strLinkedBean
     * @throws DAOException
     */
    //23 MANY TO MANY
    public $strLinkedBean[] load${strLinkedCore}Via$strRelationCore($beanClass bean, int startRow, int numRows) throws DAOException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String sql = " SELECT " + ${lTable.name.toUpperCase()}_ALL_FIELDS
                         + " FROM $lName ${lName}L, $rName ${rName}R"
                         + " WHERE "
                         + "     ${rName}R.$localKey.getForeignColumn().getName() = ?"
                         + " AND ${rName}R.$externalKey.getForeignColumn().getName() = ${lName}L.$externalKey.getName()";
         try
         {
             c = this.getConnection();
             ps = c.prepareStatement(sql,
                                     ResultSet.TYPE_SCROLL_INSENSITIVE,
                                     ResultSet.CONCUR_READ_ONLY);
             $localKey.getPreparedStatementMethod("bean.$localKey.getGetMethod()()", 1)
             return ${strLinkedManager}.getInstance().loadByPreparedStatement(ps, null, startRow, numRows);
         }
         catch (SQLException e)
         {
             throw new DAOException(e.getMessage(), e);
         }
         finally
         {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
         }
    }
#* *##end
#* *##end
#end

    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    //25
    @Override
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM $tablename " + where;
        // System.out.println("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table $tablename with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific $beanClass bean given the search type
     *
     * @param bean the $beanClass template to look for
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(${beanClass} bean, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("SELECT COUNT(*) AS MCOUNT FROM $tablename");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... counting all...");
            }
            // System.out.println("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given StringBuilder with the sql where clauses constructed using the bean and the search type
     * @param sqlWhere the StringBuilder that will be filled
     * @param bean the bean to use for creating the where clauses
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clauses returned
     */
    protected int fillWhere(StringBuilder sqlWhere, $beanClass bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
#foreach( $column in $columns )
            if (bean.$column.getModifiedMethod()()) {
                _dirtyCount ++;
                if (bean.$column.getGetMethod()() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("$column.getName() IS NULL");
                } else {
#if ($column.isString())
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("$column.getName() ").append(sqlEqualsOperation).append("?");
#else
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("$column.getName() = ?");
#end
                }
            }
#end
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the PreparedStatement that will be filled
     * @param bean the bean to use for creating the where clauses
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clauses returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, $beanClass bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
#foreach ( $column in $columns )
            if (bean.$column.getModifiedMethod()()) {
#if ($column.isString())
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.$column.getGetMethod()() + "]");
                        $column.getPreparedStatementMethod("bean.$column.getGetMethod()()", "++_dirtyCount")
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.$column.getGetMethod()() + "%]");
                        $column.getPreparedStatementMethod("${Q}%${Q} + bean.$column.getGetMethod()() + ${Q}%${Q}", "++_dirtyCount")
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.$column.getGetMethod()() + "]");
                        $column.getPreparedStatementMethod("${Q}%${Q} + bean.$column.getGetMethod()()", "++_dirtyCount")
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.$column.getGetMethod()() + "%]");
                        $column.getPreparedStatementMethod("bean.$column.getGetMethod()() + ${Q}%${Q}", "++_dirtyCount")
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
#else
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.$column.getGetMethod()() + "]");
                $column.getPreparedStatementMethod("bean.$column.getGetMethod()()", "++_dirtyCount")
#end
            }
#end
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of $beanClass objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting $beanClass table
     * @throws DAOException
     */
    //28
    public $beanClass[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return this.decodeResultSetAsList(rs, fieldList, startRow, numRows).toArray(new $beanClass[0]);
    }

    /**
     * decode a resultset in a list of $beanClass objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting $beanClass table
     * @throws DAOException
     */
    //28-1
    public List<$beanClass> decodeResultSetAsList(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        actionOnResultSet(rs, fieldList, numRows, numRows, action);
        return action.getList();
    }
    /** decode a resultset and call action
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action interface obj for do something
     * @return the count dealt by action  
     * @throws DAOException
     * @throws IllegalArgumentException
     */
    //28-2
    public int actionOnResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows, Action<$beanClass> action) throws DAOException{
        try{
            int count = 0;
            if(0!=numRows){
                if( startRow<1 )
                    throw new IllegalArgumentException("invalid argument:startRow (must >=1)");
                if( null==action || null==rs )
                    throw new IllegalArgumentException("invalid argument:action OR rs (must not be null)");                    
                for(;startRow>1&&rs.next();--startRow);//skip to last of startRow
                if (fieldList == null) {
                    if(numRows<0)
                        for(;rs.next();++count)
                            action.call(decodeRow(rs, action.getBean()));
                    else
                        for(;rs.next() && count<numRows;++count)
                            action.call(decodeRow(rs, action.getBean()));
                }else {
                    if(numRows<0)
                        for(;rs.next();++count)
                            action.call(decodeRow(rs, fieldList,action.getBean()));
                    else
                        for(;rs.next() && count<numRows;++count)
                            action.call(decodeRow(rs, fieldList,action.getBean()));
                }
            }
            return count;
        }catch(DAOException e){
            throw e;
        }catch(SQLException e){
            throw new DataAccessException(e);
        }
    }

    /**
     * Transforms a ResultSet iterating on the $tablename on a $beanClass bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting $beanClass bean
     * @throws DAOException
     */
    //29
    public $beanClass decodeRow(ResultSet rs,$beanClass bean) throws DAOException
    {
        if(null==bean)
            bean = this.createBean();
        try
        {
## the set statement casts $velocityCount to a string
#foreach ( $column in $columns )
#set ($vCount = "$velocityCount" )
            bean.$column.getSetMethod()($column.getResultSetMethodObject($vCount));
#end
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the $tablename table on a $beanClass bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting $beanClass bean
     * @throws DAOException
     */
    //30
    public $beanClass decodeRow(ResultSet rs, int[] fieldList,$beanClass bean) throws DAOException
    {
        if(null==bean)
            bean = this.createBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
#foreach( $column in $columns )
                    case $column.getIDConstName():
                        ++pos;
                        bean.$column.getSetMethod()($column.getResultSetMethodObject("pos"));
                        break;
#end
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the $tablename on a $beanClass bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting $beanClass bean
     * @throws DAOException
     */
    //31
    public $beanClass metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        $beanClass bean = this.createBean();
        try
        {
#foreach ( $column in $columns )
            bean.$column.getSetMethod()($column.getResultSetMethodObject("${Q}$column.getName()${Q}"));
#end
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of $beanClass
     * @throws DAOException
     */
    //32
    public $beanClass[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of $beanClass
     * @throws DAOException
     */
    //32
    public List<$beanClass> loadByPreparedStatementAsList(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of $beanClass
     * @throws DAOException
     */
    //33
    public $beanClass[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, fieldList).toArray(new $beanClass[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of $beanClass
     * @throws DAOException
     */
    //33
    public List<$beanClass> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList) throws DAOException
    { 
        return loadByPreparedStatementAsList(ps,fieldList,1,-1);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of $beanClass
     * @throws DAOException
     */
    //34
    public $beanClass[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return loadByPreparedStatementAsList(ps,fieldList,startRow,numRows).toArray(new $beanClass[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of $beanClass
     * @throws DAOException
     */
    //34-1
    public List<$beanClass> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        loadByPreparedStatement(ps,fieldList,startRow,numRows,action);
        return action.getList();
    }
    /**
     * Loads each element using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows 
     * and dealt by action.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */     
    //34-2
    public int loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows,Action<$beanClass> action) throws DAOException
    {
        ResultSet rs =  null;
        try {
            ps.setFetchSize(100);
            rs = ps.executeQuery();
            return this.actionOnResultSet(rs, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        } catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(rs);
        }
    }
    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    class ListenerContainer implements TableListener<$beanClass> {
        private final Set<TableListener<$beanClass>> listeners = new TreeSet<TableListener<$beanClass>>();
        public ListenerContainer() {
        }
    
        @Override
        public void beforeInsert($beanClass bean) throws DAOException {
            for(TableListener<$beanClass> listener:listeners){
                listener.beforeInsert(bean);
            }
        }
    
        @Override
        public void afterInsert($beanClass bean) throws DAOException {
            for(TableListener<$beanClass> listener:listeners){
                listener.afterInsert(bean);
            }
        }
    
        @Override
        public void beforeUpdate($beanClass bean) throws DAOException {
            for(TableListener<$beanClass> listener:listeners){
                listener.beforeUpdate(bean);
            }
        }
    
        @Override
        public void afterUpdate($beanClass bean) throws DAOException {
            for(TableListener<$beanClass> listener:listeners){
                listener.afterUpdate(bean);
            }
        }
    
        @Override
        public void beforeDelete($beanClass bean) throws DAOException {
            for(TableListener<$beanClass> listener:listeners){
                listener.beforeDelete(bean);
            }
        }
    
        @Override
        public void afterDelete($beanClass bean) throws DAOException {
            for(TableListener<$beanClass> listener:listeners){
                listener.afterDelete(bean);
            }
        }
    
        public boolean isEmpty() {
            return listeners.isEmpty();
        }
    
        public boolean contains(TableListener<$beanClass> o) {
            return listeners.contains(o);
        }
    
        public synchronized boolean add(TableListener<$beanClass> e) {
            if(null == e)
                throw new NullPointerException();
            return listeners.add(e);
        }
    
        public synchronized boolean remove(TableListener<$beanClass> o) {
            return null == o? false : listeners.remove(o);
        }
    
        public synchronized void clear() {
            listeners.clear();
        }    
    }
    private final ListenerContainer listenerContainer = new ListenerContainer();

    //35
    @Override
    public void registerListener(TableListener<$beanClass> listener)
    {
        this.listenerContainer.add(listener);
    }

    /**
     * remove listener.
     */
    //36
    @Override
    public void unregisterListener(TableListener<$beanClass> listener)
    {
        this.listenerContainer.remove(listener);
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    private Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    private void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    private Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }

    //43
    @Override
    public boolean isPrimaryKey(String column){
        for(String c:PRIMARYKEY_NAMES)if(c.equalsIgnoreCase(column))return true;
        return false;
    }
    
    /**
     * Fill the given prepared statement with the values in argList
     * @param ps the PreparedStatement that will be filled
     * @param argList the arguments to use fill given prepared statement
     * @throws DAOException
     */
    private void fillPrepareStatement(PreparedStatement ps, Object[] argList) throws DAOException{
        try {
            if (!(argList == null || ps == null)) {
                for (int i = 0; i < argList.length; i++) {
                    if (argList[i].getClass().equals(byte[].class)) {
                        ps.setBytes(i + 1, (byte[]) argList[i]);
                    } else
                        ps.setObject(i + 1, argList[i]);
                }
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        }
    }
    
    @Override    
    public int loadBySqlForAction(String sql, Object[] argList, int[] fieldList,int startRow, int numRows,Action<$beanClass> action) throws DAOException{
        PreparedStatement ps = null;
        Connection connection = null;
        // logger.debug("sql string:\n" + sql + "\n");
        try {
            connection = this.getConnection();
            ps = connection.prepareStatement(sql,
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            fillPrepareStatement(ps, argList);
            return this.loadByPreparedStatement(ps, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        }catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(ps);
            this.freeConnection(connection);
        }
    }
   
    @Override
    public <T>T runAsTransaction(Callable<T> fun) throws DAOException{
        return Manager.getInstance().runAsTransaction(fun);
    }
    
    @Override
    public void runAsTransaction(final Runnable fun) throws DAOException{
        Manager.getInstance().runAsTransaction(fun);
    }
    
    class DeleteBeanAction extends Action.Adapter<$beanClass>{
        private final AtomicInteger count=new AtomicInteger(0);
        @Override
        public void call($beanClass bean) throws DAOException {
                ${managerClass}.this.delete(bean);
                count.incrementAndGet();
        }
        int getCount(){
            return count.get();
        }
    }
}
