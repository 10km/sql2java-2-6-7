##$Id: bean.java.vm,v 1.8 2008/05/05 11:54:35 kameleono Exp $
#parse( "table.include.vm" )
#parse( "header.include.vm" )
$codewriter.setCurrentJavaFilename("$table.getPackage()", "${beanClass}.java")
package $table.getPackage();

import ${pkg}.FullBean;
#foreach ($foreignTable in $foreignTables)
import ${foreignTable.getPackage()}.${foreignTable.asBeanClass()};
#end

/**
 * $beanClass is a mapping of $table.getName() Table.
#if ( $table.getRemarks().length() > 0 )
 * <br>Meta Data Information (in progress):
 * <ul>
 *    <li>comments: $table.getRemarks() </li>
 * </ul>
#end
 * @author sql2java
*/
@SuppressWarnings("unchecked")
public class ${beanClass}
    extends ${beanClass}Base
    implements FullBean<${beanClass}Base>
#if ($implementsClasses)
    #foreach( $implements in $implementsClasses )$implements #end
#end
{
	private static final long serialVersionUID = ${table.getSerialVersionUID()}L;
	
#foreach ( $column in $columns )
##    private $column.getJavaType() $column.getVarName();   // generation without default values
    private boolean $column.getModifiedVarName() = false;
    private boolean $column.getInitializedVarName() = false;

#end


    /**
     * Prefered methods to create a $beanClass is via the create$beanClass method in $managerClass or
     * via the factory class $factoryClass create method
     * 为了能在webservice中传递对象，此处从protected改为public
     */
    public ${beanClass}(){
        super();
    }
    /**
     * create a ${beanClass} from a instance
     */
    ${beanClass}(${beanClass}Base bean){
        super();
        copy(bean);
    }
#foreach ( $column in $columns )
    /**
     * Getter method for $column.getVarName().
     * <br>
#if ( $column.isPrimaryKey() )
     * PRIMARY KEY.<br>
#end
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: $column.getFullName()</li>
#foreach ( $fKey in $column.getForeignKeys() )
     * <li> foreign key: ${fKey.getTableName()}.${fKey.getName()}</li>
#end
#foreach ( $iKey in $column.getImportedKeys() )
     * <li> imported key: ${iKey.getTableName()}.${iKey.getName()}</li>
#end
#if ( $column.getRemarks().length() > 0 )
     * <li>comments: $column.getRemarks()</li>
#end
#if ( $column.getDefaultValue().length() > 0 )
     * <li>default value: $column.getDefaultValue()</li>
#end
     * <li>column size: $column.getSize()</li>
     * <li>jdbc type returned by the driver: $column.getJavaTypeAsTypeName()</li>
     * </ul>
     *
     * @return the value of $column.getVarName()
     */
    public $column.getJavaType() ${column.getGetMethod()}(){
        return $column.getVarName();
    }
    /**
     * Setter method for $column.getVarName().
     * <br>
#if ( $column.hasCompareTo() )
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
#else
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
#end
     *
     * @param newVal the new value to be assigned to $column.getVarName()
     */
    public void $column.getSetMethod()($column.getJavaType() newVal)
    {
#if ($column.hasCompareTo())
        if ((newVal != null && $column.getVarName() != null && (newVal.compareTo($column.getVarName()) == 0)) ||
            (newVal == null && $column.getVarName() == null && $column.getInitializedVarName())) {
            return;
        }
#elseif ( $column.useEqualsInSetter() )
        if ((newVal != null && $column.getVarName() != null && newVal.equals($column.getVarName())) ||
            (newVal == null && $column.getVarName() == null && $column.getInitializedVarName())) {
            return;
        }
#end
        super.$column.getSetMethod()(newVal);
        $column.getModifiedVarName() = true;
        $column.getInitializedVarName() = true;
    }

#if ( $column.hasPrimaryType() )
    /**
     * Setter method for $column.getVarName().
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to $column.getVarName()
     */
    public void $column.getSetMethod()($column.getJavaPrimaryType() newVal)
    {
        $column.getSetMethod()(new $column.getJavaType()(newVal));
    }

#end
    /**
     * Determines if the $column.getVarName() has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean ${column.getModifiedMethod()}()
    {
        return $column.getModifiedVarName();
    }

    /**
     * Determines if the $column.getVarName() has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean ${column.getInitializedMethod()}()
    {
        return $column.getInitializedVarName();
    }

#end
#set ( $keysDones = [] )
#foreach ($impKey in $importedKeys)
#set ( $importedTable = $impKey.getTable() )
#set ( $importedClass = "$importedTable.asBeanClass()" )
#if ( !$keysDones.contains( $importedClass ) )
#if ( $keysDones.add($importedClass) )#*squelch*##end
## I don't know what I should be doing right here ???
#end
#end


    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return #foreach ( $column in $columns )#if ( $velocityCount == 1 )$column.getModifiedVarName()#else
		|| $column.getModifiedVarName() #end #end;
    }
    
    /**
     * Determines if the {@code column} has been modified.
     * @param column
     * @return true if the field has been modified, false if the field has not been modified
     * @author guyadong
     */
    public boolean isModified(String column){
        if (null == column || "".equals(column)) {
            return false;
#foreach ( $column in $columns )
        } else if ("$column.getName()".equalsIgnoreCase(column) || "$column.getJavaName()".equalsIgnoreCase(column)) {
            return ${column.getModifiedMethod()}();
#end
        }
        return false;		
    }

    /**
     * Determines if the {@code column} has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     * @param column
     * @return true if the field has been initialized, false otherwise
     * @author guyadong
     */
    public boolean isInitialized(String column){
        if (null == column || "".equals(column)) {
            return false;
#foreach ( $column in $columns )
        } else if ("$column.getName()".equalsIgnoreCase(column) || "$column.getJavaName()".equalsIgnoreCase(column)) {
            return ${column.getInitializedMethod()}();
#end
        }
        return false;		
    }
    
    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
#foreach ( $column in $columns )
        $column.getModifiedVarName() = false;
#end
    }

    /**
     * set all field to null and reset all modification status
     * @see #resetIsModified() 
     */
    public ${beanClass} clean()
    {
        super.clean();
        resetIsModified();
        return this;
    }

}
