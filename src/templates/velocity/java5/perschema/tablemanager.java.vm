##$Id: tablemanager.java.vm,v 1.3 2007/11/12 14:06:30 kameleono Exp $
#parse( "header.include.vm" )
$codewriter.setCurrentJavaFilename($pkg, "TableManager.java")
package $pkg;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.List;
import java.util.Collection;
import java.util.concurrent.Callable;

import ${pkg}.exception.DAOException;

/**
 * Interface to handle database calls (save, load, count, etc...) for table.
 * @author guyadong
 */
public interface TableManager<B1 extends BaseBean<?>,B2 extends FullBean<B1>> {

    public abstract int countAll() throws DAOException;

    public abstract int countUsingTemplate( B1 bean) throws DAOException;

    public abstract int countUsingTemplate(B1 bean, int startRow, int numRows) throws DAOException;

    public abstract int countUsingTemplate(B1 bean, int startRow, int numRows, int searchType) throws DAOException;

    public abstract int countWhere(String where) throws DAOException;

    public abstract B2 createBean();

    public abstract B2[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException;

    public abstract List<B2> decodeResultSetAsList(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException;

    public abstract B2 decodeRow(ResultSet rs, B2 bean) throws DAOException;

    public abstract B2 decodeRow(ResultSet rs, int[] fieldList, B2 bean) throws DAOException;

    public abstract int deleteAll() throws DAOException;

    public abstract int deleteByWhere(String where) throws DAOException;

    public abstract int deleteUsingTemplate(B1 bean) throws DAOException;

    public abstract int deleteByPrimaryKey(B1 bean) throws DAOException;

    public abstract String[] getFieldNames();

    public abstract String[] getPrimarykeyNames();

    public abstract String getTableName();

    public abstract B2 insert(B2 bean) throws DAOException;

    public abstract B2[] insert(B2[] beans) throws DAOException;

    public abstract <T extends Collection<B2>> T insert(T beans) throws DAOException;

    public abstract B2[] insertAsTransaction(B2[] beans) throws DAOException;

    public abstract <T extends Collection<B2>> T insertAsTransaction(T beans) throws DAOException;

    public abstract B2[] loadAll() throws DAOException;

    public abstract B2[] loadAll(int startRow, int numRows) throws DAOException;

    public abstract List<B2> loadAllAsList() throws DAOException;

    public abstract List<B2> loadAllAsList(int startRow, int numRows) throws DAOException;

    public abstract B2[] loadByPreparedStatement(PreparedStatement ps) throws DAOException;

    public abstract B2[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException;

    public abstract B2[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException;

    public abstract List<B2> loadByPreparedStatementAsList(PreparedStatement ps) throws DAOException;

    public abstract List<B2> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList) throws DAOException;

    public abstract List<B2> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException;

    public abstract B2 loadByPrimaryKey(B1 bean) throws DAOException;
    
    public abstract boolean existsPrimaryKey(B1 bean) throws DAOException;

    public abstract B2[] loadByWhere(String where) throws DAOException;

    public abstract B2[] loadByWhere(String where, int[] fieldList) throws DAOException;

    public abstract B2[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException;

    public abstract List<B2> loadByWhereAsList(String where) throws DAOException;

    public abstract List<B2> loadByWhereAsList(String where, int[] fieldList) throws DAOException;

    public abstract List<B2> loadByWhereAsList(String where, int[] fieldList, int startRow, int numRows)throws DAOException;

    public abstract B2 loadUniqueUsingTemplate(B1 bean) throws DAOException;

    public abstract B2[] loadUsingTemplate(B1 bean) throws DAOException;

    public abstract B2[] loadUsingTemplate(B1 bean, int startRow, int numRows) throws DAOException;

    public abstract B2[] loadUsingTemplate(B1 bean, int startRow, int numRows, int searchType) throws DAOException;

    public abstract List<B2> loadUsingTemplateAsList(B1 bean) throws DAOException;

    public abstract List<B2> loadUsingTemplateAsList(B1 bean, int startRow, int numRows) throws DAOException;

    public abstract List<B2> loadUsingTemplateAsList(B1 bean, int startRow, int numRows, int searchType)throws DAOException;

    public abstract B2 metaDataDecodeRow(ResultSet rs) throws DAOException;

    public abstract <L extends TableListener> void registerListener(L listener);

    public abstract B2 save(B2 bean) throws DAOException;

    public abstract B2[] save(B2[] beans) throws DAOException;

    public abstract <T extends Collection<B2>> T saveAsTransaction(T beans) throws DAOException;

    public abstract B2[] saveAsTransaction(B2[] beans) throws DAOException;

    public abstract <T extends Collection<B2>> T save(T beans) throws DAOException;

    public abstract B2 update(B2 bean) throws DAOException;

    public abstract B2[] update(B2[] beans) throws DAOException;

    public abstract <T extends Collection<B2>> T update(T beans) throws DAOException;
    
    public abstract B2[] updateAsTransaction(B2[] beans) throws DAOException;

    public abstract <T extends Collection<B2>> T updateAsTransaction(T beans) throws DAOException;

    public abstract B2[] loadBySql(String sql, Object[] argList, int[] fieldList) throws DAOException;
    
    public abstract List<B2> loadBySqlAsList(String sql, Object[] argList, int[] fieldList) throws DAOException;
    /**
     * Run {@code Callable<T>} as a transaction.<br>
     * all exceptions but {@code SQLException} threw by {@code Callable<T>} is warpped into {@code RuntimeException}<br>
     * throw {@code NullPointerException} if {@code fun} be {@code null}<br>
     * @param <T>  type of return result
     * @param fun
     * @return
     * @throws DAOException
     */
    public abstract<T> T runAsTransaction(Callable<T> fun) throws DAOException;
    /**
     * Run {@code Runnable} as a transaction.no return
     * @param fun
     * @throws DAOException
     * @see #runAsTransaction(Runnable)
     */
    public abstract void runAsTransaction(final Runnable fun) throws DAOException;
    
    public abstract <T> T getReferencedBean(B2 bean,String fkName)throws DAOException;
    
    public abstract <T> T setReferencedBean(B2 bean,T beanToSet,String fkName)throws DAOException;
    
    public <T> T[] getImportedBeans(B2 bean,String fkName)throws DAOException;
    
    public <T> List<T> getImportedBeansAsList(B2 bean,String fkName)throws DAOException;
    
    public <T> T[] setImportedBeans(B2 bean,T[] importedBeans,String fkName)throws DAOException;
    
    public <T extends Collection<? extends FullBean<?>>> T setImportedBeans(B2 bean,T importedBeans,String fkName)throws DAOException;
}
