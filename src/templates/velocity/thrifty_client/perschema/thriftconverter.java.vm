#parse( "header.include.vm" )
#parse( "schema.include.vm" )
#if(!$codewriter.existsDependencyPackage() || !$codewriter.existsDependencySrc())
$codewriter.setSaveCurrentFile(false);
#stop
#end
#set ( $thriftSrc = $codewriter.getProperty("dependency.src"))
#set ( $thriftPackage = $codewriter.getProperty("dependency.package"))
#set ( $javaClassName = 'ThriftConverter' )
#set ( $ignorefields= $codewriter.getProperty('general.beanconverter.tonative.ignore') )
$codewriter.setCurrentJavaFilename("${gpkg}", "${javaClassName}.java")
package ${gpkg};

import java.lang.reflect.Field;
import okio.ByteString;

/**
 * {@link IBeanConverter} implementation classes for thrift class 
 * @author guyadong
 *
 */
public class $javaClassName implements Constant{
        private static void setField(Object obj,String name,Object value)
        {
            try {
                Field field = obj.getClass().getField(name);
                field.setAccessible(true);
                field.set(obj, value);
            } catch ( IllegalAccessException | NoSuchFieldException  e) {
                throw new RuntimeException(e);
            }
        }
#foreach ( $table in $tables )
#set ( $leftClass  = "${table.asBeanClassNSP()}" )
#if($codewriter.existsInDependencyPackage($leftClass))
#set ( $rightClass = "${codewriter.getDependencyPackage()}.${leftClass}" )
    /** {@link IBeanConverter} implementation for convert between {@link ${leftClass}} and thrift beans {@link ${rightClass}} */
    public static final IBeanConverter<${leftClass},${rightClass}> ${table.asConverterConstVar()}
            = new IBeanConverter.AbstractHandle<${leftClass},${rightClass}>(){
        @Override
        protected void doFromRight(${leftClass} left, ${rightClass} right) {
            $table.stateVarType() initialized = right.initialized;
#foreach ( $column in $table.columns )
            if(0L !=  $column.bitAndExpression("initialized")){
#if($column.isBinary())
                left.$column.getSetMethod()(right.${column.varName}.toByteArray());
#else
                left.$column.getSetMethod()(right.${column.varName});
#end
            }
#end
            left.setNew(right._new);
            left.setModified(right.modified);
        }

        @Override
        protected void doToRight(${leftClass} left, ${rightClass} right) {
#foreach ( $column in $table.columns )
#set($isIgnore = $ignorefields.contains($column.name))
#if( $isIgnore )// IGNORE field $column.fullName , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
#end
            if(left.${column.getInitializedMethod()}() ){
#if($column.isDate())
                setField(right, "$column.varName", left.${column.getGetMethod()}().getTime());
#elseif($column.isBinary())
                setField(right, "$column.varName", ByteString.of(left.${column.getGetMethod()}()));
#else
                setField(right, "$column.varName", left.${column.getGetMethod()}());                
#end
            }
#if( $isIgnore )*/
#end
#end
            setField(right,"_new",left.isNew());
            setField(right,"modified",left.getModified());
            setField(right,"initialized",left.getInitialized());

        }};
#end###if($codewriter.existsInDependencyPackage())
#end
}
