#parse( "header.include.vm" )
#parse( "schema.include.vm" )
#parse( "table.include.vm" )

#set ( $gpkg = $codewriter.getProperty('general.package') )
#set ( $subpkg=$db.engineAsSubPackage() )
#set ( $managerClassNSP = $table.asManagerClassNSP() )
#set ( $nativeClass = $table.asBeanClass() )
#set ( $beanClass = $table.asBeanClassNSP() )
#set ( $listenerClass = $table.asListenerClassNSP() )
#set ( $nativeListener = $table.asListenerClass() )

$codewriter.setCurrentJavaFilename("${gpkg}.${subpkg}", "${managerClassNSP}.java")
package ${gpkg}.${subpkg};

import java.util.List;
import java.util.Collection;
import java.util.concurrent.Callable;

import ${gpkg}.${beanClass};
import ${gpkg}.IBeanConverter;
import ${gpkg}.IDbConverter;
#foreach ($linkedTable in $linkedTables)
import ${gpkg}.${linkedTable.asBeanClassNSP()};
#end
import ${gpkg}.TableListener;

import ${pkg}.exception.DAOException;
#if ( $table.hasVersionColumn() )
import ${pkg}.exception.OptimisticLockingException;
#end
#foreach ($linkedTable in $linkedTables)
import ${linkedTable.getPackage()}.${linkedTable.asBeanClass()};
import ${linkedTable.getPackage()}.${linkedTable.asManagerClass()};
#end
import ${table.getPackage()}.${managerClass};
import ${table.getPackage()}.${nativeClass};
import ${table.getPackage()}.${nativeListener};

/**
 * Handles database calls (save, load, count, etc...) for the $tablename table.
#if ( $table.hasRemarks() )
 * Remarks: $table.getRemarks()
#end
 * @author guyadong
 */
public class $managerClassNSP 
{

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

#foreach ( $column in $columns ) #set ( $vcmo = $velocityCount - 1 )
    /**
     * Identify the $column.getName() field.
     */
    public static final int ID_$column.getConstName() = $vcmo;

#end
    /**
     * Tablename.
     */
		public static final String TABLE_NAME="$tablename";
    /**
     * Contains all the full fields of the $tablename table.
     */
    public static final String[] FULL_FIELD_NAMES =
    {
#foreach ( $column in $columns )
        #if ( $velocityCount > 1 ),#end"$column.getFullName()"
#end
    };

    /**
     * Contains all the fields of the $tablename table.
     */
    public static final String[] FIELD_NAMES =
    {
#foreach ( $column in $columns )
        #if ( $velocityCount > 1 ),#end"$column.getName()"
#end
    };
   /**
     * Contains all the primarykey fields of the $tablename table.
     */
    public static final String[] PRIMARYKEY_NAMES =
    {
#foreach ( $column in $primaryKeys )
        #if ( $velocityCount > 1 ),#end"$column.getName()"
#end
    };
    /**
     * Field that contains the comma separated fields of the $tablename table.
     */
    public static final String ALL_FULL_FIELDS = #foreach( $column in $columns )
#if ( $velocityCount > 1 )

                            + ",#else"#end$column.getFullName()"#end;

    /**
     * Field that contains the comma separated fields of the $tablename table.
     */
    public static final String ALL_FIELDS = #foreach( $column in $columns )
#if ( $velocityCount > 1 )

                            + ",#else"#end$column.getName()"#end;

    public static interface Action{
          void call($beanClass bean);
          $beanClass getBean();
     }

    /**
    * @return tableName
    */
    public String getTableName() {
        return TABLE_NAME;
    }

    /**
    * @return fieldNames
    */
    public String[] getFieldNames() {
        return FIELD_NAMES;
    }

    /**
    * @return primarykeyNames
    */
    public String[] getPrimarykeyNames() {
        return PRIMARYKEY_NAMES;
    }
    private $managerClass nativeManager = ${managerClass}.getInstance();
    private IDbConverter dbConverter = new DbConverter();
    private IBeanConverter<$beanClass,${nativeClass}> beanConverter;
    private static $managerClassNSP singleton = new $managerClassNSP();

    /**
     * Get the $managerClassNSP singleton.
     *
     * @return $managerClassNSP
     */
    public static $managerClassNSP getInstance()
    {
        return singleton;
    }
    
    public $managerClass getNativeManager() {
        return nativeManager;
    }

    public void setNativeManager($managerClass nativeManager) {
        this.nativeManager = nativeManager;
    }
    
    public IDbConverter getDbConverter() {
        return dbConverter;
    }

    public void setDbConverter(IDbConverter dbConverter) {
        if( null == dbConverter)
            throw new NullPointerException();
        this.dbConverter = dbConverter;
        this.beanConverter = this.dbConverter.get${beanClass}Converter();
    }
#if ( $table.countPrimaryKeys() > 0 )
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

#set ( $keys = "" )
#set ( $sql = "" )
    /**
     * Loads a {@link $beanClass} from the $tablename using primary key fields.
     *
#foreach ( $pk in $primaryKeys )
     * @param $pk.getVarName() $pk.getJavaType() - PK# $velocityCount
#if ( $velocityCount > 1 )#set( $keys = "$keys, " )#end
#set ( $keys = "$keys${pk.getJavaType()} $pk.getVarName()" )
#end     
     * @return a unique $beanClass or {@code null} if not found
     */
    //1
    public $beanClass loadByPrimaryKey($keys)
    {
        try{
            return this.beanConverter.fromNative(nativeManager.loadByPrimaryKey(#join($primaryKeys "$e.getVarName()" ',')));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * Loads a {@link $beanClass} from the $tablename using primary key fields of {@code bean}.
     * when you don't know which is primary key of table,you can use the method.
     * @author guyadong
     * @param bean the {@link $beanClass} with primary key fields
     * @return a unique {@link $beanClass} or {@code null} if not found
     * @see {@link #loadByPrimaryKey($keys)}
     */
    //1.2
    public $beanClass loadByPrimaryKey(${beanClass} bean)
    {
        try{
            return this.beanConverter.fromNative(this.nativeManager.loadByPrimaryKey(this.beanConverter.toNative(bean)));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
#set( $keys = "" )    
    /**
     * Returns true if this $tablename contains row with primary key fields.
     * @author guyadong
#foreach ( $pk in $primaryKeys )
     * @param $pk.getVarName() $pk.getJavaType() - PK# $velocityCount
## part 1
#if ( $velocityCount > 1 )#set( $keys = "$keys, " )#set ( $sql = "$sql and " )#end
#set ( $keys = "$keys${pk.getJavaType()} $pk.getVarName()" )
## part 2
#set ( $sql = "$sql$pk.getName()=?" )
#end     
     * @see #loadByPrimaryKey($keys)
     */
    //1.3
    public boolean existsPrimaryKey($keys)
    {
        return null!=loadByPrimaryKey(#join($primaryKeys "$e.getVarName()" ',') );

    }

    /**
     * Returns true if this $tablename contains row specified by primary key fields of {@link $beanClass}.<br>
     * when you don't know which is primary key of table,you can use the method.
     * @author guyadong
     * @param bean the {@link $beanClass} with primary key fields
     * @return 
     * @see {@link #loadByPrimaryKey(${beanClass} bean)}
     */
    //1.4
    //@Override
    public boolean existsPrimaryKey(${beanClass} bean)
    {
        return null!=loadByPrimaryKey(bean);

    }
    
#set ( $sql = "" )
    /**
     * Delete row according to its primary keys.
     *
#foreach ( $pk in $primaryKeys )
     * @param $pk.getVarName() $pk.getJavaType() - PK# $velocityCount
## part 1     
#if ( $velocityCount > 1 )#set ( $sql = "$sql and " )#end
#set ( $sql = "$!sql$pk.getName()=?" )     
#end     
     * @return the number of deleted rows
     */
    //2
    public int deleteByPrimaryKey($keys)
    {
        try
        {
            return nativeManager.deleteByPrimaryKey(#join($primaryKeys "$e.getVarName()" ','));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    /**
     * Delete row according to Primary Key fileds of the parameter{@code bean},
     * when you don't know which is primary key of table,you can use the method.
     * @author guyadong
     * @param bean the $beanClass with primary key fields
     * @return the number of deleted rows
     * @see {@link #deleteByPrimaryKey($keys)}
     */
    //2.1
    public int deleteByPrimaryKey(${beanClass} bean)
    {
        try{
            return this.nativeManager.deleteByPrimaryKey(this.beanConverter.toNative(bean));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
#else
    public $beanClass loadByPrimaryKey(${beanClass} bean)
    {
        throw new UnsupportedOperationException();
    }
    public boolean existsPrimaryKey(${beanClass} bean)
    {
        throw new UnsupportedOperationException();
    }
    public int deleteByPrimaryKey(${beanClass} bean)
    {
        throw new UnsupportedOperationException();
    }
#end ## $table.countPrimaryKeys() > 0
## ======================================================
## xImportedKeys template
## ======================================================
#####################
#macro(foreachImportedTables $do $separator $newline)
#set ( $m_count = 0 ) 
#foreach ($m_importedTable in $importedTables)
#set ( $m_importedClass = "$m_importedTable.asBeanClassNSP()" )
#set ( $m_importedNative = "$m_importedTable.asBeanClass()" )
#set ( $m_importedClassManager = "$m_importedTable.asManagerClass()" )
#foreach( $m_fkName in $m_importedTable.getFkMapNames($table.name) )
#set($m_count = $m_count + 1)
#set ( $m_columnsOfFk = $m_importedTable.getForeignKeysByFkName($m_fkName) )#if($m_count > 1 )$separator#end$do#if(!$newline.empty)

#end#end#end
#end
#######################
#macro (foreachForeignTables $do $separator $newline)
#set ( $m_count = 0 ) 
#foreach($m_foreignTable in $foreignTables)
#set ( $m_foreignClass = "$m_foreignTable.asBeanClassNSP()" )
#set ( $m_foreignNative = "$m_foreignTable.asBeanClass()" )
#set ( $m_foreignClassManager = "$m_foreignTable.asManagerClass()" )
#foreach( $m_fkName in $table.getFkMapNames($m_foreignTable.name) )
#set($m_count = $m_count + 1)
#set ( $m_columnsOfFk = $table.getForeignKeysByFkName($m_fkName) )#if($m_count > 1)$separator#end$do#if(!$newline.empty)

#end#end#end
#end

#if ($table.hasImportedKeys())
    //////////////////////////////////////
    // IMPORT KEY GENERIC METHOD
    //////////////////////////////////////
    /**
     * Retrieves imported T objects by fkName.<br>
     * @param <T>
     * <ul>
    #foreachImportedTables(" *     <li> ${m_importedTable.asImpArg($m_fkName)} -> ${m_importedClass}</li>" '    ' 'true')
     * </ul>
     * @param bean the {@link $beanClass} object to use
     * @param fkName valid values: #foreachImportedTables("${m_importedTable.asImpArg($m_fkName)}" ',' '')

     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     */
    //@Override
    public <T> T[] getImportedBeans($beanClass bean,String fkName){
        try {
            return nativeManager.getImportedBeans(($nativeClass) this.beanConverter.toNative(bean),fkName);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    /**
     * Retrieves imported T objects by fkName.<br>
     * @param <T>
     * <ul>
    #foreachImportedTables(" *     <li> ${m_importedTable.asImpArg($m_fkName)} -> ${m_importedClass}</li>" '    ' 'true')
     * </ul>
     * @param bean the {@link $beanClass} object to use
     * @param fkName valid values: #foreachImportedTables("${m_importedTable.asImpArg($m_fkName)}" ',' '')

     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     */
    //@Override
    public <T> List<T> getImportedBeansAsList($beanClass bean,String fkName){
        try {
            return nativeManager.getImportedBeansAsList(($nativeClass) this.beanConverter.toNative(bean),fkName);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    /**
     * Set the T objects as imported beans of bean object by fkName.<br>
     * @param <T>
     * 
     * <ul>
    #foreachImportedTables(" *     <li> ${m_importedTable.asImpArg($m_fkName)} -> ${m_importedClass}</li>" '    ' 'true')
     * </ul>
     * @param bean the {@link $beanClass} object to use
     * @param importedBeans the ${importedClass} array to associate to the {@link $beanClass}
     * @param fkName valid values: #foreachImportedTables("${m_importedTable.asImpArg($m_fkName)}" ',' '')

     * @return importedBeans always
     */
    //@Override
    public <T> T[] setImportedBeans($beanClass bean,T[] importedBeans,String fkName){
        try {
            return nativeManager.setImportedBeans(($nativeClass) this.beanConverter.toNative(bean),importedBeans,fkName);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    /**
     * Set the importedBeans associates to the bean by fkName<br>
     * @param <T>
     * <ul>
    #foreachImportedTables(" *     <li> ${m_importedTable.asImpArg($m_fkName)} -> ${m_importedClass} Collection</li>" '    ' 'true')
     * </ul>
     * @param bean the {@link $beanClass} object to use
     * @param importedBeans the <T> object to associate to the {@link $beanClass}
     * @param fkName valid values: #foreachImportedTables("${m_importedTable.asImpArg($m_fkName)}" ',' '')

     * @return importedBeans always
     */
    @SuppressWarnings("unchecked")
    //@Override
    public <T extends Collection<$beanClass>> T setImportedBeans($beanClass bean,T importedBeans,String fkName){
        try {        	
            return (T) this.beanConverter.fromNative(nativeManager.setImportedBeans(($nativeClass) this.beanConverter.toNative(bean),this.beanConverter.toNative(importedBeans),fkName));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
#else

    //@Override
    public <T> T[] getImportedBeans($beanClass bean,String fkName){
        throw new UnsupportedOperationException();
    }
    //@Override
    public <T> List<T> getImportedBeansAsList($beanClass bean,String fkName){
        throw new UnsupportedOperationException();
    }
    //@Override
    public <T> T[] setImportedBeans($beanClass bean,T[] importedBeans,String fkName){
        throw new UnsupportedOperationException();
    }    
    //@Override
    public <T extends Collection<$beanClass>> T setImportedBeans($beanClass bean,T importedBeans,String fkName){
        throw new UnsupportedOperationException();
    }
#end ## $table.hasImportedKeys()

#foreach ($importedTable in $importedTables)
#if ( $velocityCount == 1 )

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
#end
#set ( $importedClass = "$importedTable.asBeanClassNSP()" )
#set ( $importedNative = "$importedTable.asBeanClass()" )
#set ( $importedClassManager = "$importedTable.asManagerClass()" )
#foreach( $fkName in $importedTable.getFkMapNames($table.name) )
#set ( $columnsOfFk = $importedTable.getForeignKeysByFkName($fkName) )
    /**
     * Retrieves the {@link $importedClass} object from the #join($columnsOfFk "$e.fullName" ",") field.<BR>
     * FK_NAME : $fkName 
     * @param bean the {@link $beanClass}
     * @return the associated {@link $importedClass} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.1 GET IMPORTED
    public $importedClass[] ${importedTable.getImportedBeansGetMethod($fkName)}($beanClass bean)
    {
        try {        	
            return this.dbConverter.get${importedClass}Converter().fromNative(nativeManager.${importedTable.getImportedBeansGetMethod($fkName)}(($nativeClass) this.beanConverter.toNative(bean)));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * Retrieves the {@link $importedClass} object from #join($columnsOfFk "$e.fullName" ",") field.<BR>
     * FK_NAME:$fkName
     * @param bean the {@link $beanClass}
     * @return the associated {@link $importedClass} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.2 GET IMPORTED
    public List<$importedClass> ${importedTable.getImportedBeansGetMethod($fkName)}AsList($beanClass bean)
    {
        try {        	
            return this.dbConverter.get${importedClass}Converter().fromNative(nativeManager.${importedTable.getImportedBeansGetMethod($fkName)}AsList(($nativeClass) this.beanConverter.toNative(bean)));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * set  the {@link $importedClass} object array associate to $beanClass by the #join($columnsOfFk "$e.fullName" ",") field.<BR>
     * FK_NAME : $fkName 
     * @param bean the referenced {@link $beanClass}
     * @param importedBeans imported beans from $importedTable.name
     * @return importedBeans always
     * @see {@link ${importedClassManager}#$importedTable.getReferencedVarSetMethod($fkName)($importedClass, $beanClass)
     */
    //3.3 SET IMPORTED
    public $importedClass[] ${importedTable.getImportedBeansSetMethod($fkName)}($beanClass bean , $importedClass[] importedBeans)
    {
        try {        	
            return this.dbConverter.get${importedClass}Converter().fromNative(this.nativeManager.${importedTable.getImportedBeansSetMethod($fkName)}(
                ($nativeClass) this.beanConverter.toNative(bean),
                ($importedNative[])this.dbConverter.get${importedClass}Converter().toNative(importedBeans)
                ));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * set  the {@link $importedClass} object collection associate to $beanClass by the #join($columnsOfFk "$e.fullName" ",") field.<BR>
     * FK_NAME:$fkName
     * @param bean the referenced {@link $beanClass} 
     * @param importedBeans imported beans from $importedTable.name 
     * @return importedBeans always
     * @see {@link ${importedClassManager}#$importedTable.getReferencedVarSetMethod($fkName)($importedClass, $beanClass)
     */
    //3.4 SET IMPORTED
    @SuppressWarnings("unchecked")
    public <T extends Collection<$importedClass>> T ${importedTable.getImportedBeansSetMethod($fkName)}($beanClass bean , T importedBeans)
    {
        try {        	
            return (T) this.dbConverter.get${importedClass}Converter().fromNative(nativeManager.${importedTable.getImportedBeansSetMethod($fkName)}(
                ($nativeClass) this.beanConverter.toNative(bean),
                this.dbConverter.get${importedClass}Converter().toNative(importedBeans)
                ));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

#end
#end


## ======================================================
## only xImportedKeys template
## ======================================================
#if( $table.hasForeignTables() || $table.hasImportedTables() )
    /**
     * Save the $beanClass bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link $beanClass} bean to be saved
    #foreachForeignTables(" * @param $table.asRefArg($m_fkName) the {@link $m_foreignClass} bean referenced by {@link $beanClass} " '    ' 'true')
    #foreachImportedTables(" * @param $m_importedTable.asImpArg($m_fkName) the {@link $m_importedClass} bean refer to {@link $beanClass} " '    ' 'true' )
     * @return the inserted or updated {@link $beanClass} bean
     */
    //3.5 SYNC SAVE 
    public $beanClass save($beanClass bean
        #foreachForeignTables( ", $m_foreignClass $table.asRefArg($m_fkName) " '' '')

        #foreachImportedTables( ", $m_importedClass[] $m_importedTable.asImpArg($m_fkName) " '' ''))
    {
        try{
            return this.beanConverter.fromNative(nativeManager.save(($nativeClass)this.beanConverter.toNative(bean)
            #foreachForeignTables( ", ($m_foreignNative)this.dbConverter.get${m_foreignClass}Converter().toNative($table.asRefArg($m_fkName)) " '' '')
            #foreachImportedTables( ", ($m_importedNative[])this.dbConverter.get${m_importedClass}Converter().toNative($m_importedTable.asImpArg($m_fkName))  " '' '')));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    } 
    /**
     * Transaction version for sync save
     * @see {@link #save($beanClass #foreachForeignTables( ", $m_foreignClass " '' '')#foreachImportedTables( ", $m_importedClass[] " '' ''))}
     */
    //3.6 SYNC SAVE AS TRANSACTION
    public $beanClass saveAsTransaction(final $beanClass bean
        #foreachForeignTables( ",final $m_foreignClass $table.asRefArg($m_fkName) " '' '')

        #foreachImportedTables( ",final $m_importedClass[] $m_importedTable.asImpArg($m_fkName) " '' ''))
    {
        return this.runAsTransaction(new Callable<$beanClass>(){
            @Override
            public $beanClass call() throws Exception {
                return save(bean #foreachForeignTables( ", $table.asRefArg($m_fkName) " '' '')#foreachImportedTables( ", $m_importedTable.asImpArg($m_fkName) " '' ''));
            }});
    }
#if( $table.hasImportedTables() )
    /**
     * Save the $beanClass bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link $beanClass} bean to be saved
    #foreachForeignTables(" * @param $table.asRefArg($m_fkName) the {@link $m_foreignClass} bean referenced by {@link $beanClass} " '    ' 'true')
    #foreachImportedTables(" * @param $m_importedTable.asImpArg($m_fkName) the {@link $m_importedClass} bean refer to {@link $beanClass} " '    ' 'true' )
     * @return the inserted or updated {@link $beanClass} bean
     */
    //3.7 SYNC SAVE 
    public $beanClass save($beanClass bean
        #foreachForeignTables( ", $m_foreignClass $table.asRefArg($m_fkName) " '' '')

        #foreachImportedTables( ", Collection<$m_importedClass> $m_importedTable.asImpArg($m_fkName) " '' ''))
    {
        try{
            return this.beanConverter.fromNative(nativeManager.save(($nativeClass)this.beanConverter.toNative(bean)
            #foreachForeignTables( ", ($m_foreignNative)this.dbConverter.get${m_foreignClass}Converter().toNative($table.asRefArg($m_fkName)) " '' '')
            #foreachImportedTables( ", (Collection<$m_importedNative>)this.dbConverter.get${m_importedClass}Converter().toNative($m_importedTable.asImpArg($m_fkName))  " '' '')));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }   
    /**
     * Transaction version for sync save
     * @see {@link #save($beanClass #foreachForeignTables( ", $m_foreignClass " '' '')#foreachImportedTables( ", Collection " '' ''))}
     */
    //3.8 SYNC SAVE AS TRANSACTION
    public $beanClass saveAsTransaction(final $beanClass bean
        #foreachForeignTables( ",final $m_foreignClass $table.asRefArg($m_fkName) " '' '')

        #foreachImportedTables( ",final  Collection<$m_importedClass> $m_importedTable.asImpArg($m_fkName) " '' '')) throws DAOException
    {
        return this.runAsTransaction(new Callable<$beanClass>(){
            @Override
            public $beanClass call() throws Exception {
                return save(bean #foreachForeignTables( ", $table.asRefArg($m_fkName) " '' '')#foreachImportedTables( ", $m_importedTable.asImpArg($m_fkName) " '' ''));
            }});
    }
#end ## $table.hasImportedTables()
#end ## $table.hasForeignTables() || $table.hasImportedTables()
## ======================================================
## xForeignKeys template
## ======================================================
#if ($table.hasForeignKeys())
    //////////////////////////////////////
    // FOREIGN KEY GENERIC METHOD
    //////////////////////////////////////
    private static final  java.util.HashMap<String, Class<?>[]> REF_METHODS=new java.util.HashMap<String,Class<?>[]>(){
        private static final long serialVersionUID = 1L;
    {        
#foreach($foreignTable in $foreignTables)
#set ( $foreignClass = "$foreignTable.asBeanClassNSP()" )
#set ( $foreignNative = "$foreignTable.asBeanClass()" )
#set ( $foreignClassManager = "$foreignTable.asManagerClass()" )
#foreach( $fkName in $table.getFkMapNames($foreignTable.name) )
#set ( $columnsOfFk = $table.getForeignKeysByFkName($fkName) )
    put("${table.asRefArg($fkName)}",new Class<?>[]{${foreignClass}.class,${foreignNative}.class});
#end
#end
    }} ;
    /**
     * Retrieves the bean object referenced by fkName.<br>
     * @param <T>
     * <ul>
    #foreachForeignTables(" *     <li> ${table.asRefArg($m_fkName)} -> ${m_foreignClass}</li>" '    ' 'true')
     * </ul>
     * @param bean the {@link $beanClass} object to use
     * @param fkName valid values: #foreachForeignTables("${table.asRefArg($m_fkName)}" ',' '')

     * @return the associated <T> bean or {@code null} if {@code bean} or {@code beanToSet} is {@code null}
     */
    //@Override
    public <T> T getReferencedBean($beanClass bean,String fkName){
        try {
            return this.nativeManager.getReferencedBean(($nativeClass) this.beanConverter.toNative(bean), fkName);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    /**
     * Associates the {@link $beanClass} object to the bean object by fkName field.<br>
     * 
     * @param <T>
     * <ul>
    #foreachForeignTables(" *     <li> ${table.asRefArg($m_fkName)} -> ${m_foreignClass}</li>" '    ' 'true')
     * </ul>
     * @param bean the {@link $beanClass} object to use
     * @param beanToSet the <T> object to associate to the {@link $beanClass}
     * @param fkName valid values: #foreachForeignTables("${table.asRefArg($m_fkName)}" ',' '')

     * @return the associated <T> bean or {@code null} if {@code bean} or {@code beanToSet} is {@code null}
     */
    @SuppressWarnings("unchecked")
    //@Override
    public <T> T setReferencedBean($beanClass bean,T beanToSet,String fkName){
        try {
            if(null == beanToSet) return null;
            Class<?>[] types=REF_METHODS.get(fkName);
            if(null == types)
                throw new IllegalArgumentException(String.format("invalid fkName :%s",fkName));
            @SuppressWarnings("rawtypes")
			IBeanConverter converter=this.dbConverter.getBeanConverter(beanToSet.getClass(),types[1]);
            if( null == converter )
                throw new IllegalArgumentException(String.format("invalid type of 'beanToSet' :%s",beanToSet.getClass().getName()));
            return (T) converter.fromNative(this.nativeManager.setReferencedBean(($nativeClass) this.beanConverter.toNative(bean), converter.toNative(beanToSet), fkName));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
#else

    //@Override
    public <T> T getReferencedBean($beanClass bean,String fkName){
        throw new UnsupportedOperationException();
    }
    //@Override
    public <T> T setReferencedBean($beanClass bean,T beanToSet,String fkName){
        throw new UnsupportedOperationException();
    }
#end ## $table.hasForeignKeys()
    
#foreach ($foreignTable in $foreignTables)
#if ( $velocityCount == 1 )
    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////

#end
#set ( $foreignClass = "$foreignTable.asBeanClassNSP()" )
#set ( $foreignNative = "$foreignTable.asBeanClass()" )
#set ( $foreignClassManager = "$foreignTable.asManagerClass()" )
#foreach( $fkName in $table.getFkMapNames($foreignTable.name) )
#set ( $columnsOfFk = $table.getForeignKeysByFkName($fkName) )

    /**
     * Retrieves the {@link $foreignClass} object referenced by #join($columnsOfFk "{@link $beanClass#$e.getGetMethod()}()" ",") field.<br>
     * FK_NAME : $fkName
     * @param bean the {@link $beanClass}
     * @return the associated {@link $foreignClass} bean or {@code null} if {@code bean} is {@code null}
     */
    //3.2 GET REFERENCED VALUE
    public $foreignClass $table.getReferencedVarGetMethod($fkName)($beanClass bean)
    {
        try{
            return this.dbConverter.get${foreignClass}Converter().fromNative(this.nativeManager.$table.getReferencedVarGetMethod($fkName)(this.beanConverter.toNative(bean)));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
        
    }

    /**
     * Associates the {@link $beanClass} object to the {@link $foreignClass} object by #join($columnsOfFk "{@link $beanClass#$e.getGetMethod()}()" ",") field.
     *
     * @param bean the {@link $beanClass} object to use
     * @param beanToSet the {@link $foreignClass} object to associate to the {@link $beanClass}
     * @return the associated {@link $foreignClass} bean or {@code null} if {@code bean} or {@code beanToSet} is {@code null}
     * @throws Exception
     */
    //5.2 SET REFERENCED 
    public $foreignClass $table.getReferencedVarSetMethod($fkName)($beanClass bean, $foreignClass beanToSet) throws DAOException
    {
        if(null == bean || null == beanToSet) return null;
#foreach ( $fk in $columnsOfFk ) 
        bean.$fk.getSetMethod()(beanToSet.${fk.getForeignColumn().getGetMethod()}());
#end 
        bean.$table.getReferencedVarSetMethod($fkName)(beanToSet);
        return this.dbConverter.get${foreignClass}Converter().fromNative(${foreignClassManager}.getInstance().save(($foreignNative)this.dbConverter.get${foreignClass}Converter().toNative(beanToSet)));
    }
#end
#end

    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from $tablename.
     *
     * @return an array of $managerClass bean
     */
    //5
    public $beanClass[] loadAll()
    {
        try{
            return this.beanConverter.fromNative(this.nativeManager.loadUsingTemplate(null));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    /**
     * Loads each row from $tablename and dealt with action.
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
     */
    //5-1
    public int loadAll(Action action)
    {
        return this.loadUsingTemplate(null,action);
    }
    /**
     * Loads all the rows from $tablename.
     *
     * @return a list of $beanClass bean
     */
    //5-2
    public List<$beanClass> loadAllAsList()
    {
        return this.loadUsingTemplateAsList(null);
    }


    /**
     * Loads the given number of rows from $tablename, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of $managerClass bean
     */
    //6
    public $beanClass[] loadAll(int startRow, int numRows)
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }
    /**
     *  Loads the given number of rows from $tablename, given the start row and dealt with action.
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
     */
    //6-1
    public int loadAll(int startRow, int numRows,Action action)
    {
        return this.loadUsingTemplate(null, startRow, numRows,action);
    }
    /**
     * Loads the given number of rows from $tablename, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return a list of $managerClass bean
     */
    //6-2
    public List<$beanClass> loadAllAsList(int startRow, int numRows)
    {
        return this.loadUsingTemplateAsList(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of $beanClass given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting $beanClass table
     */
    //7
    public $beanClass[] loadByWhere(String where)
    {
        return this.loadByWhere(where, (int[])null);
    }
    /**
     * Retrieves a list of $beanClass given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting $beanClass table
     */
    //7
    public List<$beanClass> loadByWhereAsList(String where)
    {
        return this.loadByWhereAsList(where, null);
    }
    /**
     * Retrieves each row of $beanClass given a sql 'where' clause and dealt with action.
     * @param where the sql 'where' clause
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
     */
    //7-1
    public int loadByWhere(String where,Action action)
    {
        return this.loadByWhere(where, null,action);
    }
    /**
     * Retrieves an array of $beanClass given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting $beanClass table
     */
    //8
    public $beanClass[] loadByWhere(String where, int[] fieldList)
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }


    /**
     * Retrieves a list of $beanClass given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting $beanClass table
     */
    //8
    public List<$beanClass> loadByWhereAsList(String where, int[] fieldList)
    {
        return this.loadByWhereAsList(where, fieldList, 1, -1);
    }
    /**
     * Retrieves each row of $beanClass given a sql where clause, and a list of fields,
     * and dealt with action.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     */
    //8-1
    public int loadByWhere(String where, int[] fieldList,Action action)
    {
        return this.loadByWhere(where, fieldList, 1, -1,action);
    }

    /**
     * Retrieves an array of $beanClass given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting $beanClass table
     */
    //9
    public $beanClass[] loadByWhere(String where, int[] fieldList, int startRow, int numRows)
    {
        return ($beanClass[]) this.loadByWhereAsList(where, fieldList, startRow, numRows).toArray(new $beanClass[0]);
    }
    /**
     * Retrieves each row of  $beanClass given a sql where clause and a list of fields, and startRow and numRows,
     * and dealt wity action.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     */
    //9-1
    public int loadByWhere(String where, int[] fieldList, int startRow, int numRows,Action action)
    {
        return this.loadByWhereForAction(where, fieldList, startRow, numRows,action);
    }

    /**
     * Retrieves a list of $beanClass given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting $beanClass table
     */
    //9-2
    public List<$beanClass> loadByWhereAsList(String where, int[] fieldList, int startRow, int numRows)
    {
        try{
            return this.beanConverter.fromNative(this.nativeManager.loadByWhereAsList(where,fieldList,startRow,numRows));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    /**
     * Retrieves each row of $beanClass given a sql where clause and a list of fields, and startRow and numRows,
     * and dealt wity action
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     */
    //9-3
    public int loadByWhereForAction(String where, int[] fieldList, int startRow, int numRows,Action action)
    {
        try{
            return this.nativeManager.loadByWhereForAction(where,fieldList,startRow,numRows,this.toNative(action));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * Deletes all rows from $tablename table.
     * @return the number of deleted rows.
     */
    //10
    public int deleteAll()
    {
        return this.deleteByWhere("");
    }

    /**
     * Deletes rows from the $tablename table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    //11
    public int deleteByWhere(String where)
    {
        try{
            return this.nativeManager.deleteByWhere(where);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the $beanClass bean into the database.
     *
     * @param bean the $beanClass bean to be saved
     * @return the inserted or updated bean
     */
    //12
    public $beanClass save($beanClass bean)
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the $beanClass bean into the database.
     *
     * @param bean the $beanClass bean to be saved
     * @return the inserted bean
     */
    //13
    public $beanClass insert($beanClass bean)
    {
        try{
            return this.beanConverter.fromNative(this.nativeManager.insert(($nativeClass)this.beanConverter.toNative(bean)));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * Update the $beanClass bean record in the database according to the changes.
     *
     * @param bean the $beanClass bean to be updated
     * @return the updated bean
     */
    //14
    public $beanClass update($beanClass bean)
    {
        try{
            return this.beanConverter.fromNative(this.nativeManager.update(($nativeClass)this.beanConverter.toNative(bean)));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * Saves an array of $beanClass beans into the database.
     *
     * @param beans the $beanClass bean table to be saved
     * @return the saved $beanClass array.
     */
    //15
    public $beanClass[] save($beanClass[] beans)
    {
        for ($beanClass bean : beans) 
        {
            this.save(bean);
        }
        return beans;
    }

    /**
     * Saves a list of $beanClass beans into the database.
     *
     * @param beans the $beanClass bean table to be saved
     * @return the saved $beanClass array.
     */
    //15-2
    public <T extends Collection<$beanClass>>T save(T beans)
    {
        for ($beanClass bean : beans) 
        {
            this.save(bean);
        }
        return beans;
    }
    /**
     * Saves an array of $beanClass beans as transaction into the database.
     *
     * @param beans the $beanClass bean table to be saved
     * @return the saved $beanClass array.
     * @see #save($beanClass[])
     */
    //15-3
    public $beanClass[] saveAsTransaction(final $beanClass[] beans) {
        return this.runAsTransaction(new Callable<$beanClass[]>(){
            @Override
            public $beanClass[] call() throws Exception {
                return save(beans);
            }});
    }
    /**
     * Saves a list of $beanClass beans as transaction into the database.
     *
     * @param beans the $beanClass bean table to be saved
     * @return the saved $beanClass array.
     * @see #save(List)
     */
    //15-4
    public <T extends Collection<$beanClass>> T saveAsTransaction(final T beans){
        return this.runAsTransaction(new Callable<T>(){
            @Override
            public T call() throws Exception {
                return save(beans);
            }});
    }
    /**
     * Insert an array of $beanClass beans into the database.
     *
     * @param beans the $beanClass bean table to be inserted
     * @return the saved $beanClass array.
     */
    //16
    public $beanClass[] insert($beanClass[] beans)
    {
        return this.save(beans);
    }

    /**
     * Insert a list of $beanClass beans into the database.
     *
     * @param beans the $beanClass bean table to be inserted
     * @return the saved $beanClass array.
     */
    //16-2
    public <T extends Collection<$beanClass>> T insert(T beans)
    {
        return this.save(beans);
    }
    
    /**
     * Insert an array of $beanClass beans as transaction into the database.
     *
     * @param beans the $beanClass bean table to be inserted
     * @return the saved $beanClass array.
     * @see #saveAsTransaction($beanClass[])
     */
    //16-3
    public $beanClass[] insertAsTransaction($beanClass[] beans)
    {
        return this.saveAsTransaction(beans);
    }

    /**
     * Insert a list of $beanClass beans as transaction into the database.
     *
     * @param beans the $beanClass bean table to be inserted
     * @return the saved $beanClass array.
     * @see #saveAsTransaction(List)
     */
    //16-4
    public <T extends Collection<$beanClass>> T insertAsTransaction(T beans)
    {
        return this.saveAsTransaction(beans);
    }


    /**
     * Updates an array of $beanClass beans into the database.
     *
     * @param beans the $beanClass bean table to be inserted
     * @return the saved $beanClass array.
     */
    //17
    public $beanClass[] update($beanClass[] beans)
    {
        return this.save(beans);
    }

    /**
     * Updates a list of $beanClass beans into the database.
     *
     * @param beans the $beanClass bean table to be inserted
     * @return the saved $beanClass array.
     */
    //17-2
    public <T extends Collection<$beanClass>> T update(T beans)
    {
        return this.save(beans);
    }
    
    /**
     * Updates an array of $beanClass beans as transaction into the database.
     *
     * @param beans the $beanClass bean table to be inserted
     * @return the saved $beanClass array.
     * @see #saveAsTransaction($beanClass[])
     */
    //17-3
    public $beanClass[] updateAsTransaction($beanClass[] beans)
    {
        return this.saveAsTransaction(beans);
    }

    /**
     * Updates a list of $beanClass beans as transaction into the database.
     *
     * @param beans the $beanClass bean table to be inserted
     * @return the saved $beanClass array.
     * @see #saveAsTransaction(List)
     */
    //17-4
    public <T extends Collection<$beanClass>> T updateAsTransaction(T beans)
    {
        return this.saveAsTransaction(beans);
    }
    
    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique $beanClass bean from a template one giving a c
     *
     * @param bean the $beanClass bean to look for
     * @return the bean matching the template
     */
    //18
    public $beanClass loadUniqueUsingTemplate(${beanClass} bean)
    {
        try{
            return this.beanConverter.fromNative(this.nativeManager.loadUniqueUsingTemplate(($nativeClass)this.beanConverter.toNative(bean)));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
     }

    /**
     * Loads an array of $beanClass from a template one.
     *
     * @param bean the $beanClass template to look for
     * @return all the $beanClass matching the template
     */
    //19
    public $beanClass[] loadUsingTemplate(${beanClass} bean)
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }
    /**
     * Loads each row from a template one and dealt with action.
     *
     * @param bean the $beanClass template to look for
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     */
    //19-1
    public int loadUsingTemplate(${beanClass} bean,Action action)
    {
        return this.loadUsingTemplate(bean, 1, -1,action);
    }

    /**
     * Loads a list of $beanClass from a template one.
     *
     * @param bean the $beanClass template to look for
     * @return all the $beanClass matching the template
     */
    //19-2
    public List<$beanClass> loadUsingTemplateAsList(${beanClass} bean)
    {
        return this.loadUsingTemplateAsList(bean, 1, -1);
    }

    /**
     * Loads an array of $beanClass from a template one, given the start row and number of rows.
     *
     * @param bean the $beanClass template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the $beanClass matching the template
     */
    //20
    public $beanClass[] loadUsingTemplate(${beanClass} bean, int startRow, int numRows)
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }
    /**
     * Loads each row from a template one, given the start row and number of rows and dealt with action.
     *
     * @param bean the $beanClass template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     */
    //20-1
    public int loadUsingTemplate(${beanClass} bean, int startRow, int numRows,Action action)
    {
        return this.loadUsingTemplate(bean, null, startRow, numRows,SEARCH_EXACT, action);
    }
    /**
     * Loads a list of $beanClass from a template one, given the start row and number of rows.
     *
     * @param bean the $beanClass template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the $beanClass matching the template
     */
    //20-2
    public List<$beanClass> loadUsingTemplateAsList(${beanClass} bean, int startRow, int numRows)
    {
        return this.loadUsingTemplateAsList(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of $beanClass from a template one, given the start row and number of rows.
     *
     * @param bean the $beanClass template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the $beanClass matching the template
     */
    //20-3
    public $beanClass[] loadUsingTemplate(${beanClass} bean, int startRow, int numRows, int searchType)
    {
    	return ($beanClass[])this.loadUsingTemplateAsList(bean, startRow, numRows, searchType).toArray(new $beanClass[0]);
    }

    /**
     * Loads a list of $beanClass from a template one, given the start row and number of rows.
     *
     * @param bean the $beanClass template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the $beanClass matching the template
     */
    //20-4
    public List<$beanClass> loadUsingTemplateAsList(${beanClass} beanBase, int startRow, int numRows, int searchType)
    {
        try{
            return this.beanConverter.fromNative(this.nativeManager.loadUsingTemplateAsList(($nativeClass)this.beanConverter.toNative(beanBase),startRow,numRows,searchType));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }        
    }
    /**
     * Loads each row from a template one, given the start row and number of rows and dealt with action.
     *
     * @param bean the $beanClass template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     */
    //20-5
    public int loadUsingTemplate(${beanClass} beanBase, int[] fieldList, int startRow, int numRows,int searchType, Action action)
    {
        try {
            return this.nativeManager.loadUsingTemplate(this.beanConverter.toNative(beanBase),fieldList,startRow,numRows,searchType,this.toNative(action));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    /**
     * Deletes rows using a $beanClass template.
     *
     * @param bean the $beanClass object(s) to be deleted
     * @return the number of deleted objects
     */
    //21
    public int deleteUsingTemplate(${beanClass} beanBase)
    {
        try{
            return this.nativeManager.deleteUsingTemplate(($nativeClass)this.beanConverter.toNative(beanBase));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

#if ($table.countIndices() > 0)

    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________

#foreach ( $index in $table.getIndices() )
    /**
     * Retrieves an array of $beanClass using the ${index.getName()} index.
     *
#foreach ( $column in $index.getIndexColumnsList() )
     * @param ${column.getVarName()} the ${column.getName()} column's value filter.
#end
     * @return an array of $beanClass
     */
    public $beanClass[] loadBy${index.getName()}(#join( $index.getIndexColumnsList() "$e.getJavaType() ${e.getVarName()}" ','))
    {
        $beanClass bean= new $beanClass ();
#foreach ( $column in $index.getIndexColumnsList() )
        bean.${column.getSetMethod()}(${column.getVarName()});
#end
        return loadUsingTemplate(bean);
    }
    
    /**
     * Retrieves a list of $beanClass using the ${index.getName()} index.
     *
#foreach ( $column in $index.getIndexColumnsList() )
     * @param ${column.getVarName()} the ${column.getName()} column's value filter.
#end
     * @return a list of $beanClass
     */
    public List<$beanClass> loadBy${index.getName()}AsList(#foreach ( $column in $index.getIndexColumnsList() )#if ( $velocityCount > 1 ), #end$column.getJavaType() ${column.getVarName()}#end)
    {
        ${beanClass} bean = new $beanClass ();
#foreach ( $column in $index.getIndexColumnsList() )
        bean.${column.getSetMethod()}(${column.getVarName()});
#end
        return loadUsingTemplateAsList(bean);
    }
    
    /**
     * Deletes rows using the ${index.getName()} index.
     *
#foreach ( $column in $index.getIndexColumnsList() )
     * @param ${column.getVarName()} the ${column.getName()} column's value filter.
#end
     * @return the number of deleted objects
     */
    public int deleteBy${index.getName()}(#foreach ( $column in $index.getIndexColumnsList() )#if ( $velocityCount > 1 ), #end$column.getJavaType() ${column.getVarName()}#end)
    {
        ${beanClass} bean = new $beanClass ();
#foreach ( $column in $index.getIndexColumnsList() )
        bean.${column.getSetMethod()}(${column.getVarName()});
#end
        return deleteUsingTemplate(bean);
    }
    
#end
#end

## Many to Many needs to be templatized.
#set ( $rTables = $codewriter.getRelationTables() )
#foreach ( $rTable in $rTables )
#### if there is a foreign key present in that relation table
#* *##if (! ("$!rTable.getForeignKeyFor( $table )" == "") )
#* *##set ( $oVelocityCount = $velocityCount )
#* *##set ( $lTables = $rTable.linkedTables($db, $codewriter.getTable() ) )
#* *##set ( $rName = $rTable.getName() )
#* *##foreach ( $lTable in $lTables )
#*      *##set ( $lName = $lTable.getName() )
#*      *##if ( $velocityCount == 1 && $oVelocityCount == 1 )
	
    //_____________________________________________________________________
    //
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE
    //_____________________________________________________________________
#*      *##end
#set ( $strLinkedCore = "$!{codewriter.getClassPrefix()}$lTable.asCoreClass()" )
#set ( $strLinkedBean = "${lTable.asBeanClassNSP()}" )
#set ( $strLinkedNative = "${lTable.asBeanClass()}" )
#set ( $strLinkedManager = "${lTable.asManagerClass()}" )
#set ( $strRelationCore = "${rTable.asCoreClass()}" )
#set ( $strRelationBean = "${rTable.asBeanClass()}" )
#set ( $localKey = $rTable.getForeignKeyFor( $table ) )
#set ( $externalKey = $rTable.getForeignKeyFor( $lTable ) )
    /**
     * Retrieves an array of $strLinkedBean using the relation table $strRelationCore given a $beanClass object.
     *
     * @param bean the $beanClass bean to be used
     * @return an array of $strLinkedBean
     */
    //22 MANY TO MANY
    public $strLinkedBean[] load${strLinkedCore}Via$strRelationCore($beanClass bean) 
    {
         return this.load${strLinkedCore}Via$strRelationCore(this.beanConverter.toNative(bean), 1, -1);
    }

    /**
     * Retrieves an array of $strLinkedBean using the relation table $strRelationCore given a $beanClass object, specifying the start row and the number of rows.
     *
     * @param bean the $beanClass bean to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of $strLinkedBean
     */
    //23 MANY TO MANY
    public $strLinkedBean[] load${strLinkedCore}Via$strRelationCore($beanClass bean, int startRow, int numRows)
    {
        try
        {
            return this.dbConverter.get${$strLinkedBean}Converter.fromNative(this.nativeManager.load${strLinkedCore}Via$strRelationCore(this.beanConverter.toNative(bean), 1, -1));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }

    }
#* *##end
#* *##end
#end

    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table $tablename.
     *
     * @return the number of rows returned
     */
    //24
    public int countAll() 
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table $tablename with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    //25
    public int countWhere(String where)
    {
        try{
            return this.nativeManager.countWhere(where);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * count the number of elements of a specific $beanClass bean
     *
     * @param bean the $beanClass bean to look for ant count
     * @return the number of rows returned
     */
    //27
    public int countUsingTemplate(${beanClass} bean)
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific $beanClass bean , given the start row and number of rows.
     *
     * @param bean the $beanClass template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     */
    //20
    public int countUsingTemplate(${beanClass} bean, int startRow, int numRows)
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific $beanClass bean given the start row and number of rows and the search type
     *
     * @param bean the $beanClass template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     */
    //20
    public int countUsingTemplate(${beanClass} beanBase, int startRow, int numRows, int searchType)
    {
        try{
            return this.nativeManager.countUsingTemplate(this.beanConverter.toNative(beanBase),startRow,numRows,searchType);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }


    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________

    /**
     * Registers a unique $listenerClass listener.
     */
    //35
    public void registerListener(TableListener listener)
    {
        this.nativeManager.registerListener(this.toNative(($listenerClass)listener));
    }

    private $nativeListener toNative(final $listenerClass listener) {
		return null == listener ?null:new $nativeListener (){

			@Override
			public void beforeInsert($nativeClass bean) throws DAOException {
				listener.beforeInsert(${managerClassNSP}.this.beanConverter.fromNative(bean));				
			}

			@Override
			public void afterInsert($nativeClass bean) throws DAOException {
				listener.afterInsert(${managerClassNSP}.this.beanConverter.fromNative(bean));
				
			}

			@Override
			public void beforeUpdate($nativeClass bean) throws DAOException {
				listener.beforeUpdate(${managerClassNSP}.this.beanConverter.fromNative(bean));
				
			}

			@Override
			public void afterUpdate($nativeClass bean) throws DAOException {
				listener.afterUpdate(${managerClassNSP}.this.beanConverter.fromNative(bean));
			}

			@Override
			public void beforeDelete($nativeClass bean) throws DAOException {
				listener.beforeDelete(${managerClassNSP}.this.beanConverter.fromNative(bean));
			}

			@Override
			public void afterDelete($nativeClass bean) throws DAOException {
				listener.afterDelete(${managerClassNSP}.this.beanConverter.fromNative(bean));
			}};
	}

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________


    /**
     * return true if @{code column}(case insensitive)is primary key,otherwise return false <br>
     * return false if @{code column} is null or empty 
     * @param column
     * @return
     * @author guyadong
     */
    //43
    public static boolean isPrimaryKey(String column){
        for(String c:PRIMARYKEY_NAMES)if(c.equalsIgnoreCase(column))return true;
        return false;
    }
    
    /**
     * Load all the elements using a SQL statement specifying a list of fields to be retrieved.
     * @param sql the SQL statement for retrieving
     * @param argList the arguments to use fill given prepared statement,may be null
     * @param fieldList table of the field's associated constants
     * @return an array of $beanClass
     */
    public $beanClass[] loadBySql(String sql, Object[] argList, int[] fieldList) {
        return loadBySqlAsList(sql, argList, fieldList).toArray(new $beanClass[0]);
    }
    /**
     * Load all elements using a SQL statement specifying a list of fields to be retrieved.
     * @param sql the SQL statement for retrieving
     * @param argList the arguments to use fill given prepared statement,may be null
     * @param fieldList table of the field's associated constants
     * @return an list of $beanClass
     */
    public List<$beanClass> loadBySqlAsList(String sql, Object[] argList, int[] fieldList){
        try{
            return this.beanConverter.fromNative(this.nativeManager.loadBySqlAsList(sql,argList,fieldList));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    
    //@Override
    public <T>T runAsTransaction(Callable<T> fun) {
        try{
            return this.nativeManager.runAsTransaction(fun);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    
    //@Override
    public void runAsTransaction(final Runnable fun){
        try{
            this.nativeManager.runAsTransaction(fun);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    private ${managerClass}.Action toNative(final Action action){
        return new ${managerClass}.Action(){

            @Override
            public void call($nativeClass bean) {
                action.call(${managerClassNSP}.this.beanConverter.fromNative(bean));
            }

            @Override
            public $nativeClass getBean() {
                return ($nativeClass) ${managerClassNSP}.this.beanConverter.toNative(action.getBean());
            }};
    }
}
