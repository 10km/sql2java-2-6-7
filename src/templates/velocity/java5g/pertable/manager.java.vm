#parse( "table.include.vm" )
#parse( "header.include.vm" )
######################
#set ( $subpkg=$db.engineAsSubPackage() )
#set ( $managerClassNSP = $table.asManagerClassNSP() )
#set ( $nativeClass = "${table.getPackage()}.$table.asBeanClass()" )
#set ( $beanClass = $table.asBeanClassNSP() )
#set ( $listenerClass = $table.asListenerClassNSP() )
#set ( $nativeListener = $table.asListenerClass() )
$codewriter.setCurrentJavaFilename("${gpkg}.${subpkg}", "${managerClassNSP}.java")
package ${gpkg}.${subpkg};

import java.util.concurrent.Callable;

import ${gpkg}.Constant;
import ${gpkg}.${beanClass};
import ${gpkg}.IBeanConverter;
import ${gpkg}.IDbConverter;
import ${gpkg}.TableManager;
import ${gpkg}.$table.asManagerInterfaceNSP();
#importLinkedTable()
import ${gpkg}.TableListener;
import ${schemaPkg}.exception.WrapDAOException;
import ${schemaPkg}.exception.ObjectRetrievalException;

import ${exceptionPkg}.DAOException;

/**
 * Handles database calls (save, load, count, etc...) for the $tablename table.<br>
 * all {@link DAOException} be wrapped as {@link WrapDAOException} to throw.<br>
#if ( $table.hasRemarks() )
 * Remarks: $table.getRemarks()<br>
#end
 * @author guyadong
 */
public class $managerClassNSP extends TableManager.BaseAdapter<$beanClass> implements $table.asManagerInterfaceNSP()
{
    private ${table.getPackage()}.$managerClass nativeManager = ${table.getPackage()}.${managerClass}.getInstance();
    private IDbConverter<#join($tables "
                        ${e.getPackage()}.${e.asBeanClass()}" ',')> dbConverter = DbConverter.INSTANCE;
    private IBeanConverter<$beanClass,${nativeClass}> beanConverter = dbConverter.get${beanClass}Converter();
    private static $managerClassNSP singleton = new $managerClassNSP();
    protected $managerClassNSP(){}
    #defineInstanceMehod($table $managerClassNSP false)
    /**
     * @return table name
     */
    @Override
    public String getTableName() {
        return this.nativeManager.getTableName();
    }

    /**
     * @return field names of table
     */
    @Override
    public String getFields() {
        return this.nativeManager.getFields();
    }

    @Override
    public String getFullFields() {
        return this.nativeManager.getFullFields();
    }
    
    /**
     * @return primarykeyNames
     */
    @Override
    public String[] getPrimarykeyNames() {
        return this.nativeManager.getPrimarykeyNames();
    }
    
    /**
     * Get the {@link $managerClassNSP} singleton.
     *
     * @return {@link $managerClassNSP}
     */
    public static $managerClassNSP getInstance()
    {
        return singleton;
    }
   
    @Override
    protected Class<$beanClass> beanType(){
        return ${beanClass}.class;
    }
    
#if ( $table.countPrimaryKeys() > 0 )
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    //1 override $table.asManagerInterfaceNSP()

    @Override 
    public $beanClass loadByPrimaryKey(#join($primaryKeys "$e.getJavaType() $e.getVarName()" ','))
    {
        try{
            return loadByPrimaryKeyChecked(#join($primaryKeys "$e.getVarName()" ','));
        }catch(ObjectRetrievalException e){
            // not found
            return null;
        }
    }
    //1.1 override $table.asManagerInterfaceNSP()

    @Override
    public $beanClass loadByPrimaryKeyChecked(#join($primaryKeys "$e.getJavaType() $e.getVarName()" ',')) throws ObjectRetrievalException
    {
        try{
            return this.beanConverter.fromRight(nativeManager.loadByPrimaryKeyChecked(#join($primaryKeys "$e.getVarName()" ',')));
        }catch(${exceptionPkg}.ObjectRetrievalException e){
            throw new ObjectRetrievalException();
        }catch(DAOException e){
            throw new WrapDAOException(e);
        }
    }
    //1.2

    @Override
    public $beanClass loadByPrimaryKey(${beanClass} bean)
    {
        return bean==null?null:loadByPrimaryKey(#join($primaryKeys 'bean.${e.getGetMethod()}()' ','));
    }

    //1.2.2

    @Override
    public $beanClass loadByPrimaryKeyChecked(${beanClass} bean) throws ObjectRetrievalException
    {
        if(null == bean){
            throw new NullPointerException();
        }
        return loadByPrimaryKeyChecked(#join($primaryKeys 'bean.${e.getGetMethod()}()' ','));
    }
    
    //1.3

    @Override
    public $beanClass loadByPrimaryKey(Object ...keys){
        try{
            return loadByPrimaryKeyChecked(keys);
        }catch(ObjectRetrievalException e){
            // not found
            return null;
        }
    }
    
    //1.3.2

    @Override
    public $beanClass loadByPrimaryKeyChecked(Object ...keys) throws ObjectRetrievalException{
        if(null == keys){
            throw new NullPointerException();
        }
        if(keys.length != $table.countPrimaryKeys()){
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        }
        #join($primaryKeys '
        if(! (keys[$m_0count] instanceof $e.getJavaType())){
            throw new IllegalArgumentException("invalid type for the No.$velocityCount argument,expected type:$e.getJavaType()");
        }' '')

        return loadByPrimaryKeyChecked(#join($primaryKeys '($e.getJavaType())keys[$m_0count]' ','));
    }

    //1.4 override $table.asManagerInterfaceNSP()

    @Override 
    public boolean existsPrimaryKey(#join($primaryKeys "$e.getJavaType() $e.getVarName()" ','))
    {
        try{
            return nativeManager.existsPrimaryKey(#join($primaryKeys "$e.getVarName()" ','));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    //1.6

    @Override
    public boolean existsByPrimaryKey($beanClass bean)
    {
        return null == bean ? false : existsPrimaryKey(#join($primaryKeys "bean.$e.getGetMethod()()" ','));
    }
    //1.7

    @Override
    public $beanClass checkDuplicate($beanClass bean)throws ObjectRetrievalException{
#if ( 1 == $table.countPrimaryKeys() )
        if(null != bean){
            checkDuplicate(bean.$table.getPrimaryKey().getGetMethod()());
        }
#else
        try{
            nativeManager.checkDuplicate(this.beanConverter.toRight(bean));            
        }catch(DAOException e){
            throw new WrapDAOException(e);
        }
#end     
        return bean;   
    }
#if ( 1 == $table.countPrimaryKeys() )
#set ($pk = $table.getPrimaryKey())
#if ( $pk.hasPrimaryType() )
#set ($pkType = $pk.getJavaPrimaryType())
#else
#set ($pkType = $pk.getJavaType())
#end
    //1.4.1 override $table.asManagerInterfaceNSP()

    @Override 
    public $pk.getJavaType() checkDuplicate($pk.getJavaType() $pk.getVarName())throws ObjectRetrievalException{
        try{
            return this.nativeManager.checkDuplicate($pk.getVarName());
        }catch(net.gdface.facelog.dborm.exception.ObjectRetrievalException e){
        	throw new ObjectRetrievalException(e);
        }catch(DAOException e){
            throw new WrapDAOException(e);
        }
    }
    //1.8 override $table.asManagerInterfaceNSP()

    @Override 
    public java.util.List<$beanClass> loadByPrimaryKey($pkType... keys){
        if(null == keys){
            return new java.util.ArrayList<$beanClass>();
        }
        java.util.ArrayList<$beanClass> list = new java.util.ArrayList<$beanClass>(keys.length);
        for(int i = 0 ;i< keys.length;++i){
            list.add(loadByPrimaryKey(keys[i]));
        }
        return list;
    }
    //1.9 override $table.asManagerInterfaceNSP()

    @Override 
    public java.util.List<$beanClass> loadByPrimaryKey(java.util.Collection<$pk.getJavaType()> keys){
        if(null == keys ){
            return new java.util.ArrayList<$beanClass>();
        }
        java.util.ArrayList<$beanClass> list = new java.util.ArrayList<$beanClass>(keys.size());
        if(keys instanceof java.util.List){
            for($pk.getJavaType() key: keys){
                list.add(loadByPrimaryKey(key));
            }
        }else{
            $beanClass bean;
            for($pk.getJavaType() key: keys){
                if(null != (bean = loadByPrimaryKey(key))){
                    list.add(bean);
                }
            }
        }
        return list;
    }
#end##1 == $table.countPrimaryKeys()    
    //2 override $table.asManagerInterfaceNSP()

    @Override 
    public int deleteByPrimaryKey(#join($primaryKeys "$e.getJavaType() $e.getVarName()" ','))
    {
        try
        {
            return nativeManager.deleteByPrimaryKey(#join($primaryKeys "$e.getVarName()" ','));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    //2

    @Override
    public int delete($beanClass bean){
        try
        {
            return nativeManager.delete(this.beanConverter.toRight(bean));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }   
    }
    //2.1

    @Override
    public int deleteByPrimaryKey(Object ...keys){
        if(null == keys){
            throw new NullPointerException();
        }
        if(keys.length != $table.countPrimaryKeys()){
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        }
#foreach ( $pk in $primaryKeys )
#set( $kidx = $velocityCount - 1 )
        if(! (keys[$kidx] instanceof $pk.getJavaType())){
            throw new IllegalArgumentException("invalid type for the No.$velocityCount argument,expected type:$pk.getJavaType()");
        }
#end        
        return deleteByPrimaryKey(#foreach($pk in $primaryKeys)#if ( $velocityCount > 1 ),#end#set( $kidx = $velocityCount - 1 )($pk.getJavaType())keys[$kidx]#end);
    }
#if ( 1 == $table.countPrimaryKeys() )
#set ($pk = $table.getPrimaryKey())
#if ( $pk.hasPrimaryType() )
#set ($pkType = $pk.getJavaPrimaryType())
#else
#set ($pkType = $pk.getJavaType())
#end
    //2.2 override $table.asManagerInterfaceNSP()

    @Override 
    public int deleteByPrimaryKey($pkType... keys){
        int count = 0;
        if(null != keys){        
            for($pkType key:keys){
                count += deleteByPrimaryKey(key);
            }
        }
        return count;
    }
    //2.3 override $table.asManagerInterfaceNSP()

    @Override 
    public int deleteByPrimaryKey(java.util.Collection<$pk.getJavaType()> keys){
        int count = 0;
        if(null != keys){        
            for($pk.getJavaType() key :keys){
                count += deleteByPrimaryKey(key);
            }
        }
        return count;
    }
#end##1 == $table.countPrimaryKeys()  
    //2.4 override $table.asManagerInterfaceNSP()

    @Override 
    public int delete($beanClass... beans){
        int count = 0;
        if(null != beans){
            for($beanClass bean :beans){
                count += delete(bean);
            }
        }
        return count;
    }
    //2.5 override $table.asManagerInterfaceNSP()

    @Override 
    public int delete(java.util.Collection<$beanClass> beans){
        int count = 0;
        if(null != beans){
            for($beanClass bean :beans){
                count += delete(bean);
            }
        }
        return count;
    }
#end ## $table.countPrimaryKeys() > 0
## ======================================================
## xImportedKeys template
## ======================================================

#if ($table.hasImportedKeys())
    //////////////////////////////////////
    // IMPORT KEY GENERIC METHOD
    //////////////////////////////////////
    
    private static final Class<?>[] IMPORTED_BEAN_TYPES = new Class<?>[]{#foreachImportedTables('native' $table "${m_importedClass}.class" ',' '')};

    /**
     * @see ${esc.hash}getImportedBeansAsList($beanClass,int)
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends ${gpkg}.BaseBean<T>> T[] getImportedBeans($beanClass bean, int ikIndex){
        return getImportedBeansAsList(bean, ikIndex).toArray((T[])java.lang.reflect.Array.newInstance(IMPORTED_BEAN_TYPES[ikIndex],0));
    }
    
    /**
     * Retrieves imported T objects by ikIndex.<br>
     * @param <T>
     * <ul>
    #foreachImportedTables('native' $table " *     <li> {@link Constant#${m_importedTable.asIKConst($m_fkName)}} -> {@link ${m_importedClass}}</li>" '    ' 'true')
     * </ul>
     * @param bean the {@link $beanClass} object to use
     * @param ikIndex valid values: #foreachImportedTables('native' $table "{@link Constant#${m_importedTable.asIKConst($m_fkName)}}" ',' '')

     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends ${gpkg}.BaseBean<T>> java.util.List<T> getImportedBeansAsList($beanClass bean,int ikIndex){
        switch(ikIndex){
#foreach($importedTable in $importedTables)
#set ( $importedClass = "$importedTable.asBeanClass()" )
#set ( $importedClassManager = "$importedTable.asManagerClass()" )
#foreach( $fkName in $importedTable.getFkMapNames($table.name) )
#set ( $columnsOfFk = $importedTable.getForeignKeysByFkName($fkName) )
        case ${importedTable.asIKConst($fkName)}:
            return (java.util.List<T>)this.${importedTable.getImportedBeansGetMethod($fkName)}AsList(bean);
#end
#end
        default:
            throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
        }
    }
    /**
     * Set the T objects as imported beans of bean object by ikIndex.<br>
     * @param <T>
     * 
     * <ul>
    #foreachImportedTables('native' $table " *     <li> {@link Constant#${m_importedTable.asIKConst($m_fkName)}} -> {@link ${m_importedClass}}</li>" '    ' 'true')
     * </ul>
     * @param bean the {@link $beanClass} object to use
     * @param importedBeans the ${importedClass} array to associate to the {@link $beanClass}
     * @param ikIndex valid values: #foreachImportedTables('native' $table "{@link Constant#${m_importedTable.asIKConst($m_fkName)}}" ',' '')

     * @return importedBeans always
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends ${gpkg}.BaseBean<T>> T[] setImportedBeans($beanClass bean,T[] importedBeans,int ikIndex){
        switch(ikIndex){
#foreach($importedTable in $importedTables)
#set ( $importedClass = "$importedTable.asBeanClassNSP()" )
#set ( $importedClassManager = "$importedTable.asManagerClass()" )
#foreach( $fkName in $importedTable.getFkMapNames($table.name) )
#set ( $columnsOfFk = $importedTable.getForeignKeysByFkName($fkName) )
        case ${importedTable.asIKConst($fkName)}:
            return (T[])${importedTable.getImportedBeansSetMethod($fkName)}(bean,(${importedClass}[])importedBeans);
#end
#end
        default:
            throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
        }
    }
    /**
     * Set the importedBeans associates to the bean by ikIndex<br>
     * @param <T>
     * <ul>
    #foreachImportedTables('native' $table " *     <li> {@link Constant#${m_importedTable.asIKConst($m_fkName)}} -> {@link ${m_importedClass}}</li>" '    ' 'true')
     * </ul>
     * @param bean the {@link $beanClass} object to use
     * @param importedBeans the <T> object to associate to the {@link $beanClass}
     * @param ikIndex valid values: #foreachImportedTables('native' $table "{@link Constant#${m_importedTable.asIKConst($m_fkName)}}" ',' '')

     * @return importedBeans always
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends ${gpkg}.BaseBean<T>,C extends java.util.Collection<T>> C setImportedBeans($beanClass bean,C importedBeans,int ikIndex){
        switch(ikIndex){
#foreach($importedTable in $importedTables)
#set ( $importedClass = "$importedTable.asBeanClassNSP()" )
#set ( $importedClassManager = "$importedTable.asManagerClass()" )
#foreach( $fkName in $importedTable.getFkMapNames($table.name) )
#set ( $columnsOfFk = $importedTable.getForeignKeysByFkName($fkName) )
        case ${importedTable.asIKConst($fkName)}:
            return (C)${importedTable.getImportedBeansSetMethod($fkName)}(bean,(java.util.Collection<${importedClass}>)importedBeans);
#end
#end
        default:
            throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
        }
    }
#end ## $table.hasImportedKeys()

#foreach ($importedTable in $importedTables)
#if ( $velocityCount == 1 )

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
#end
#set ( $importedClass = "$importedTable.asBeanClassNSP()" )
#set ( $importedNative = "$importedTable.asBeanClass()" )
#set ( $importedClassManager = "$importedTable.asManagerClassNSP()" )
#foreach( $fkName in $importedTable.getFkMapNames($table.name) )
#set ( $columnsOfFk = $importedTable.getForeignKeysByFkName($fkName) )
    //3.1 GET IMPORTED override $table.asManagerInterfaceNSP()

    @Override 
    public ${importedClass}[] ${importedTable.getImportedBeansGetMethod($fkName)}($beanClass bean)
    {
        return this.${importedTable.getImportedBeansGetMethod($fkName)}AsList(bean).toArray(new ${importedClass}[0]);
    }
    //3.1.2 GET IMPORTED override $table.asManagerInterfaceNSP()

    @Override
    public ${importedClass}[] ${importedTable.getImportedBeansGetMethod($fkName)}(#join($primaryKeys "$e.getJavaType() $e.getFullVarName()" ','))
    {
        ${beanClass} bean = new ${beanClass}();
#foreach ( $pk in $primaryKeys )
        bean.${pk.getSetMethod()}(${pk.getFullVarName()});
#end       
        return ${importedTable.getImportedBeansGetMethod($fkName)}(bean);
    }
    //3.2 GET IMPORTED override $table.asManagerInterfaceNSP()

    @Override 
    public java.util.List<$importedClass> ${importedTable.getImportedBeansGetMethod($fkName)}AsList($beanClass bean)
    {
        return ${importedTable.getImportedBeansGetMethod($fkName)}AsList(bean,1,-1);
    }
    //3.2.2 GET IMPORTED override $table.asManagerInterfaceNSP()

    @Override
    public java.util.List<$importedClass> ${importedTable.getImportedBeansGetMethod($fkName)}AsList(#join($primaryKeys "$e.getJavaType() $e.getFullVarName()" ','))
    {
         ${beanClass} bean = new ${beanClass}();
#foreach ( $pk in $primaryKeys )
        bean.${pk.getSetMethod()}(${pk.getFullVarName()});
#end       
        return ${importedTable.getImportedBeansGetMethod($fkName)}AsList(bean);
    }
    //3.2.3 DELETE IMPORTED override $table.asManagerInterfaceNSP()

    @Override
    public int ${importedTable.getImportedBeansDelMethod($fkName)}(#join($primaryKeys "$e.getJavaType() $e.getFullVarName()" ','))
    {
        java.util.List<$importedClass> list =${importedTable.getImportedBeansGetMethod($fkName)}AsList(#join($primaryKeys "$e.getFullVarName()" ','));
        return ${importedTable.asInstanceMethod($isGeneral)}().delete(list);
    }
    //3.2.4 GET IMPORTED override $table.asManagerInterfaceNSP()

    @Override 
    public java.util.List<$importedClass> ${importedTable.getImportedBeansGetMethod($fkName)}AsList($beanClass bean,int startRow, int numRows)
    {
        try {
            return this.dbConverter.get${importedClass}Converter().fromRight(nativeManager.${importedTable.getImportedBeansGetMethod($fkName)}AsList( this.beanConverter.toRight(bean),startRow,numRows));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    //3.3 SET IMPORTED override $table.asManagerInterfaceNSP()

    @Override 
    public ${importedClass}[] ${importedTable.getImportedBeansSetMethod($fkName)}($beanClass bean , ${importedClass}[] importedBeans)
    {
        if(null != importedBeans){
            for( $importedClass importBean : importedBeans ){
                ${importedTable.asInstanceMethod($isGeneral)}().$importedTable.getReferencedVarSetMethod($fkName)(importBean , bean);
            }
        }
        return importedBeans;
    }

    //3.4 SET IMPORTED override $table.asManagerInterfaceNSP()

    @Override 
    public <C extends java.util.Collection<$importedClass>> C ${importedTable.getImportedBeansSetMethod($fkName)}($beanClass bean , C importedBeans)
    {
        if(null != importedBeans){
            for( $importedClass importBean : importedBeans ){
                ${importedTable.asInstanceMethod($isGeneral)}().$importedTable.getReferencedVarSetMethod($fkName)(importBean , bean);
            }
        }
        return importedBeans;
    }

#end
#end


## ======================================================
## only xImportedKeys template
## ======================================================
#if( $table.hasForeignTables() || $table.hasImportedTables() )
    //3.5 SYNC SAVE override $table.asManagerInterfaceNSP()

    @Override  
    public $beanClass save($beanClass bean
        #foreachForeignTables('native' $table  ", $m_foreignClass $table.asRefArg($m_fkName) " '' '')

        #foreachImportedTables('native' $table  ", ${m_importedClass}[] $m_importedTable.asImpArg($m_fkName) " '' ''))
    {
        if(null == bean){
            return null;
        }
#foreach($foreignTable in $foreignTables)
#set ( $foreignClassManager = "$foreignTable.asManagerClassNSP()" )
#foreach ( $fkName in $table.getFkMapNames($foreignTable.name) )
#set ( $columnsOfFk = $table.getForeignKeysByFkName($fkName) )
        if(null != $table.asRefArg($fkName)){
            this.$table.getReferencedVarSetMethod($fkName)(bean,$table.asRefArg($fkName));
        }
#end
#end
        bean = this.save( bean );
#foreach($importedTable in $importedTables)
#set ( $importedClass = "$importedTable.asBeanClass()" )
#set ( $importedClassManager = "$importedTable.asManagerClassNSP()" )
#foreach ( $fkName in $importedTable.getFkMapNames($table.name) )
#set ( $columnsOfFk = $importedTable.getForeignKeysByFkName($fkName) )
#set ( $impVar= $importedTable.asImpArg($fkName) )
        this.${importedTable.getImportedBeansSetMethod($fkName)}(bean,$impVar);
        ${importedTable.asInstanceMethod($isGeneral)}().save( $impVar );
#end
#end
        return bean;
    } 

    //3.6 SYNC SAVE AS TRANSACTION override $table.asManagerInterfaceNSP()

    @Override 
    public $beanClass saveAsTransaction(final $beanClass bean
        #foreachForeignTables('native' $table  ",final $m_foreignClass $table.asRefArg($m_fkName) " '' '')

        #foreachImportedTables('native' $table  ",final ${m_importedClass}[] $m_importedTable.asImpArg($m_fkName) " '' ''))
    {
        return this.runAsTransaction(new Callable<$beanClass>(){
            @Override
            public $beanClass call() throws Exception {
                return save(bean #foreachForeignTables('native' $table  ", $table.asRefArg($m_fkName) " '' '')#foreachImportedTables('native' $table  ", $m_importedTable.asImpArg($m_fkName) " '' ''));
            }});
    }
#if( $table.hasImportedTables() )
    //3.7 SYNC SAVE override $table.asManagerInterfaceNSP()

    @Override 
    public $beanClass save($beanClass bean
        #foreachForeignTables('native' $table  ", $m_foreignClass $table.asRefArg($m_fkName) " '' '')

        #foreachImportedTables('native' $table  ", java.util.Collection<$m_importedClass> $m_importedTable.asImpArg($m_fkName) " '' ''))
    {
        if(null == bean){
            return null;
        }
#foreach($foreignTable in $foreignTables)
#set ( $foreignClassManager = "$foreignTable.asManagerClassNSP()" )
#foreach ( $fkName in $table.getFkMapNames($foreignTable.name) )
#set ( $columnsOfFk = $foreignTable.getForeignKeysByFkName($fkName) )
        this.$table.getReferencedVarSetMethod($fkName)(bean,$table.asRefArg($fkName));
#end
#end
        bean = this.save( bean );
#foreach($importedTable in $importedTables)
#set ( $importedClass = "$importedTable.asBeanClass()" )
#set ( $importedClassManager = "$importedTable.asManagerClassNSP()" )
#foreach ( $fkName in $importedTable.getFkMapNames($table.name) )
#set ( $columnsOfFk = $importedTable.getForeignKeysByFkName($fkName) )
#set ( $impVar= $importedTable.asImpArg($fkName) )
        this.${importedTable.getImportedBeansSetMethod($fkName)}(bean,$impVar);
        ${importedTable.asInstanceMethod($isGeneral)}().save( $impVar );
#end
#end
        return bean;
    }   

    //3.8 SYNC SAVE AS TRANSACTION override $table.asManagerInterfaceNSP()

    @Override 
    public $beanClass saveAsTransaction(final $beanClass bean
        #foreachForeignTables('native' $table  ",final $m_foreignClass $table.asRefArg($m_fkName) " '' '')

        #foreachImportedTables('native' $table  ",final  java.util.Collection<$m_importedClass> $m_importedTable.asImpArg($m_fkName) " '' ''))
    {
        return this.runAsTransaction(new Callable<$beanClass>(){
            @Override
            public $beanClass call() throws Exception {
                return save(bean #foreachForeignTables('native' $table  ", $table.asRefArg($m_fkName) " '' '')#foreachImportedTables('native' $table  ", $m_importedTable.asImpArg($m_fkName) " '' ''));
            }});
    }
#end ## $table.hasImportedTables()
#set ( $argLength = $table.countForeignKeyNames() + $table.countImportedKeyNames() )
    private static final int SYNC_SAVE_ARG_LEN = $argLength;
    //3.9 SYNC SAVE 
    /**
     * Save the {@link $beanClass} bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link $beanClass} bean to be saved
     * @param args referenced beans or imported beans<br>
     *      see also {@link ${esc.hash}save($beanClass #foreachForeignTables('native' $table  ", $m_foreignClass " '' '')#foreachImportedTables('native' $table  ", ${m_importedClass}[] " '' ''))}
     * @return the inserted or updated {@link $beanClass} bean
     */
    @Override
    public $beanClass save($beanClass bean,Object ...args) 
    {
        if(null == args){
            return save(bean);
        }
#set ( $argIndex = 0 )
#set ( $argCount = 1 )
#set ( $callList= "" )
        if(args.length > SYNC_SAVE_ARG_LEN){
            throw new IllegalArgumentException("too many dynamic arguments,max dynamic arguments number: SYNC_SAVE_ARG_LEN");
        }
#foreach($foreignTable in $foreignTables)
#set ( $foreignClass = "$foreignTable.asBeanClassNSP()" )
#set ( $foreignClassManager = "$foreignTable.asManagerClass()" )
#foreach ( $fkName in $table.getFkMapNames($foreignTable.name) )
#set ( $columnsOfFk = $table.getForeignKeysByFkName($fkName) )
        if( args.length > $argIndex && null != args[$argIndex] && !(args[$argIndex] instanceof $foreignClass)){
            throw new IllegalArgumentException("invalid type for the No.$argCount dynamic argument,expected type:$foreignClass");
        }
#set ( $callList = "$callList,(args.length < $argCount || null == args[$argIndex])?null:($foreignClass)args[$argIndex]")
#set ( $argIndex = $argIndex + 1 )            
#set ( $argCount = $argCount + 1 )
#end
#end
#foreach($importedTable in $importedTables)
#set ( $importedClass = "$importedTable.asBeanClassNSP()" )
#set ( $importedClassManager = "$importedTable.asManagerClass()" )
#foreach ( $fkName in $importedTable.getFkMapNames($table.name) )
#set ( $columnsOfFk = $importedTable.getForeignKeysByFkName($fkName) )
#set ( $impVar= $importedTable.asImpArg($fkName) )
        if( args.length > $argIndex && null != args[$argIndex] && !(args[$argIndex] instanceof ${importedClass}[])){
            throw new IllegalArgumentException("invalid type for the No.$argCount argument,expected type:${importedClass}[]");
        }
#set ( $callList = "$callList,(args.length < $argCount || null == args[$argIndex])?null:(${importedClass}[])args[$argIndex]")
#set ( $argIndex = $argIndex + 1 )            
#set ( $argCount = $argCount + 1 )
#end
#end
        return save(bean$callList);
    } 

    //3.10 SYNC SAVE 
    /**
     * Save the {@link $beanClass} bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link $beanClass} bean to be saved
     * @param args referenced beans or imported beans<br>
     *      see also {@link ${esc.hash}save($beanClass #foreachForeignTables('native' $table  ", $m_foreignClass " '' '')#foreachImportedTables('native' $table  ", java.util.Collection " '' ''))}
     * @return the inserted or updated {@link $beanClass} bean
     */
    @SuppressWarnings("unchecked")
    @Override
    public $beanClass saveCollection($beanClass bean,Object ...inputs)
    {
        if(null == inputs){
            return save(bean);
        }
#set ( $argIndex = 0 )
#set ( $argCount = 1 )
#set ( $callList= "" )
        if(inputs.length > SYNC_SAVE_ARG_LEN){
            throw new IllegalArgumentException("too many dynamic arguments,max dynamic arguments number: $argLength");
        }
        Object[] args = new Object[SYNC_SAVE_ARG_LEN];
        System.arraycopy(inputs,0,args,0,SYNC_SAVE_ARG_LEN);
#foreach($foreignTable in $foreignTables)
#set ( $foreignClass = "$foreignTable.asBeanClassNSP()" )
#foreach ( $fkName in $table.getFkMapNames($foreignTable.name) )
#set ( $columnsOfFk = $table.getForeignKeysByFkName($fkName) )
        if( args.length > $argIndex && null != args[$argIndex] && !(args[$argIndex] instanceof $foreignClass)){
            throw new IllegalArgumentException("invalid type for the No.$argCount dynamic argument,expected type:$foreignClass");
        }
#set ( $callList = "$callList,null == args[$argIndex]?null:($foreignClass)args[$argIndex]")
#set ( $argIndex = $argIndex + 1 )            
#set ( $argCount = $argCount + 1 )
#end
#end
#foreach($importedTable in $importedTables)
#set ( $importedClass = "$importedTable.asBeanClassNSP()" )
#foreach ( $fkName in $importedTable.getFkMapNames($table.name) )
#set ( $columnsOfFk = $importedTable.getForeignKeysByFkName($fkName) )
#set ( $impVar= $importedTable.asImpArg($fkName) )
        if( args.length > $argIndex && null != args[$argIndex] && !(args[$argIndex] instanceof java.util.Collection)){
            throw new IllegalArgumentException("invalid type for the No.$argCount argument,expected type:java.util.Collection<$importedClass>");
        }
#set ( $callList = "$callList,
                    null == args[$argIndex]?null:(java.util.Collection<$importedClass>)args[$argIndex]")
#set ( $argIndex = $argIndex + 1 )            
#set ( $argCount = $argCount + 1 )
#end
#end
        return save(bean$callList);
    }

#end ## $table.hasForeignTables() || $table.hasImportedTables()
## ======================================================
## xForeignKeys template
## ======================================================
#if ($table.hasForeignKeys())
    //////////////////////////////////////
    // FOREIGN KEY GENERIC METHOD
    //////////////////////////////////////

    /**
     * Retrieves the bean object referenced by fkIndex.<br>
     * @param <T>
     * <ul>
    #foreachForeignTables('native' $table " *     <li> {@link Constant#${table.asFKConst($m_fkName)}} -> {@link ${m_foreignClass}}</li>" '    ' 'true')
     * </ul>
     * @param bean the {@link $beanClass} object to use
     * @param fkIndex valid values: <br>
     *        #foreachForeignTables('native' $table "{@link Constant#${table.asFKConst($m_fkName)}}" ',' '')

     * @return the associated <T> bean or {@code null} if {@code bean} or {@code beanToSet} is {@code null}
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends ${gpkg}.BaseBean<T>> T getReferencedBean($beanClass bean,int fkIndex){
        switch(fkIndex){
#foreach($foreignTable in $foreignTables)
#set ( $foreignClass = "$foreignTable.asBeanClass()" )
#set ( $foreignClassManager = "$foreignTable.asManagerClass()" )
#foreach( $fkName in $table.getFkMapNames($foreignTable.name) )
#set ( $columnsOfFk = $table.getForeignKeysByFkName($fkName) )
        case ${table.asFKConst($fkName)}:
            return  (T)this.${table.getReferencedVarGetMethod($fkName)}(bean);
#end
#end
        default:
            throw new IllegalArgumentException(String.format("invalid fkIndex %d", fkIndex));
        }
    }
    /**
     * Associates the {@link $beanClass} object to the bean object by fkIndex field.<br>
     * 
     * @param <T> see also {@link ${esc.hash}getReferencedBean($beanClass,int)}
     * @param bean the {@link $beanClass} object to use
     * @param beanToSet the <T> object to associate to the {@link $beanClass}
     * @param fkIndex valid values: see also {@link ${esc.hash}getReferencedBean($beanClass,int)}
     * @return always beanToSet saved
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends ${gpkg}.BaseBean<T>> T setReferencedBean($beanClass bean,T beanToSet,int fkIndex){
        switch(fkIndex){
#foreach($foreignTable in $foreignTables)
#set ( $foreignClass = "$foreignTable.asBeanClassNSP()" )
#set ( $foreignClassManager = "$foreignTable.asManagerClass()" )
#foreach( $fkName in $table.getFkMapNames($foreignTable.name) )
#set ( $columnsOfFk = $table.getForeignKeysByFkName($fkName) )
        case ${table.asFKConst($fkName)}:
            return  (T)this.${table.getReferencedVarSetMethod($fkName)}(bean, (${foreignClass})beanToSet);
#end
#end
        default:
            throw new IllegalArgumentException(String.format("invalid fkIndex %d", fkIndex));
        }
    }
#end## $table.hasForeignKeys()
    
#foreach ($foreignTable in $foreignTables)
#if ( $velocityCount == 1 )
    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////

#end
#set ( $foreignClass = "$foreignTable.asBeanClassNSP()" )
#set ( $foreignNative = "$foreignTable.asBeanClass()" )
#set ( $foreignClassManager = "$foreignTable.asManagerClass()" )
#foreach( $fkName in $table.getFkMapNames($foreignTable.name) )
#set ( $columnsOfFk = $table.getForeignKeysByFkName($fkName) )

    //5.1 GET REFERENCED VALUE override $table.asManagerInterfaceNSP()

    @Override 
    public $foreignClass $table.getReferencedVarGetMethod($fkName)($beanClass bean)
    {
        if(null == bean){
            return null;
        }
        bean.$table.getReferencedVarSetMethod($fkName)(${foreignTable.asInstanceMethod($isGeneral)}().loadByPrimaryKey(#join($columnsOfFk "bean.$e.getGetMethod()()" ','))); 
        return bean.$table.getReferencedVarGetMethod($fkName)();
    }

    //5.2 SET REFERENCED override $table.asManagerInterfaceNSP()

    @Override 
    public $foreignClass $table.getReferencedVarSetMethod($fkName)($beanClass bean, $foreignClass beanToSet)
    {
        try{
            $nativeClass nativeBean = this.beanConverter.toRight(bean);
            IBeanConverter<$foreignClass,$foreignTable.asFullBeanClass()> foreignConverter = this.dbConverter.get${foreignClass}Converter();
            $foreignTable.asFullBeanClass() foreignNativeBean = foreignConverter.toRight(beanToSet);
            this.nativeManager.$table.getReferencedVarSetMethod($fkName)(nativeBean,foreignNativeBean);
            this.beanConverter.fromRight(bean, nativeBean);
            foreignConverter.fromRight(beanToSet,foreignNativeBean);
            return beanToSet;
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
#end
#end

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////

    //11

    @Override
    public int deleteByWhere(String where)
    {
        try{
            return this.nativeManager.deleteByWhere(where);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________

    //13

    @Override
    protected $beanClass insert($beanClass bean)
    {
        try{
            return this.beanConverter.fromRight(bean,this.nativeManager.insert(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //14
    @Override

    protected $beanClass update($beanClass bean)
    {
        try{
            return this.beanConverter.fromRight(bean,this.nativeManager.update(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    //18
    @Override

    public $beanClass loadUniqueUsingTemplate(${beanClass} bean)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadUniqueUsingTemplate(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
     }
    //18-1
    @Override

    public $beanClass loadUniqueUsingTemplateChecked(${beanClass} bean) throws ObjectRetrievalException
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadUniqueUsingTemplateChecked(this.beanConverter.toRight(bean)));
        }
        catch(${exceptionPkg}.ObjectRetrievalException e)
        {
            throw new ObjectRetrievalException();
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
     }
    //20-5

    @Override
    public int loadUsingTemplate(${beanClass} bean, int[] fieldList, int startRow, int numRows,int searchType, Action<$beanClass> action)
    {
        try {
            return this.nativeManager.loadUsingTemplate(this.beanConverter.toRight(bean),fieldList,startRow,numRows,searchType,this.toNative(action));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //21

    @Override
    public int deleteUsingTemplate(${beanClass} bean)
    {
        try{
            return this.nativeManager.deleteUsingTemplate(this.beanConverter.toRight(bean));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

#if ($table.countIndices() > 0)

    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________

#foreach ( $index in $table.getIndices() )
#set( $indexColumns = $index.getIndexColumnsList())
#if($index.isUnique())
    // override $table.asManagerInterfaceNSP()

    @Override 
    public $beanClass loadBy${index.asCamelCaseName()}(#join( $indexColumns "$e.getJavaType() ${e.getVarName()}" ',')){
        try{
            return loadBy${index.asCamelCaseName()}Checked(#join( $indexColumns "${e.getVarName()}" ','));
        }catch(ObjectRetrievalException e){
            return null;
        }
    }
    // override $table.asManagerInterfaceNSP()

    @Override 
    public $beanClass loadBy${index.asCamelCaseName()}Checked(#join( $indexColumns "$e.getJavaType() ${e.getVarName()}" ','))throws ObjectRetrievalException{
        if(#join($indexColumns 'null == ${e.getVarName()}' ' || ')){
            throw new ObjectRetrievalException(new NullPointerException());
        }
        ${beanClass} bean = new ${beanClass}();
        #join($indexColumns '
        bean.${e.getSetMethod()}(${e.getVarName()});
        ' '')

        return loadUniqueUsingTemplateChecked(bean);
    }
#if( 1 == $indexColumns.size())
#set ($indexColumn = $indexColumns.get(0))
#if ( $indexColumn.hasPrimaryType() )
#set ($columnType = $indexColumn.getJavaPrimaryType())
#else
#set ($columnType = $indexColumn.getJavaType())
#end
    // override $table.asManagerInterfaceNSP()

    @Override 
    public java.util.List<$beanClass> loadBy${index.asCamelCaseName()}($columnType... indexs)
    {
        if(null == indexs){
            return new java.util.ArrayList<$beanClass>();
        }
        java.util.ArrayList<$beanClass> list = new java.util.ArrayList<$beanClass>(indexs.length);
        for(int i = 0 ;i< indexs.length;++i){
            list.add(loadBy${index.asCamelCaseName()}(indexs[i]));
        }
        return list;
    }
    // override $table.asManagerInterfaceNSP()

    @Override 
    public java.util.List<$beanClass> loadBy${index.asCamelCaseName()}(java.util.Collection<$indexColumn.getJavaType()> indexs)
    {
        if(null == indexs ){
            return new java.util.ArrayList<$beanClass>();
        }
        java.util.ArrayList<$beanClass> list = new java.util.ArrayList<$beanClass>(indexs.size());
        if(indexs instanceof java.util.List){
            for($indexColumn.getJavaType() key: indexs){
                list.add(loadBy${index.asCamelCaseName()}(key));
            }
        }else{
            $beanClass bean;
            for($indexColumn.getJavaType() key: indexs){
                if(null != (bean = loadBy${index.asCamelCaseName()}(key))){
                    list.add(bean);
                }
            }
        }
        return list;
    }
    // override $table.asManagerInterfaceNSP()

    @Override 
    public int deleteBy${index.asCamelCaseName()}($columnType... indexs)
    {
        int count = 0;
        if(null != indexs){
            for($columnType index : indexs){
                count += deleteBy${index.asCamelCaseName()}(index);
            }
        }
        return count;
    }
    // override $table.asManagerInterfaceNSP()

    @Override 
    public int deleteBy${index.asCamelCaseName()}(java.util.Collection<$indexColumn.getJavaType()> indexs)
    {
        int count = 0;
        if(null != indexs){
            for($columnType index : indexs){
                count += deleteBy${index.asCamelCaseName()}(index);
            }
        }
        return count;
    }
#end##1 == $indexColumns.size()
#else ## $index.isUnique()
    // override $table.asManagerInterfaceNSP()

    @Override 
    public ${beanClass}[] loadBy${index.asCamelCaseName()}(#join( $indexColumns "$e.getJavaType() ${e.getVarName()}" ','))
    {
        return this.loadBy${index.asCamelCaseName()}AsList(#join( $indexColumns "${e.getVarName()}" ',')).toArray(new ${beanClass}[0]);
    }
    
    // override $table.asManagerInterfaceNSP()

    @Override 
    public java.util.List<$beanClass> loadBy${index.asCamelCaseName()}AsList(#join( $indexColumns "$e.getJavaType() ${e.getVarName()}" ','))
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadBy${index.asCamelCaseName()}AsList(#join( $indexColumns "${e.getVarName()}" ',')));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
#end## $index.isUnique()

    // override $table.asManagerInterfaceNSP()

    @Override 
    public int deleteBy${index.asCamelCaseName()}(#join( $indexColumns "$e.getJavaType() ${e.getVarName()}" ','))
    {
        try{
            return this.nativeManager.deleteBy${index.asCamelCaseName()}(#join( $indexColumns "${e.getVarName()}" ','));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
#end
    
    /**
     * Retrieves a list of $beanClass using the index specified by keyIndex.
     * @param keyIndex valid values: <br>
     *        #join($table.getIndices() "{@link Constant#${e.asConstName()}}" ',')

     * @param keys key values of index
     * @return a list of $beanClass
     */
    @Override
    public java.util.List<$beanClass> loadByIndexAsList(int keyIndex,Object ...keys)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadByIndexAsList(keyIndex,keys));
        }catch(DAOException e){
            throw new WrapDAOException(e);
        }
    }
    
    /**
     * Deletes rows using key.
     * @param keyIndex valid values: <br>
     *        #join($table.getIndices() "{@link Constant#${e.asConstName()}}" ',')

     * @param keys key values of index
     * @return the number of deleted objects
     */
    @Override
    public int deleteByIndex(int keyIndex,Object ...keys)
    {
        try{
            return this.nativeManager.deleteByIndex(keyIndex,keys);
        }catch(DAOException e){
            throw new WrapDAOException(e);
        }
    }
#end##($table.countIndices() > 0)

#set ( $jTables = $table.getJunctionTables() )
#foreach ( $jTable in $jTables )
#set ( $linkedTable = $jTable.tableOfJunction( $table) )
#if ( $velocityCount == 1)
    //_____________________________________________________________________
    //
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE
    //_____________________________________________________________________
#end
#set ( $junctionBeanClass = $jTable.asBeanClass($isGeneral))
#set ( $junctionManagerClass = ${jTable.asManagerClass($isGeneral)})
#set ( $linkedBean = "${linkedTable.asBeanClass($isGeneral)}" )
#set ( $localFk = $jTable.getForeignKeys($table)[0])
#set ( $linkedFk = $jTable.getForeignKeys($linkedTable)[0])
#set ( $linkManagerClass = ${linkedTable.asManagerClass($isGeneral)})
    //22 MANY TO MANY override $table.asManagerInterfaceNSP()

    @Override
    public java.util.List<${beanClass}> $jTable.getLoadMethodOfJunction()AsList($linkedBean bean)
    {
         return this.$jTable.getLoadMethodOfJunction()AsList(bean, 1, -1);
    }

    //23 MANY TO MANY override $table.asManagerInterfaceNSP()

    @Override
    public java.util.List<${beanClass}> $jTable.getLoadMethodOfJunction()AsList($linkedBean bean, int startRow, int numRows)
    {
        try{
            return this.beanConverter.fromRight(
                this.nativeManager.$jTable.getLoadMethodOfJunction()AsList(
                    this.dbConverter.get${linkedBean}Converter().toRight(bean),
                    startRow,
                    numRows));
        }catch(DAOException e){
            throw new WrapDAOException(e);
        }
    }
#define($junctionParam)
#join($jTable.primaryKeys '#set( $fColumn = $e.foreignColumn)#if($fColumn.table == $table)bean#{else}linked#{end}.$fColumn.getGetMethod()()' ',')
#end
    //23.2 MANY TO MANY override $table.asManagerInterfaceNSP()

    @Override
    public void addJunction($beanClass bean,$linkedBean linked){
        if(null == bean #join($table.primaryKeys '|| null == bean.$e.getGetMethod()()' '')){
            return ;
        }
        if(null == linked #join($linkedTable.primaryKeys '|| null ==bean.$e.getGetMethod()()' '')){
            return ;
        }
        if(!${jTable.asInstanceMethod($isGeneral)}().existsPrimaryKey($junctionParam)){
            $junctionBeanClass junction = new ${junctionBeanClass}();
#foreach($pk in $jTable.primaryKeys)
#set( $fColumn = $pk.foreignColumn)
            junction.${pk.getSetMethod()}(#if($fColumn.table == $table)bean#{else}linked#{end}.$fColumn.getGetMethod()());
#end
            ${jTable.asInstanceMethod($isGeneral)}().save(junction);
        }
    }
    //23.3 MANY TO MANY override $table.asManagerInterfaceNSP()

    @Override
    public int deleteJunction($beanClass bean,$linkedBean linked){
        if(null == bean #join($table.primaryKeys '|| null == bean.$e.getGetMethod()()' '')){
            return 0;
        }
        if(null == linked #join($linkedTable.primaryKeys '|| null ==bean.$e.getGetMethod()()' '')){
            return 0;
        }
        return ${jTable.asInstanceMethod($isGeneral)}().deleteByPrimaryKey($junctionParam);
    }
    //23.4 MANY TO MANY override $table.asManagerInterfaceNSP()

    @Override
    public void addJunction($beanClass bean,$linkedBean... linkedBeans){
        if(null != linkedBeans){
            for($linkedBean linked:linkedBeans){
                addJunction(bean,linked);
            }
        }
    }
    //23.5 MANY TO MANY override $table.asManagerInterfaceNSP()

    @Override
    public void addJunction($beanClass bean,java.util.Collection<$linkedBean> linkedBeans){
        if(null != linkedBeans){
            for($linkedBean linked:linkedBeans){
                addJunction(bean,linked);
            }
        }
    }
    //23.6 MANY TO MANY override $table.asManagerInterfaceNSP()

    @Override
    public int deleteJunction($beanClass bean,$linkedBean... linkedBeans){
        int count = 0;
        if(null != linkedBeans){
            for($linkedBean linked:linkedBeans){
                count += deleteJunction(bean,linked);
            }
        }
        return count;
    }
    //23.7 MANY TO MANY override $table.asManagerInterfaceNSP()

    @Override
    public int deleteJunction($beanClass bean,java.util.Collection<$linkedBean> linkedBeans){
        int count = 0;
        if(null != linkedBeans){
            for($linkedBean linked:linkedBeans){
                count += deleteJunction(bean,linked);
            }
        }
        return count;
    }
#end
    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________
    //25

    @Override
    public int countWhere(String where)
    {
        try{
            return this.nativeManager.countWhere(where);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //20

    @Override
    public int countUsingTemplate(${beanClass} bean, int searchType)
    {
        try{
            return this.nativeManager.countUsingTemplate(this.beanConverter.toRight(bean),searchType);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }


    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________

    //35
    /**
     * @return {@link WrapListener} instance
     */
    @Override
    public TableListener<$beanClass> registerListener(TableListener<$beanClass> listener)
    {
        WrapListener wrapListener;
        if(listener instanceof WrapListener){
            wrapListener = (WrapListener)listener;
            this.nativeManager.registerListener(wrapListener.nativeListener);
        }else{
            wrapListener = new WrapListener(listener);
            this.nativeManager.registerListener(wrapListener.nativeListener);
        }
        return wrapListener;
    }

    //36

    @Override
    public void unregisterListener(TableListener<$beanClass> listener)
    {
        if(!(listener instanceof WrapListener)){
            throw new IllegalArgumentException("invalid listener type: " + WrapListener.class.getName() +" required");
        }
        this.nativeManager.unregisterListener(((WrapListener)listener).nativeListener);
    }
    
    //37

    @Override
    public void fire(TableListener.Event event, $beanClass bean){
        fire(event.ordinal(), bean);
    }
    
    //37-1

    @Override
    public void fire(int event, $beanClass bean){
        try{
            this.nativeManager.fire(event, this.beanConverter.toRight(bean));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    //37-2
    /**
     * bind foreign key listener to foreign table for DELETE RULE
     */
    void bindForeignKeyListenerForDeleteRule(){
        this.nativeManager.bindForeignKeyListenerForDeleteRule();
    }
    //37-3
    /**
     * unbind foreign key listener from all of foreign tables <br>
     * @see ${esc.hash}bindForeignKeyListenerForDeleteRule()
     */
    void unbindForeignKeyListenerForDeleteRule(){
        this.nativeManager.unbindForeignKeyListenerForDeleteRule();

    }
    /**
     * wrap {@code TableListener<$beanClass>} as native listener
     */
    public class WrapListener implements TableListener<$beanClass>{
        private final TableListener<$beanClass> listener;
        private final net.gdface.facelog.dborm.TableListener<$nativeClass> nativeListener;
        private WrapListener(final TableListener<$beanClass> listener) {
            if(null == listener){
                throw new NullPointerException();
            }
            this.listener = listener;
            this.nativeListener = new net.gdface.facelog.dborm.TableListener<$nativeClass> (){

                @Override
                public void beforeInsert($nativeClass bean) throws DAOException {
                    listener.beforeInsert(${managerClassNSP}.this.beanConverter.fromRight(bean));                
                }

                @Override
                public void afterInsert($nativeClass bean) throws DAOException {
                    listener.afterInsert(${managerClassNSP}.this.beanConverter.fromRight(bean));
                }

                @Override
                public void beforeUpdate($nativeClass bean) throws DAOException {
                    listener.beforeUpdate(${managerClassNSP}.this.beanConverter.fromRight(bean));
                }

                @Override
                public void afterUpdate($nativeClass bean) throws DAOException {
                    listener.afterUpdate(${managerClassNSP}.this.beanConverter.fromRight(bean));
                }

                @Override
                public void beforeDelete($nativeClass bean) throws DAOException {
                    listener.beforeDelete(${managerClassNSP}.this.beanConverter.fromRight(bean));
                }

                @Override
                public void afterDelete($nativeClass bean) throws DAOException {
                    listener.afterDelete(${managerClassNSP}.this.beanConverter.fromRight(bean));
                }};
        }

        @Override
        public void beforeInsert($beanClass bean) {
            listener.beforeInsert(bean);
        }

        @Override
        public void afterInsert($beanClass bean) {
            listener.afterInsert(bean);
        }

        @Override
        public void beforeUpdate($beanClass bean) {
            listener.beforeUpdate(bean);
        }

        @Override
        public void afterUpdate($beanClass bean) {
            listener.afterUpdate(bean);
        }

        @Override
        public void beforeDelete($beanClass bean) {
            listener.beforeDelete(bean);
        }

        @Override
        public void afterDelete($beanClass bean) {
            listener.afterDelete(bean);
        }        
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    //43

    @Override
    public boolean isPrimaryKey(String column){
        return this.nativeManager.isPrimaryKey(column);
    }
    
    @Override
    public int loadBySqlForAction(String sql, Object[] argList, int[] fieldList,int startRow, int numRows,Action<$beanClass> action){
        try{
            return this.nativeManager.loadBySqlForAction(sql,argList,fieldList,startRow,numRows,this.toNative(action));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
    @Override
    public <T>T runAsTransaction(Callable<T> fun) {
        try{
            return this.nativeManager.runAsTransaction(fun);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
    private ${pkg}.TableManager.Action<$nativeClass> toNative(final Action<$beanClass> action){
        if(null == action){
            throw new NullPointerException();
        }
        return new ${pkg}.TableManager.Action<$nativeClass>(){

            @Override
            public void call($nativeClass bean) {
                action.call(${managerClassNSP}.this.beanConverter.fromRight(bean));
            }

            @Override
            public $nativeClass getBean() {
                return  ${managerClassNSP}.this.beanConverter.toRight(action.getBean());
            }};
    }
    
#if ( 1 == $table.countPrimaryKeys() )
#set ($pk = $table.getPrimaryKey())
#if ( $pk.hasPrimaryType() )
#set ($pkType = $pk.getJavaPrimaryType())
#else
#set ($pkType = $pk.getJavaType())
#end
    //45 override $table.asManagerInterfaceNSP()

    @Override 
    public java.util.List<$pk.getJavaType()> toPrimaryKeyList($beanClass... beans){        
        if(null == beans){
            return new java.util.ArrayList<$pk.getJavaType()>();
        }
        java.util.ArrayList<$pk.getJavaType()> list = new java.util.ArrayList<$pk.getJavaType()>(beans.length);
        for($beanClass bean:beans){
            list.add(null == bean ? null : bean.$pk.getGetMethod()());
        }
        return list;
    }
    //46 override $table.asManagerInterfaceNSP()

    @Override 
    public java.util.List<$pk.getJavaType()> toPrimaryKeyList(java.util.Collection<$beanClass> beans){        
        if(null == beans){
            return new java.util.ArrayList<$pk.getJavaType()>();
        }
        java.util.ArrayList<$pk.getJavaType()> list = new java.util.ArrayList<$pk.getJavaType()>(beans.size());
        for($beanClass bean:beans){
            list.add(null == bean ? null : bean.$pk.getGetMethod()());
        }
        return list;
    }
#end##1 == $table.countPrimaryKeys()
################### method for self-reference field#################
#foreach($selfFk in $table.selfRefKeys)
#if($velocityCount == 1)

    //_____________________________________________________________________
    //
    // SELF-REFERENCE
    //_____________________________________________________________________
#end
    //47 $table.asManagerInterfaceNSP()

    @Override
    public java.util.List<$beanClass> $table.getListMethod($selfFk)(#join($primaryKeys '$e.getJavaType() $e.getVarName()' ',')){
        $beanClass parent = (#join($primaryKeys 'null == $e.getVarName()' ' || '))
            ? null
            : new $beanClass(#join($primaryKeys '$e.getVarName()' ','));
        java.util.List<$beanClass> list;
        for(list = new java.util.ArrayList<$beanClass>();null != parent;list.add(parent)){
            parent = loadByPrimaryKey(#join($primaryKeys 'parent.$selfFk.foreignColumnOf($e).getGetMethod()()' ','));
            if(#join($primaryKeys 'equal($e.getVarName(),parent.$e.getGetMethod()())' ' && ')){
                // cycle reference
                list.add(parent);
                break;
            }
        }
        java.util.Collections.reverse(list);
        return list;
    }
    //48 $table.asManagerInterfaceNSP()

    @Override
    public java.util.List<$beanClass> $table.getListMethod($selfFk)($beanClass bean){
        return null == bean
                ? java.util.Collections.<$beanClass>emptyList()
                : $table.getListMethod($selfFk)(#join($primaryKeys 'bean.$e.getGetMethod()()' ','));
    }
    //49 $table.asManagerInterfaceNSP()

    @Override
    public int $table.getLevelMethod($selfFk)(#join($primaryKeys '$e.getJavaType() $e.getVarName()' ',')){
        $beanClass parent = (#join($primaryKeys 'null == $e.getVarName()' ' || '))
            ? null
            : new $beanClass(#join($primaryKeys '$e.getVarName()' ','));
        int count;
        for(count = 0;null != parent;++count){
            parent = loadByPrimaryKey(#join($primaryKeys 'parent.$selfFk.foreignColumnOf($e).getGetMethod()()' ','));
            if(null != parent #join($primaryKeys ' && equal($e.getVarName(),parent.$e.getGetMethod()())' '')){
                return -1;
            }
        }
        return count;
    }
    //50 $table.asManagerInterfaceNSP()

    @Override
    public int $table.getLevelMethod($selfFk)($beanClass bean){
        return null == bean
                ? 0
                : $table.getLevelMethod($selfFk)(#join($primaryKeys 'bean.$e.getGetMethod()()' ','));
    }
    //51 $table.asManagerInterfaceNSP()

    @Override
    public boolean $table.getCyeleTestMethod($selfFk)(#join($primaryKeys '$e.getJavaType() $e.getVarName()' ',')){
        return $table.getLevelMethod($selfFk)(#join($primaryKeys '$e.getVarName()' ',')) < 0;
    }
    //52 $table.asManagerInterfaceNSP()

    @Override
    public boolean $table.getCyeleTestMethod($selfFk)($beanClass bean){
        return $table.getLevelMethod($selfFk)(bean) < 0;
    }
    //53 $table.asManagerInterfaceNSP()

    @Override
    public $beanClass $table.getTopMethod($selfFk)(#join($primaryKeys '$e.getJavaType() $e.getVarName()' ',')){
        if(#join($primaryKeys 'null == $e.getVarName()' ' || ')){
            throw new NullPointerException();
        }
        $beanClass parent = new $beanClass(#join($primaryKeys '$e.getVarName()' ','));
        for(;#join($selfFk.columns 'null != parent.$e.getGetMethod()()' ' && ');){
            parent = loadByPrimaryKey(#join($primaryKeys 'parent.$selfFk.foreignColumnOf($e).getGetMethod()()' ','));
            if(#join($primaryKeys 'equal($e.getVarName(),parent.$e.getGetMethod()())' ' && ')){
                throw new IllegalStateException("cycle on field: " + #join($selfFk.columns '"$e.name"' '+'));
            }
        }
        return parent;
    }
    //54 $table.asManagerInterfaceNSP()

    @Override
    public $beanClass $table.getTopMethod($selfFk)($beanClass bean){
        if(null == bean){
            throw new NullPointerException();
        }
        return $table.getTopMethod($selfFk)(#join($primaryKeys 'bean.$e.getGetMethod()()' ','));
    }
#if($table.countPrimaryKeys() == 1)
    //55 $table.asManagerInterfaceNSP()

    @Override
    public $table.primaryKey.getJavaType() $table.getCheckNotCycleMethod($selfFk)($table.primaryKey.getJavaType() $table.primaryKey.getVarName()){
        if($table.getCyeleTestMethod($selfFk)($table.primaryKey.getVarName())){
            throw new IllegalStateException("cycle on field: " + #join($selfFk.columns '"$e.name"' '+'));
        }
        return $table.primaryKey.getVarName();
    }
#end
    //56 $table.asManagerInterfaceNSP()

    @Override
    public $beanClass $table.getCheckNotCycleMethod($selfFk)($beanClass bean){
        if($table.getCyeleTestMethod($selfFk)(bean)){
            throw new IllegalStateException("cycle on field: " + #join($selfFk.columns '"$e.name"' '+'));
        }
        return bean;
    }
#end
}
