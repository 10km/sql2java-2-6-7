#parse( "header.include.vm" )
#parse( "schema.include.vm" )
#parse( "table.include.vm" )
######################
#set ( $gpkg = $codewriter.getProperty('general.package') )
#set ( $subpkg=$db.engineAsSubPackage() )
#set ( $managerClassNSP = $table.asManagerClassNSP() )
#set ( $nativeClass = $table.asBeanClass() )
#set ( $beanClass = $table.asBeanClassNSP() )
#set ( $listenerClass = $table.asListenerClassNSP() )
#set ( $nativeListener = $table.asListenerClass() )
$codewriter.setCurrentJavaFilename("${gpkg}.${subpkg}", "${managerClassNSP}.java")
package ${gpkg}.${subpkg};

import java.util.concurrent.Callable;

import ${gpkg}.${beanClass};
import ${gpkg}.IBeanConverter;
import ${gpkg}.IDbConverter;
import ${gpkg}.BaseBean;
import ${gpkg}.TableManager;
#foreach ($linkedTable in $linkedTables)
import ${gpkg}.${linkedTable.asBeanClassNSP()};
#end
import ${gpkg}.TableListener;
import ${gpkg}.WrapDAOException;

import ${pkg}.exception.DAOException;
import ${table.getPackage()}.${managerClass};
import ${table.getPackage()}.${nativeClass};
#foreach ($foreighTable in $foreighTables)
import ${foreighTable.getPackage()}.${foreighTable.asBeanClass()};
#end
#foreach ($importedTable in $importedTables)
import ${importedTable.getPackage()}.${importedTable.asBeanClass()};
#end
/**
 * Handles database calls (save, load, count, etc...) for the $tablename table.<br>
 * all {@link DAOException} be wrapped as {@link WrapDAOException} to throw.
#if ( $table.hasRemarks() )
 * Remarks: $table.getRemarks()
#end
 * @author guyadong
 */
public class $managerClassNSP extends TableManager.Adapter<$beanClass>
{
    private $managerClass nativeManager = ${managerClass}.getInstance();
    private IDbConverter<#join($tables "${e.getPackage()}.${e.asBeanClass()}" ',')> dbConverter = DbConverter.INSTANCE;
    private IBeanConverter<$beanClass,${nativeClass}> beanConverter = dbConverter.get${beanClass}Converter();
    private static $managerClassNSP singleton = new $managerClassNSP();

    /**
    * @return table name
    */
    public String getTableName() {
        return this.nativeManager.getTableName();
    }

    /**
    * @return field names of table
    */
    public String[] getFieldNames() {
        return this.nativeManager.getFieldNames();
    }

    public String getFieldNamesAsString() {
        return this.nativeManager.getFieldNamesAsString();
    }
    
    public String[] getFullFieldNames() {
        return this.nativeManager.getFullFieldNames();
    }
    
    /**
    * @return primarykeyNames
    */
    public String[] getPrimarykeyNames() {
        return this.nativeManager.getPrimarykeyNames();
    }
    
    /**
     * Get the {@link $managerClassNSP} singleton.
     *
     * @return {@link $managerClassNSP}
     */
    public static $managerClassNSP getInstance()
    {
        return singleton;
    }
   
    public IDbConverter<#join($tables "${e.getPackage()}.${e.asBeanClass()}" ',')> getDbConverter() {
        return dbConverter;
    }

    /**
     * set  {@link IDbConverter} as converter used by manager.<br>
     * throw {@link NullPointerException} if {@code dbConverter} is null
     * @param dbConverter
     */
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public synchronized void setDbConverter(IDbConverter dbConverter) {
        if( null == dbConverter)
            throw new NullPointerException();
        this.dbConverter = dbConverter;
        this.beanConverter = this.dbConverter.get${beanClass}Converter();
    }
#if ( $table.countPrimaryKeys() > 0 )
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

#set ( $keys = "" )
#set ( $sql = "" )
    /**
     * Loads a {@link $beanClass} from the $tablename using primary key fields.
     *
#foreach ( $pk in $primaryKeys )
     * @param $pk.getVarName() $pk.getJavaType() - PK# $velocityCount
#if ( $velocityCount > 1 )#set( $keys = "$keys, " )#end
#set ( $keys = "$keys${pk.getJavaType()} $pk.getVarName()" )
#end     
     * @return a unique $beanClass or {@code null} if not found
     */
    //1
    public $beanClass loadByPrimaryKey($keys)
    {
        try{
            return this.beanConverter.fromRight(nativeManager.loadByPrimaryKey(#join($primaryKeys "$e.getVarName()" ',')));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //1.2
    @Override
    public $beanClass loadByPrimaryKey(${beanClass} bean)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadByPrimaryKey(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    /**
     * Loads a {@link $beanClass} from the $tablename using primary key fields.
     * when you don't know which is primary key of table,you can use the method.
     * @param keys primary keys value:<br> 
     *             #join($primaryKeys "PK# $velocityCount:$e.getJavaType()" ',')
     
     * @return a unique {@link $beanClass} or {@code null} if not found
     * @see {@link #loadByPrimaryKey($keys)}
     */
    //1.3
    public $beanClass loadByPrimaryKey(Object ...keys){
        if(keys.length != $table.countPrimaryKeys() )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
#foreach ( $pk in $primaryKeys )
#set( $kidx = $velocityCount - 1 )
        if(! (keys[$kidx] instanceof $pk.getJavaType()))
            throw new IllegalArgumentException("invalid type for the No.$velocityCount argument,expected type:$pk.getJavaType()");
#end        
        return loadByPrimaryKey(#foreach($pk in $primaryKeys)#if ( $velocityCount > 1 ),#end#set( $kidx = $velocityCount - 1 )($pk.getJavaType())keys[$kidx]#end);
    }
    
#set( $keys = "" )    
    /**
     * Returns true if this $tablename contains row with primary key fields.
#foreach ( $pk in $primaryKeys )
     * @param $pk.getVarName() $pk.getJavaType() - PK# $velocityCount
## part 1
#if ( $velocityCount > 1 )#set( $keys = "$keys, " )#set ( $sql = "$sql and " )#end
#set ( $keys = "$keys${pk.getJavaType()} $pk.getVarName()" )
## part 2
#set ( $sql = "$sql$pk.getName()=?" )
#end     
     * @see #loadByPrimaryKey($keys)
     */
    //1.4
    public boolean existsPrimaryKey($keys)
    {
        return null!=loadByPrimaryKey(#join($primaryKeys "$e.getVarName()" ',') );
    }
    
#set ( $sql = "" )
    /**
     * Delete row according to its primary keys.<br>
     * all keys must not be null
     *
#foreach ( $pk in $primaryKeys )
     * @param $pk.getVarName() $pk.getJavaType() - PK# $velocityCount
## part 1     
#if ( $velocityCount > 1 )#set ( $sql = "$sql and " )#end
#set ( $sql = "$!sql$pk.getName()=?" )     
#end     
     * @return the number of deleted rows
     */
    //2
    public int deleteByPrimaryKey($keys)
    {
        try
        {
            return nativeManager.deleteByPrimaryKey(#join($primaryKeys "$e.getVarName()" ','));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * Delete row according to its primary keys.
     *
     * @param keys primary keys value:<br> 
     *             #join($primaryKeys "PK# $velocityCount:$e.getJavaType()" ',')
     
     * @return the number of deleted rows
     * @see {@link #deleteByPrimaryKey($keys)}
     */   
    //2.1
    public int deleteByPrimaryKey(Object ...keys){
        if(keys.length != $table.countPrimaryKeys() )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
#foreach ( $pk in $primaryKeys )
#set( $kidx = $velocityCount - 1 )
        if(! (keys[$kidx] instanceof $pk.getJavaType()))
            throw new IllegalArgumentException("invalid type for the No.$velocityCount argument,expected type:$pk.getJavaType()");
#end        
        return deleteByPrimaryKey(#foreach($pk in $primaryKeys)#if ( $velocityCount > 1 ),#end#set( $kidx = $velocityCount - 1 )($pk.getJavaType())keys[$kidx]#end);
    }

#end ## $table.countPrimaryKeys() > 0
## ======================================================
## xImportedKeys template
## ======================================================
#####################
#macro(foreachImportedTables $do $separator $newline)
#set ( $m_count = 0 ) 
#foreach ($m_importedTable in $importedTables)
#set ( $m_importedClass = "$m_importedTable.asBeanClassNSP()" )
#set ( $m_importedNative = "$m_importedTable.asBeanClass()" )
#set ( $m_importedClassManager = "$m_importedTable.asManagerClass()" )
#foreach( $m_fkName in $m_importedTable.getFkMapNames($table.name) )
#set($m_count = $m_count + 1)
#set ( $m_columnsOfFk = $m_importedTable.getForeignKeysByFkName($m_fkName) )#if($m_count > 1 )$separator#end$do#if(!$newline.empty)

#end#end#end
#end
#######################
#macro (foreachForeignTables $do $separator $newline)
#set ( $m_count = 0 ) 
#foreach($m_foreignTable in $foreignTables)
#set ( $m_foreignClass = "$m_foreignTable.asBeanClassNSP()" )
#set ( $m_foreignNative = "$m_foreignTable.asBeanClass()" )
#set ( $m_foreignClassManager = "$m_foreignTable.asManagerClass()" )
#foreach( $m_fkName in $table.getFkMapNames($m_foreignTable.name) )
#set($m_count = $m_count + 1)
#set ( $m_columnsOfFk = $table.getForeignKeysByFkName($m_fkName) )#if($m_count > 1)$separator#end$do#if(!$newline.empty)

#end#end#end
#end

#if ($table.hasImportedKeys())
    //////////////////////////////////////
    // IMPORT KEY GENERIC METHOD
    //////////////////////////////////////
    private static final  java.util.HashMap<String, Class<?>[]> IMPORT_RESULT_TYPES=new java.util.HashMap<String,Class<?>[]>(){
        private static final long serialVersionUID = 1L;
    {        
#foreach($importedTable in $importedTables)
#set ( $importedClass = "$importedTable.asBeanClassNSP()" )
#set ( $importedNative = "$importedTable.asBeanClass()" )
#set ( $importedClassManager = "$importedTable.asManagerClass()" )
#foreach( $fkName in $importedTable.getFkMapNames($table.name) )
#set ( $columnsOfFk = $importedTable.getForeignKeysByFkName($fkName) )
        put("${importedTable.asImpArg($fkName)}",new Class<?>[]{${importedClass}.class,${importedNative}.class});
#end
#end
    }} ;
    
    @SuppressWarnings("unchecked")
    private final <T> IBeanConverter<T,Object> getBeanConverter(String fkName){
        Class<?>[] resultClass=IMPORT_RESULT_TYPES.get(fkName);
        if(null == resultClass)
            throw new IllegalArgumentException("invalid fkName: " + fkName);
        return (IBeanConverter<T, Object>) this.dbConverter.getBeanConverter(resultClass[0],resultClass[1]);
    }
    
    /**
     * Retrieves imported T objects by fkName.<br>
     * @param <T>
     * <ul>
    #foreachImportedTables(" *     <li> ${m_importedTable.asImpArg($m_fkName)} -> ${m_importedClass}</li>" '    ' 'true')
     * </ul>
     * @param bean the {@link $beanClass} object to use
     * @param fkName valid values: #foreachImportedTables("${m_importedTable.asImpArg($m_fkName)}" ',' '')

     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     */
    @Override
    public <T extends BaseBean> T[] getImportedBeans($beanClass bean,String fkName){
        try {
            IBeanConverter<T,Object> resultConverter = getBeanConverter(fkName);
            return resultConverter.fromRight(nativeManager.getImportedBeans( this.beanConverter.toRight(bean),fkName));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    /**
     * Retrieves imported T objects by fkName.<br>
     * @param <T>
     * <ul>
    #foreachImportedTables(" *     <li> ${m_importedTable.asImpArg($m_fkName)} -> ${m_importedClass}</li>" '    ' 'true')
     * </ul>
     * @param bean the {@link $beanClass} object to use
     * @param fkName valid values: #foreachImportedTables("${m_importedTable.asImpArg($m_fkName)}" ',' '')

     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     */
    @Override
    public <T extends BaseBean> java.util.List<T> getImportedBeansAsList($beanClass bean,String fkName){
        try {
            IBeanConverter<T,Object> resultConverter = getBeanConverter(fkName);
            return resultConverter.fromRight(nativeManager.getImportedBeansAsList( this.beanConverter.toRight(bean),fkName));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    /**
     * Set the T objects as imported beans of bean object by fkName.<br>
     * @param <T>
     * 
     * <ul>
    #foreachImportedTables(" *     <li> ${m_importedTable.asImpArg($m_fkName)} -> ${m_importedClass}</li>" '    ' 'true')
     * </ul>
     * @param bean the {@link $beanClass} object to use
     * @param importedBeans the ${importedClass} array to associate to the {@link $beanClass}
     * @param fkName valid values: #foreachImportedTables("${m_importedTable.asImpArg($m_fkName)}" ',' '')

     * @return importedBeans always
     */
    @Override
    public <T extends BaseBean> T[] setImportedBeans($beanClass bean,T[] importedBeans,String fkName){
        try {
            IBeanConverter<T,Object> resultConverter = getBeanConverter(fkName);
            return resultConverter.fromRight(importedBeans,nativeManager.setImportedBeans( 
                this.beanConverter.toRight(bean),
                resultConverter.toRight(importedBeans),
                fkName));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    /**
     * Set the importedBeans associates to the bean by fkName<br>
     * @param <T>
     * <ul>
    #foreachImportedTables(" *     <li> ${m_importedTable.asImpArg($m_fkName)} -> ${m_importedClass} java.util.Collection</li>" '    ' 'true')
     * </ul>
     * @param bean the {@link $beanClass} object to use
     * @param importedBeans the <T> object to associate to the {@link $beanClass}
     * @param fkName valid values: #foreachImportedTables("${m_importedTable.asImpArg($m_fkName)}" ',' '')

     * @return importedBeans always
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends BaseBean,C extends java.util.Collection<T>> C setImportedBeans($beanClass bean,C importedBeans,String fkName){
        try {
            IBeanConverter<T,Object> resultConverter = getBeanConverter(fkName);
            if(importedBeans instanceof java.util.List){
                resultConverter.fromRight((java.util.List<T>)importedBeans,nativeManager.setImportedBeans( 
                        this.beanConverter.toRight(bean),
                        resultConverter.toRight(importedBeans),
                        fkName));            	
            }else{
                T[] array = importedBeans.toArray((T[])new Object[importedBeans.size()]);
                resultConverter.fromRight(array,nativeManager.setImportedBeans( 
                    this.beanConverter.toRight(bean),
                    resultConverter.toRight(array),
                    fkName));                
            }
            return importedBeans;
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
#end ## $table.hasImportedKeys()

#foreach ($importedTable in $importedTables)
#if ( $velocityCount == 1 )

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
#end
#set ( $importedClass = "$importedTable.asBeanClassNSP()" )
#set ( $importedNative = "$importedTable.asBeanClass()" )
#set ( $importedClassManager = "$importedTable.asManagerClass()" )
#foreach( $fkName in $importedTable.getFkMapNames($table.name) )
#set ( $columnsOfFk = $importedTable.getForeignKeysByFkName($fkName) )
    /**
     * Retrieves the {@link $importedClass} object from the #join($columnsOfFk "$e.fullName" ",") field.<BR>
     * FK_NAME : $fkName 
     * @param bean the {@link $beanClass}
     * @return the associated {@link $importedClass} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.1 GET IMPORTED
    public $importedClass[] ${importedTable.getImportedBeansGetMethod($fkName)}($beanClass bean)
    {
        try {
            return this.dbConverter.get${importedClass}Converter().fromRight(nativeManager.${importedTable.getImportedBeansGetMethod($fkName)}( this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * Retrieves the {@link $importedClass} object from #join($columnsOfFk "$e.fullName" ",") field.<BR>
     * FK_NAME:$fkName
     * @param bean the {@link $beanClass}
     * @return the associated {@link $importedClass} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.2 GET IMPORTED
    public java.util.List<$importedClass> ${importedTable.getImportedBeansGetMethod($fkName)}AsList($beanClass bean)
    {
        try {
            return this.dbConverter.get${importedClass}Converter().fromRight(nativeManager.${importedTable.getImportedBeansGetMethod($fkName)}AsList( this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * set  the {@link $importedClass} object array associate to $beanClass by the #join($columnsOfFk "$e.fullName" ",") field.<BR>
     * FK_NAME : $fkName 
     * @param bean the referenced {@link $beanClass}
     * @param importedBeans imported beans from $importedTable.name
     * @return importedBeans always
     * @see {@link ${importedClassManager}#$importedTable.getReferencedVarSetMethod($fkName)($importedClass, $beanClass)
     */
    //3.3 SET IMPORTED
    public $importedClass[] ${importedTable.getImportedBeansSetMethod($fkName)}($beanClass bean , $importedClass[] importedBeans)
    {
        try {
            IBeanConverter<$importedClass,$importedNative> importedConverter = this.dbConverter.get${importedClass}Converter();
            return importedConverter.fromRight(importedBeans,
                this.nativeManager.${importedTable.getImportedBeansSetMethod($fkName)}(
                    this.beanConverter.toRight(bean),
                    importedConverter.toRight(importedBeans)
                ));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * set  the {@link $importedClass} object java.util.Collection associate to $beanClass by the #join($columnsOfFk "$e.fullName" ",") field.<BR>
     * FK_NAME:$fkName
     * @param bean the referenced {@link $beanClass} 
     * @param importedBeans imported beans from $importedTable.name 
     * @return importedBeans always
     * @see {@link ${importedClassManager}#$importedTable.getReferencedVarSetMethod($fkName)($importedClass, $beanClass)
     */
    //3.4 SET IMPORTED
    public <C extends java.util.Collection<$importedClass>> C ${importedTable.getImportedBeansSetMethod($fkName)}($beanClass bean , C importedBeans)
    {
        try {
            IBeanConverter<$importedClass,$importedNative> importedConverter = this.dbConverter.get${importedClass}Converter();
            if(importedBeans instanceof java.util.List){
                importedConverter.fromRight((java.util.List<$importedClass>)importedBeans,nativeManager.${importedTable.getImportedBeansSetMethod($fkName)}(
                    this.beanConverter.toRight(bean),
                    importedConverter.toRight(importedBeans)
                    ));
            }else{
                $importedClass[] array = importedBeans.toArray(new $importedClass[0]);
                importedConverter.fromRight(array,nativeManager.${importedTable.getImportedBeansSetMethod($fkName)}(
                    this.beanConverter.toRight(bean),
                    importedConverter.toRight(array)
                    ));
            }
            return importedBeans;
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

#end
#end


## ======================================================
## only xImportedKeys template
## ======================================================
#if( $table.hasForeignTables() || $table.hasImportedTables() )
    /**
     * Save the $beanClass bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link $beanClass} bean to be saved
    #foreachForeignTables(" * @param $table.asRefArg($m_fkName) the {@link $m_foreignClass} bean referenced by {@link $beanClass} " '    ' 'true')
    #foreachImportedTables(" * @param $m_importedTable.asImpArg($m_fkName) the {@link $m_importedClass} bean refer to {@link $beanClass} " '    ' 'true' )
     * @return the inserted or updated {@link $beanClass} bean
     */
    //3.5 SYNC SAVE 
    public $beanClass save($beanClass bean
        #foreachForeignTables( ", $m_foreignClass $table.asRefArg($m_fkName) " '' '')

        #foreachImportedTables( ", $m_importedClass[] $m_importedTable.asImpArg($m_fkName) " '' ''))
    {
        try{
            return this.beanConverter.fromRight(bean,nativeManager.save(this.beanConverter.toRight(bean)
                #foreachForeignTables( ", this.dbConverter.get${m_foreignClass}Converter().toRight($table.asRefArg($m_fkName)) " '' '')
                #foreachImportedTables( ", this.dbConverter.get${m_importedClass}Converter().toRight($m_importedTable.asImpArg($m_fkName))  " '' '')));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    } 
    /**
     * Transaction version for sync save
     * @see {@link #save($beanClass #foreachForeignTables( ", $m_foreignClass " '' '')#foreachImportedTables( ", $m_importedClass[] " '' ''))}
     */
    //3.6 SYNC SAVE AS TRANSACTION
    public $beanClass saveAsTransaction(final $beanClass bean
        #foreachForeignTables( ",final $m_foreignClass $table.asRefArg($m_fkName) " '' '')

        #foreachImportedTables( ",final $m_importedClass[] $m_importedTable.asImpArg($m_fkName) " '' ''))
    {
        return this.runAsTransaction(new Callable<$beanClass>(){
            @Override
            public $beanClass call() throws Exception {
                return save(bean #foreachForeignTables( ", $table.asRefArg($m_fkName) " '' '')#foreachImportedTables( ", $m_importedTable.asImpArg($m_fkName) " '' ''));
            }});
    }
#if( $table.hasImportedTables() )
    /**
     * Save the $beanClass bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link $beanClass} bean to be saved
    #foreachForeignTables(" * @param $table.asRefArg($m_fkName) the {@link $m_foreignClass} bean referenced by {@link $beanClass} " '    ' 'true')
    #foreachImportedTables(" * @param $m_importedTable.asImpArg($m_fkName) the {@link $m_importedClass} bean refer to {@link $beanClass} " '    ' 'true' )
     * @return the inserted or updated {@link $beanClass} bean
     */
    //3.7 SYNC SAVE 
    public $beanClass save($beanClass bean
        #foreachForeignTables( ", $m_foreignClass $table.asRefArg($m_fkName) " '' '')

        #foreachImportedTables( ", java.util.Collection<$m_importedClass> $m_importedTable.asImpArg($m_fkName) " '' ''))
    {
        try{
            return this.beanConverter.fromRight(bean,nativeManager.save(this.beanConverter.toRight(bean)
                #foreachForeignTables( ", this.dbConverter.get${m_foreignClass}Converter().toRight($table.asRefArg($m_fkName)) " '' '')
                #foreachImportedTables( ", this.dbConverter.get${m_importedClass}Converter().toRight($m_importedTable.asImpArg($m_fkName))  " '' '')));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }   
    /**
     * Transaction version for sync save
     * @see {@link #save($beanClass #foreachForeignTables( ", $m_foreignClass " '' '')#foreachImportedTables( ", java.util.Collection " '' ''))}
     */
    //3.8 SYNC SAVE AS TRANSACTION
    public $beanClass saveAsTransaction(final $beanClass bean
        #foreachForeignTables( ",final $m_foreignClass $table.asRefArg($m_fkName) " '' '')

        #foreachImportedTables( ",final  java.util.Collection<$m_importedClass> $m_importedTable.asImpArg($m_fkName) " '' '')) throws DAOException
    {
        return this.runAsTransaction(new Callable<$beanClass>(){
            @Override
            public $beanClass call() throws Exception {
                return save(bean #foreachForeignTables( ", $table.asRefArg($m_fkName) " '' '')#foreachImportedTables( ", $m_importedTable.asImpArg($m_fkName) " '' ''));
            }});
    }
#end ## $table.hasImportedTables()
#end ## $table.hasForeignTables() || $table.hasImportedTables()
## ======================================================
## xForeignKeys template
## ======================================================
#if ($table.hasForeignKeys())
    //////////////////////////////////////
    // FOREIGN KEY GENERIC METHOD
    //////////////////////////////////////
    private static final  java.util.HashMap<String, Class<?>[]> REF_METHODS=new java.util.HashMap<String,Class<?>[]>(){
        private static final long serialVersionUID = 1L;
    {        
#foreach($foreignTable in $foreignTables)
#set ( $foreignClass = "$foreignTable.asBeanClassNSP()" )
#set ( $foreignNative = "$foreignTable.asBeanClass()" )
#set ( $foreignClassManager = "$foreignTable.asManagerClass()" )
#foreach( $fkName in $table.getFkMapNames($foreignTable.name) )
#set ( $columnsOfFk = $table.getForeignKeysByFkName($fkName) )
    put("${table.asRefArg($fkName)}",new Class<?>[]{${foreignClass}.class,${foreignTable.getPackage()}.${foreignNative}.class});
#end
#end
    }} ;
    /**
     * Retrieves the bean object referenced by fkName.<br>
     * @param <T>
     * <ul>
    #foreachForeignTables(" *     <li> ${table.asRefArg($m_fkName)} -> ${m_foreignClass}</li>" '    ' 'true')
     * </ul>
     * @param bean the {@link $beanClass} object to use
     * @param fkName valid values: #foreachForeignTables("${table.asRefArg($m_fkName)}" ',' '')

     * @return the associated <T> bean or {@code null} if {@code bean} or {@code beanToSet} is {@code null}
     */
    @Override
    public <T extends BaseBean> T getReferencedBean($beanClass bean,String fkName){
        try {
            return this.nativeManager.getReferencedBean( this.beanConverter.toRight(bean), fkName);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    /**
     * Associates the {@link $beanClass} object to the bean object by fkName field.<br>
     * 
     * @param <T>
     * <ul>
    #foreachForeignTables(" *     <li> ${table.asRefArg($m_fkName)} -> ${m_foreignClass}</li>" '    ' 'true')
     * </ul>
     * @param bean the {@link $beanClass} object to use
     * @param beanToSet the <T> object to associate to the {@link $beanClass}
     * @param fkName valid values: #foreachForeignTables("${table.asRefArg($m_fkName)}" ',' '')

     * @return always beanToSet saved
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends BaseBean> T setReferencedBean($beanClass bean,T beanToSet,String fkName){
        try {
            if(null == beanToSet) return null;
            Class<?>[] types=REF_METHODS.get(fkName);
            if(null == types)
                throw new IllegalArgumentException(String.format("invalid fkName :%s",fkName));
            @SuppressWarnings("rawtypes")
            IBeanConverter converter=this.dbConverter.getBeanConverter(beanToSet.getClass(),types[1]);
            if( null == converter )
                throw new IllegalArgumentException(String.format("invalid type of 'beanToSet' :%s",beanToSet.getClass().getName()));
            return (T) converter.fromRight(beanToSet,this.nativeManager.setReferencedBean( this.beanConverter.toRight(bean), converter.toRight(beanToSet), fkName));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
#else

    @Override
    public <T extends BaseBean> T getReferencedBean($beanClass bean,String fkName){
        throw new UnsupportedOperationException();
    }
    @Override
    public <T extends BaseBean> T setReferencedBean($beanClass bean,T beanToSet,String fkName){
        throw new UnsupportedOperationException();
    }
#end ## $table.hasForeignKeys()
    
#foreach ($foreignTable in $foreignTables)
#if ( $velocityCount == 1 )
    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////

#end
#set ( $foreignClass = "$foreignTable.asBeanClassNSP()" )
#set ( $foreignNative = "$foreignTable.asBeanClass()" )
#set ( $foreignClassManager = "$foreignTable.asManagerClass()" )
#foreach( $fkName in $table.getFkMapNames($foreignTable.name) )
#set ( $columnsOfFk = $table.getForeignKeysByFkName($fkName) )

    /**
     * Retrieves the {@link $foreignClass} object referenced by #join($columnsOfFk "{@link $beanClass#$e.getGetMethod()}()" ",") field.<br>
     * FK_NAME : $fkName
     * @param bean the {@link $beanClass}
     * @return the associated {@link $foreignClass} bean or {@code null} if {@code bean} is {@code null}
     */
    //3.2 GET REFERENCED VALUE
    public $foreignClass $table.getReferencedVarGetMethod($fkName)($beanClass bean)
    {
        try{
            return this.dbConverter.get${foreignClass}Converter().fromRight(this.nativeManager.$table.getReferencedVarGetMethod($fkName)(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
        
    }

    /**
     * Associates the {@link $beanClass} object to the {@link $foreignClass} object by #join($columnsOfFk "{@link $beanClass#$e.getGetMethod()}()" ",") field.
     *
     * @param bean the {@link $beanClass} object to use
     * @param beanToSet the {@link $foreignClass} object to associate to the {@link $beanClass}
     * @return always beanToSet saved
     * @throws Exception
     */
    //5.2 SET REFERENCED 
    public $foreignClass $table.getReferencedVarSetMethod($fkName)($beanClass bean, $foreignClass beanToSet) throws DAOException
    {
        try{
            return this.dbConverter.get${foreignClass}Converter().fromRight(beanToSet,this.nativeManager.$table.getReferencedVarSetMethod($fkName)(this.beanConverter.toRight(bean),this.dbConverter.get${foreignClass}Converter().toRight(beanToSet)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
#end
#end

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////

    //11
    @Override
    public int deleteByWhere(String where)
    {
        try{
            return this.nativeManager.deleteByWhere(where);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________

    //13
    @Override
    protected $beanClass insert($beanClass bean)
    {
        try{
            return this.beanConverter.fromRight(bean,this.nativeManager.insert(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //14
    @Override
    protected $beanClass update($beanClass bean)
    {
        try{
            return this.beanConverter.fromRight(bean,this.nativeManager.update(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    //18
    @Override
    public $beanClass loadUniqueUsingTemplate(${beanClass} bean)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadUniqueUsingTemplate(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
     }

    //20-5
    @Override
    public int loadUsingTemplate(${beanClass} bean, int[] fieldList, int startRow, int numRows,int searchType, Action<$beanClass> action)
    {
        try {
            return this.nativeManager.loadUsingTemplate(this.beanConverter.toRight(bean),fieldList,startRow,numRows,searchType,this.toNative(action));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //21
    @Override
    public int deleteUsingTemplate(${beanClass} bean)
    {
        try{
            return this.nativeManager.deleteUsingTemplate(this.beanConverter.toRight(bean));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

#if ($table.countIndices() > 0)

    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________

#foreach ( $index in $table.getIndices() )
#if($index.isUnique())
    /**
     * Retrieves an unique $beanClass using the ${index.getName()} index.
     *
#foreach ( $column in $index.getIndexColumnsList() )
     * @param ${column.getVarName()} the ${column.getName()} column's value filter. must not be null
#end
     * @return an array of $beanClass
     */
    public $beanClass loadBy${index.getName()}(#join( $index.getIndexColumnsList() "$e.getJavaType() ${e.getVarName()}" ','))
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadBy${index.getName()}(#join( $index.getIndexColumnsList() "${e.getVarName()}" ',')));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

#else ## $index.isUnique()
    /**
     * Retrieves an array of $beanClass using the ${index.getName()} index.
     *
#foreach ( $column in $index.getIndexColumnsList() )
     * @param ${column.getVarName()} the ${column.getName()} column's value filter.
#end
     * @return an array of $beanClass
     */
    public $beanClass[] loadBy${index.getName()}(#join( $index.getIndexColumnsList() "$e.getJavaType() ${e.getVarName()}" ','))
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadBy${index.getName()}(#join( $index.getIndexColumnsList() "${e.getVarName()}" ',')));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
    /**
     * Retrieves a list of $beanClass using the ${index.getName()} index.
     *
#foreach ( $column in $index.getIndexColumnsList() )
     * @param ${column.getVarName()} the ${column.getName()} column's value filter.
#end
     * @return a list of $beanClass
     */
    public java.util.List<$beanClass> loadBy${index.getName()}AsList(#join( $index.getIndexColumnsList() "$e.getJavaType() ${e.getVarName()}" ','))
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadBy${index.getName()}AsList(#join( $index.getIndexColumnsList() "${e.getVarName()}" ',')));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
#end ## $index.isUnique()

    /**
     * Deletes rows using the ${index.getName()} index.
     *
#foreach ( $column in $index.getIndexColumnsList() )
     * @param ${column.getVarName()} the ${column.getName()} column's value filter.
#end
     * @return the number of deleted objects
     */
    public int deleteBy${index.getName()}(#join( $index.getIndexColumnsList() "$e.getJavaType() ${e.getVarName()}" ','))
    {
        try{
            return this.nativeManager.deleteBy${index.getName()}(#join( $index.getIndexColumnsList() "${e.getVarName()}" ','));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
#end
#end

## Many to Many needs to be templatized.
#set ( $rTables = $codewriter.getRelationTables() )
#foreach ( $rTable in $rTables )
#### if there is a foreign key present in that relation table
#* *##if (! ("$!rTable.getForeignKeyFor( $table )" == "") )
#* *##set ( $oVelocityCount = $velocityCount )
#* *##set ( $lTables = $rTable.linkedTables($db, $codewriter.getTable() ) )
#* *##set ( $rName = $rTable.getName() )
#* *##foreach ( $lTable in $lTables )
#*      *##set ( $lName = $lTable.getName() )
#*      *##if ( $velocityCount == 1 && $oVelocityCount == 1 )
    
    //_____________________________________________________________________
    //
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE
    //_____________________________________________________________________
#*      *##end
#set ( $strLinkedCore = "$!{codewriter.getClassPrefix()}$lTable.asCoreClass()" )
#set ( $strLinkedBean = "${lTable.asBeanClassNSP()}" )
#set ( $strLinkedNative = "${lTable.asBeanClass()}" )
#set ( $strLinkedManager = "${lTable.asManagerClass()}" )
#set ( $strRelationCore = "${rTable.asCoreClass()}" )
#set ( $strRelationBean = "${rTable.asBeanClass()}" )
#set ( $localKey = $rTable.getForeignKeyFor( $table ) )
#set ( $externalKey = $rTable.getForeignKeyFor( $lTable ) )
    /**
     * Retrieves an array of $strLinkedBean using the relation table $strRelationCore given a $beanClass object.
     *
     * @param bean the $beanClass bean to be used
     * @return an array of $strLinkedBean
     */
    //22 MANY TO MANY
    public $strLinkedBean[] load${strLinkedCore}Via$strRelationCore($beanClass bean) 
    {
         return this.load${strLinkedCore}Via$strRelationCore(this.beanConverter.toRight(bean), 1, -1);
    }

    /**
     * Retrieves an array of $strLinkedBean using the relation table $strRelationCore given a $beanClass object, specifying the start row and the number of rows.
     *
     * @param bean the $beanClass bean to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of $strLinkedBean
     */
    //23 MANY TO MANY
    public $strLinkedBean[] load${strLinkedCore}Via$strRelationCore($beanClass bean, int startRow, int numRows)
    {
        try
        {
            return this.dbConverter.get${$strLinkedBean}Converter.fromRight(this.nativeManager.load${strLinkedCore}Via$strRelationCore(this.beanConverter.toRight(bean), 1, -1));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }

    }
#* *##end
#* *##end
#end
    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________
    //25
    @Override
    public int countWhere(String where)
    {
        try{
            return this.nativeManager.countWhere(where);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //20
    @Override
    public int countUsingTemplate(${beanClass} bean, int searchType)
    {
        try{
            return this.nativeManager.countUsingTemplate(this.beanConverter.toRight(bean),searchType);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }


    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________

    //35
    @Override
    public void registerListener(TableListener<$beanClass> listener)
    {
        this.nativeManager.registerListener(this.toNative(listener));
    }

    //36
    @Override
    public void unregisterListener(TableListener<$beanClass> listener)
    {
        this.nativeManager.unregisterListener(this.toNative(listener));
    }
    
    private ${pkg}.TableListener<$nativeClass> toNative(final TableListener<$beanClass> listener) {
        return null == listener ?null:new ${pkg}.TableListener<$nativeClass> (){

            @Override
            public void beforeInsert($nativeClass bean) throws DAOException {
                listener.beforeInsert(${managerClassNSP}.this.beanConverter.fromRight(bean));                
            }

            @Override
            public void afterInsert($nativeClass bean) throws DAOException {
                listener.afterInsert(${managerClassNSP}.this.beanConverter.fromRight(bean));
                
            }

            @Override
            public void beforeUpdate($nativeClass bean) throws DAOException {
                listener.beforeUpdate(${managerClassNSP}.this.beanConverter.fromRight(bean));
                
            }

            @Override
            public void afterUpdate($nativeClass bean) throws DAOException {
                listener.afterUpdate(${managerClassNSP}.this.beanConverter.fromRight(bean));
            }

            @Override
            public void beforeDelete($nativeClass bean) throws DAOException {
                listener.beforeDelete(${managerClassNSP}.this.beanConverter.fromRight(bean));
            }

            @Override
            public void afterDelete($nativeClass bean) throws DAOException {
                listener.afterDelete(${managerClassNSP}.this.beanConverter.fromRight(bean));
            }};
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    //43
    @Override
    public boolean isPrimaryKey(String column){
        return this.nativeManager.isPrimaryKey(column);
    }
    
    @Override
    public int loadBySqlForAction(String sql, Object[] argList, int[] fieldList,int startRow, int numRows,Action<$beanClass> action){
        try{
            return this.nativeManager.loadBySqlForAction(sql,argList,fieldList,startRow,numRows,this.toNative(action));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
    @Override
    public <T>T runAsTransaction(Callable<T> fun) {
        try{
            return this.nativeManager.runAsTransaction(fun);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
    @Override
    public void runAsTransaction(final Runnable fun){
        try{
            this.nativeManager.runAsTransaction(fun);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    private ${pkg}.TableManager.Action<$nativeClass> toNative(final Action<$beanClass> action){
        if(null == action)
            throw new NullPointerException();
        return new ${pkg}.TableManager.Action<$nativeClass>(){

            @Override
            public void call($nativeClass bean) {
                action.call(${managerClassNSP}.this.beanConverter.fromRight(bean));
            }

            @Override
            public $nativeClass getBean() {
                return  ${managerClassNSP}.this.beanConverter.toRight(action.getBean());
            }};
    }
}
