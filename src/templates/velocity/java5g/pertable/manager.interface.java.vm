#parse( "table.include.vm" )
#parse( "header.include.vm" )
#parse( "macros.include.vm" )
######################
#set ( $subpkg=$db.engineAsSubPackage() )
#set ( $javaClassName = $table.asManagerInterfaceNSP() )
#set ( $beanClass = $table.asBeanClassNSP() )
$codewriter.setCurrentJavaFilename(${gpkg}, "${javaClassName}.java")
package ${gpkg};
import ${schemaPkg}.exception.ObjectRetrievalException;
import ${schemaPkg}.exception.WrapDAOException;

/**
 * Interface to handle database calls (save, load, count, etc...) for the $tablename table.<br>
#if ( $table.hasRemarks() )
 * Remarks: $table.getRemarks()
#end
 * @author guyadong
 */
public interface ${javaClassName} extends TableManager<$beanClass>
{  
#if ( $table.countPrimaryKeys() > 0 )
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a {@link $beanClass} from the $tablename using primary key fields.
     *
#foreach ( $pk in $primaryKeys )
     * @param $pk.getVarName() $pk.getJavaType() - PK# $velocityCount
#end     
     * @return a unique $beanClass or {@code null} if not found
     */
    //1
    public $beanClass loadByPrimaryKey(#join($primaryKeys "$e.getJavaType() $e.getVarName()" ','));

    /**
     * Loads a {@link $beanClass} from the $tablename using primary key fields.
     *
#foreach ( $pk in $primaryKeys )
     * @param $pk.getVarName() $pk.getJavaType() - PK# $velocityCount
#end     
     * @return a unique $beanClass
     * @throws ObjectRetrievalException if not found
     */
    //1.1
    public $beanClass loadByPrimaryKeyChecked(#join($primaryKeys "$e.getJavaType() $e.getVarName()" ',')) throws ObjectRetrievalException;
    
    /**
     * Returns true if this $tablename contains row with primary key fields.
#foreach ( $pk in $primaryKeys )
     * @param $pk.getVarName() $pk.getJavaType() - PK# $velocityCount
#end
     * @see #loadByPrimaryKey($keys)
     */
    //1.4
    public boolean existsPrimaryKey(#join($primaryKeys "$e.getJavaType() $e.getVarName()" ','));
#if ( 1 == $table.countPrimaryKeys() )
#set ($pk = $table.getPrimaryKey())
#if ( $pk.hasPrimaryType() )
#set ($pkType = $pk.getJavaPrimaryType())
#else
#set ($pkType = $pk.getJavaType())
#end
    /**
     * Check duplicated row by primary keys,if row exists throw exception
     * @param $pk.getVarName() $pk.getJavaType()
     */
    //1.4.1
    public $pk.getJavaType() checkDuplicate($pk.getJavaType() $pk.getVarName());
    /**
     * Loads {@link $beanClass} from the $tablename using primary key fields.
     *
     * @param keys primary keys array
     * @return list of $beanClass
     */
    //1.8
    public java.util.List<$beanClass> loadByPrimaryKey($pkType... keys);
    /**
     * Loads {@link $beanClass} from the $tablename using primary key fields.
     *
     * @param keys primary keys collection
     * @return list of $beanClass
     */
    //1.9
    public java.util.List<$beanClass> loadByPrimaryKey(java.util.Collection<$pk.getJavaType()> keys);
#end##1 == $table.countPrimaryKeys()   
    /**
     * Delete row according to its primary keys.<br>
     * all keys must not be null
     *
#foreach ( $pk in $primaryKeys )
     * @param $pk.getVarName() $pk.getJavaType() - PK# $velocityCount
#end     
     * @return the number of deleted rows
     */
    //2
    public int deleteByPrimaryKey(#join($primaryKeys "$e.getJavaType() $e.getVarName()" ','));
#if ( 1 == $table.countPrimaryKeys() )
#set ($pk = $table.getPrimaryKey())
#if ( $pk.hasPrimaryType() )
#set ($pkType = $pk.getJavaPrimaryType())
#else
#set ($pkType = $pk.getJavaType())
#end
    /**
     * Delete rows according to primary key.<br>
     *
     * @param keys primary keys array
     * @return the number of deleted rows
     */
    //2.2
    public int deleteByPrimaryKey($pkType... keys);
    /**
     * Delete rows according to primary key.<br>
     *
     * @param keys primary keys collection
     * @return the number of deleted rows
     */
    //2.3
    public int deleteByPrimaryKey(java.util.Collection<$pk.getJavaType()> keys);
#end##1 == $table.countPrimaryKeys()  
    /**
     * Delete beans.<br>
     *
     * @param beans $beanClass collection wille be deleted
     * @return the number of deleted rows
     */
    //2.4
    public int delete($beanClass... beans);
    /**
     * Delete beans.<br>
     *
     * @param beans $beanClass collection wille be deleted
     * @return the number of deleted rows
     */
    //2.5
    public int delete(java.util.Collection<$beanClass> beans);
#end ## $table.countPrimaryKeys() > 0
## ======================================================
## xImportedKeys template
## ======================================================

#foreach ($importedTable in $importedTables)
#if ( $velocityCount == 1 )

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
#end
#set ( $importedClass = "$importedTable.asBeanClassNSP()" )
#set ( $importedNative = "$importedTable.asBeanClass()" )
#set ( $importedClassManager = "$importedTable.asManagerClassNSP()" )
#foreach( $fkName in $importedTable.getFkMapNames($table.name) )
#set ( $columnsOfFk = $importedTable.getForeignKeysByFkName($fkName) )
    /**
     * Retrieves the {@link $importedClass} object from the #join($columnsOfFk "$e.fullName" ",") field.<BR>
     * FK_NAME : $fkName 
     * @param bean the {@link $beanClass}
     * @return the associated {@link $importedClass} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.1 GET IMPORTED
    public ${importedClass}[] ${importedTable.getImportedBeansGetMethod($fkName)}($beanClass bean);
    
    /**
     * Retrieves the {@link $importedClass} object from the #join($columnsOfFk "$e.fullName" ",") field.<BR>
     * FK_NAME : $fkName 
#foreach ( $pk in $primaryKeys )
     * @param $pk.getVarName() $pk.getJavaType() - PK# $velocityCount
#end     
     * @return the associated {@link $importedClass} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1.2 GET IMPORTED
    public ${importedClass}[] ${importedTable.getImportedBeansGetMethod($fkName)}(#join($primaryKeys "$e.getJavaType() $e.getFullVarName()" ','));
    
    /**
     * @see ${esc.hash}${importedTable.getImportedBeansGetMethod($fkName)}AsList($beanClass,int,int)
     */
    //3.2 GET IMPORTED
    public java.util.List<$importedClass> ${importedTable.getImportedBeansGetMethod($fkName)}AsList($beanClass bean);

    /**
     * Retrieves the {@link $importedClass} object from #join($columnsOfFk "$e.fullName" ",") field.<BR>
     * FK_NAME:$fkName
#foreach ( $pk in $primaryKeys )
     * @param $pk.getVarName() $pk.getJavaType() - PK# $velocityCount
#end     
     * @return the associated {@link $importedClass} beans 
     * @throws DAOException
     */
    //3.2.2 GET IMPORTED
    public java.util.List<$importedClass> ${importedTable.getImportedBeansGetMethod($fkName)}AsList(#join($primaryKeys "$e.getJavaType() $e.getFullVarName()" ','));
    /**
     * delete the associated {@link $importedClass} objects from #join($columnsOfFk "$e.fullName" ",") field.<BR>
     * FK_NAME:$fkName
#foreach ( $pk in $primaryKeys )
     * @param $pk.getVarName() $pk.getJavaType() - PK# $velocityCount
#end     
     * @return the number of deleted rows
     */
    //3.2.3 DELETE IMPORTED
    public int ${importedTable.getImportedBeansDelMethod($fkName)}(#join($primaryKeys "$e.getJavaType() $e.getFullVarName()" ','));
    /**
     * Retrieves the {@link $importedClass} object from #join($columnsOfFk "$e.fullName" ",") field.<BR>
     * FK_NAME:$fkName
     * @param bean the {@link $beanClass}
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the associated {@link $importedClass} beans or empty list if {@code bean} is {@code null}
     */
    //3.2.4 GET IMPORTED
    public java.util.List<$importedClass> ${importedTable.getImportedBeansGetMethod($fkName)}AsList($beanClass bean,int startRow,int numRows);    
    /**
     * set  the {@link $importedClass} object array associate to $beanClass by the #join($columnsOfFk "$e.fullName" ",") field.<BR>
     * FK_NAME : $fkName 
     * @param bean the referenced {@link $beanClass}
     * @param importedBeans imported beans from $importedTable.name
     * @return importedBeans always
     * @see {@link ${importedClassManager}#$importedTable.getReferencedVarSetMethod($fkName)($importedClass, $beanClass)
     */
    //3.3 SET IMPORTED
    public ${importedClass}[] ${importedTable.getImportedBeansSetMethod($fkName)}($beanClass bean , ${importedClass}[] importedBeans);

    /**
     * set  the {@link $importedClass} object java.util.Collection associate to $beanClass by the #join($columnsOfFk "$e.fullName" ",") field.<BR>
     * FK_NAME:$fkName
     * @param bean the referenced {@link $beanClass} 
     * @param importedBeans imported beans from $importedTable.name 
     * @return importedBeans always
     * @see {@link ${importedClassManager}#$importedTable.getReferencedVarSetMethod($fkName)($importedClass, $beanClass)
     */
    //3.4 SET IMPORTED
    public <C extends java.util.Collection<$importedClass>> C ${importedTable.getImportedBeansSetMethod($fkName)}($beanClass bean , C importedBeans);

#end
#end
## ======================================================
## only xImportedKeys template
## ======================================================
#if( $table.hasForeignTables() || $table.hasImportedTables() )
    /**
     * Save the $beanClass bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link $beanClass} bean to be saved
    #foreachForeignTables('native' $table " * @param $table.asRefArg($m_fkName) the {@link $m_foreignClass} bean referenced by {@link $beanClass} " '    ' 'true')
    #foreachImportedTables('native' $table " * @param $m_importedTable.asImpArg($m_fkName) the {@link $m_importedClass} bean refer to {@link $beanClass} " '    ' 'true' )
     * @return the inserted or updated {@link $beanClass} bean
     */
    //3.5 SYNC SAVE 
    public $beanClass save($beanClass bean
        #foreachForeignTables('native' $table  ", $m_foreignClass $table.asRefArg($m_fkName) " '' '')

        #foreachImportedTables('native' $table  ", ${m_importedClass}[] $m_importedTable.asImpArg($m_fkName) " '' ''));
    /**
     * Transaction version for sync save
     * @see {@link ${esc.hash}save(${beanClass} #foreachForeignTables('native' ${table}  ", ${m_foreignClass} " '' '')#foreachImportedTables('native' ${table}  ", ${m_importedClass}[] " '' ''))}
     */
    //3.6 SYNC SAVE AS TRANSACTION
    public $beanClass saveAsTransaction(final $beanClass bean
        #foreachForeignTables('native' $table  ",final $m_foreignClass $table.asRefArg($m_fkName) " '' '')

        #foreachImportedTables('native' $table  ",final ${m_importedClass}[] $m_importedTable.asImpArg($m_fkName) " '' ''));
#if( $table.hasImportedTables() )
    /**
     * Save the $beanClass bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link $beanClass} bean to be saved
    #foreachForeignTables('native' $table " * @param $table.asRefArg($m_fkName) the {@link $m_foreignClass} bean referenced by {@link $beanClass} " '    ' 'true')
    #foreachImportedTables('native' $table " * @param $m_importedTable.asImpArg($m_fkName) the {@link $m_importedClass} bean refer to {@link $beanClass} " '    ' 'true' )
     * @return the inserted or updated {@link $beanClass} bean
     */
    //3.7 SYNC SAVE 
    public $beanClass save($beanClass bean
        #foreachForeignTables('native' $table  ", $m_foreignClass $table.asRefArg($m_fkName) " '' '')

        #foreachImportedTables('native' $table  ", java.util.Collection<$m_importedClass> $m_importedTable.asImpArg($m_fkName) " '' ''));
    /**
     * Transaction version for sync save
     * @see {@link ${esc.hash}save($beanClass #foreachForeignTables('native' $table  ", $m_foreignClass " '' '')#foreachImportedTables('native' $table  ", java.util.Collection " '' ''))}
     */
    //3.8 SYNC SAVE AS TRANSACTION
    public $beanClass saveAsTransaction(final $beanClass bean
        #foreachForeignTables('native' $table  ",final $m_foreignClass $table.asRefArg($m_fkName) " '' '')

        #foreachImportedTables('native' $table  ",final  java.util.Collection<$m_importedClass> $m_importedTable.asImpArg($m_fkName) " '' ''));
#end ## $table.hasImportedTables()
#end ## $table.hasForeignTables() || $table.hasImportedTables()
## ======================================================
## xForeignKeys template
## ======================================================
#foreach ($foreignTable in $foreignTables)
#if ( $velocityCount == 1 )
    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
#end
#set ( $foreignClass = "$foreignTable.asBeanClassNSP()" )
#set ( $foreignNative = "$foreignTable.asBeanClass()" )
#set ( $foreignClassManager = "$foreignTable.asManagerClass()" )
#foreach( $fkName in $table.getFkMapNames($foreignTable.name) )
#set ( $columnsOfFk = $table.getForeignKeysByFkName($fkName) )
    /**
     * Retrieves the {@link $foreignClass} object referenced by #join($columnsOfFk "{@link $beanClass#$e.getGetMethod()}()" ",") field.<br>
     * FK_NAME : $fkName
     * @param bean the {@link $beanClass}
     * @return the associated {@link $foreignClass} bean or {@code null} if {@code bean} is {@code null}
     */
    //5.1 GET REFERENCED VALUE
    public $foreignClass $table.getReferencedVarGetMethod($fkName)($beanClass bean);

    /**
     * Associates the {@link $beanClass} object to the {@link $foreignClass} object by #join($columnsOfFk "{@link $beanClass#$e.getGetMethod()}()" ",") field.
     *
     * @param bean the {@link $beanClass} object to use
     * @param beanToSet the {@link $foreignClass} object to associate to the {@link $beanClass}
     * @return always beanToSet saved
     * @throws WrapDAOException
     */
    //5.2 SET REFERENCED 
    public $foreignClass $table.getReferencedVarSetMethod($fkName)($beanClass bean, $foreignClass beanToSet);
#end
#end
#if ($table.countIndices() > 0)
    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________

#foreach ( $index in $table.getIndices() )
#set( $indexColumns = $index.getIndexColumnsList())

#if($index.isUnique())
    /**
     * Retrieves an unique $beanClass using the ${index.getName()} index.
     * #join($indexColumns "
     * @param ${e.getVarName()} the ${e.getName()} column's value filter" '')

     * @return an $beanClass,otherwise null if not found or exists null in input arguments
     * @throws WrapDAOException
     */
    public $beanClass loadBy${index.asCamelCaseName()}(#join( $indexColumns "$e.getJavaType() ${e.getVarName()}" ','));
    /**
     * Retrieves an unique $beanClass using the ${index.getName()} index.
     * #join($indexColumns "
     * @param ${e.getVarName()} the ${e.getName()} column's value filter. must not be null" '')

     * @return an $beanClass
     * @throws NullPointerException exists null in input arguments
     * @throws ObjectRetrievalException if not found
     * @throws WrapDAOException
     */
    public $beanClass loadBy${index.asCamelCaseName()}Checked(#join( $indexColumns "$e.getJavaType() ${e.getVarName()}" ','))throws ObjectRetrievalException;
#if( 1 == $indexColumns.size())
#set ($indexColumn = $indexColumns.get(0))
#if ( $indexColumn.hasPrimaryType() )
#set ($columnType = $indexColumn.getJavaPrimaryType())
#else
#set ($columnType = $indexColumn.getJavaType())
#end
    /**
     * Retrieves an unique $beanClass for each ${index.getName()} index.
     *
     * @param indexs index array
     * @return an list of $beanClass
     */
    public java.util.List<$beanClass> loadBy${index.asCamelCaseName()}($columnType... indexs);
    /**
     * Retrieves an unique $beanClass for each ${index.getName()} index.
     *
     * @param indexs index collection
     * @return an list of $beanClass
     */
    public java.util.List<$beanClass> loadBy${index.asCamelCaseName()}(java.util.Collection<$indexColumn.getJavaType()> indexs);
    /**
     * Deletes rows for each ${index.getName()} index.
     *
     * @param indexs index array
     * @return the number of deleted rows
     */
    public int deleteBy${index.asCamelCaseName()}($columnType... indexs);
    /**
     * Deletes rows for each ${index.getName()} index.
     *
     * @param indexs index collection
     * @return the number of deleted rows
     */
    public int deleteBy${index.asCamelCaseName()}(java.util.Collection<$indexColumn.getJavaType()> indexs);
#end##1 == $indexColumns.size()
#else ## $index.isUnique()
    /**
     * Retrieves an array of $beanClass using the ${index.getName()} index.
     *
#foreach ( $column in $index.getIndexColumnsList() )
     * @param ${column.getVarName()} the ${column.getName()} column's value filter.
#end
     * @return an array of $beanClass
     */
    public ${beanClass}[] loadBy${index.asCamelCaseName()}(#join( $index.getIndexColumnsList() "$e.getJavaType() ${e.getVarName()}" ','));
    
    /**
     * Retrieves a list of $beanClass using the ${index.getName()} index.
     *
#foreach ( $column in $index.getIndexColumnsList() )
     * @param ${column.getVarName()} the ${column.getName()} column's value filter.
#end
     * @return a list of $beanClass
     */
    public java.util.List<$beanClass> loadBy${index.asCamelCaseName()}AsList(#join( $index.getIndexColumnsList() "$e.getJavaType() ${e.getVarName()}" ','));
#end## $index.isUnique()

    /**
     * Deletes rows using the ${index.getName()} index.
     *
#foreach ( $column in $index.getIndexColumnsList() )
     * @param ${column.getVarName()} the ${column.getName()} column's value filter.
#end
     * @return the number of deleted objects
     */
    public int deleteBy${index.asCamelCaseName()}(#join( $index.getIndexColumnsList() "$e.getJavaType() ${e.getVarName()}" ','));
    
#end    
#end##($table.countIndices() > 0)

#if ( 1 == $table.countPrimaryKeys() )
#set ($pk = $table.getPrimaryKey())
#if ( $pk.hasPrimaryType() )
#set ($pkType = $pk.getJavaPrimaryType())
#else
#set ($pkType = $pk.getJavaType())
#end
    /**
     * return a primary key list from {@link $beanClass} array
     * @param array
     */
    //45
    public java.util.List<$pk.getJavaType()> toPrimaryKeyList($beanClass... array);
    /**
     * return a primary key list from {@link $beanClass} collection
     * @param array
     */
    //46
    public java.util.List<$pk.getJavaType()> toPrimaryKeyList(java.util.Collection<$beanClass> collection);
#end##1 == $table.countPrimaryKeys()  

#set ( $jTables = $table.getJunctionTables() )
#foreach ( $jTable in $jTables )
#set ( $linkedTable = $jTable.tableOfJunction( $table) )
#if ( $velocityCount == 1)
    //_____________________________________________________________________
    //
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE
    //_____________________________________________________________________
#end
#set ( $junctionBeanClass = $jTable.asBeanClass($isGeneral))
#set ( $junctionManagerClass = ${jTable.asManagerClass($isGeneral)})
#set ( $linkedBean = "${linkedTable.asBeanClass($isGeneral)}" )
#set ( $localFk = $jTable.getForeignKeys($table)[0])
#set ( $linkedFk = $jTable.getForeignKeys($linkedTable)[0])
#set ( $linkManagerClass = ${linkedTable.asManagerClass($isGeneral)})
    /**
     * @see ${esc.hash}$jTable.getLoadMethodOfJunction()AsList($beanClass,int,int)
     */
    //22 MANY TO MANY
    public java.util.List<${beanClass}> $jTable.getLoadMethodOfJunction()AsList($linkedBean bean);

    /**
     * Retrieves an list of $beanClass using the junction table ${jTable.asCoreClass($isGeneral)}, given a $linkedBean, 
     * specifying the start row and the number of rows.
     *
     * @param bean the $linkedBean bean to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return a list of $beanClass
     */
    //23 MANY TO MANY
    public java.util.List<${beanClass}> $jTable.getLoadMethodOfJunction()AsList($linkedBean bean, int startRow, int numRows);
#define($junctionParam)
#join($jTable.primaryKeys '#set( $fColumn = $e.foreignColumn)#if($fColumn.table == $table)bean#{else}linked#{end}.$fColumn.getGetMethod()()' ',')
#end
    /**
     * add junction between {@link $beanClass} and {@link $linkedBean} if junction not exists
     * @param bean
     * @param linked
     */
    //23.2 MANY TO MANY
    public void addJunction($beanClass bean,$linkedBean linked);
    /**
     * remove junction between {@link $beanClass} and {@link $linkedBean}
     * @param bean
     * @param linked
     */
    //23.3 MANY TO MANY
    public int deleteJunction($beanClass bean,$linkedBean linked);
    /** @see ${esc.hash}addJunction($beanClass,$linkedBean) */
    //23.4 MANY TO MANY
    public void addJunction($beanClass bean,$linkedBean... linkedBeans);
    /** @see ${esc.hash}addJunction($beanClass,$linkedBean) */
    //23.5 MANY TO MANY
    public void addJunction($beanClass bean,java.util.Collection<$linkedBean> linkedBeans);
    /** @see ${esc.hash}deleteJunction($beanClass,$linkedBean) */
    //23.6 MANY TO MANY
    public int deleteJunction($beanClass bean,$linkedBean... linkedBeans);
    /** @see ${esc.hash}deleteJunction($beanClass,$linkedBean) */
    //23.7 MANY TO MANY
    public int deleteJunction($beanClass bean,java.util.Collection<$linkedBean> linkedBeans);
#end
################### method for self-reference field#################
#foreach($selfFk in $table.selfRefKeys)
#if($velocityCount == 1)

    //_____________________________________________________________________
    //
    // SELF-REFERENCE
    //_____________________________________________________________________
#end
    /**
     * return bean list ( include {@code bean}) by the self-reference field : {@code fl_person_group(parent) }<br>
     * first element is top bean
     * @param bean
     * @return  empty list if {@code bean} is {@code null}<br>
     *         null if self-reference field is cycle
     * @throws WrapDAOException
     */
    //47
    public java.util.List<$beanClass> $table.getListMethod($selfFk)($beanClass bean);
    /**
     * get level count on the self-reference field : {@code ${table.name}(#join($selfFk.columns '$e.name' ',')) }
     * @param bean
     * @return  0 if {@code bean} is {@code null}<br>
     *         -1 if self-reference field is cycle
     * @throws WrapDAOException
     */
    //48
    public int $table.getLevelMethod($selfFk)($beanClass bean);
    /**
     * test whether the self-reference field is cycle : {@code ${table.name}(#join($selfFk.columns '$e.name' ',')) }
     * @param bean
     * @throws WrapDAOException
     * @see ${esc.hash}$table.getLevelMethod($selfFk)($beanClass)
     */
    //49
    public boolean $table.getCyeleTestMethod($selfFk)($beanClass bean);
    /**
     * return top bean that with {@code null} self-reference field  : {@code ${table.name}(#join($selfFk.columns '$e.name' ',')) }
     * @param bean
     * @return top bean
     * @throws NullPointerException if {@code bean} is {@code null}
     * @throws IllegalStateException if self-reference field is cycle
     * @throws WrapDAOException
     */
    // 50
    public $beanClass $table.getTopMethod($selfFk)($beanClass bean);
#end
}
