#parse( "schema.include.vm" )
#parse( "header.include.vm" )
#parse( "macros.include.vm" )
#set ( $javaClassName = 'DbConverterGeneric' )
#set( $subpkg=$db.engineAsSubPackage() )
#set( $ignorefields= $codewriter.getProperty('general.beanconverter.tonative.ignore') )
$codewriter.setCurrentJavaFilename($gpkg, "${javaClassName}.java")
package ${gpkg};
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import ${gpkg}.IBeanConverter;
import ${gpkg}.IDbConverter;

#foreach ( $table in $tables )
import ${gpkg}.${table.asBeanClassNSP()};
#end
#macro( convertVar $c)converter$c#end
/**
 * generic type converter of {@link IDbConverter} implementation<br>
 * usage:<pre>new ${javaClassName}&lt;#join($tables "Model$velocityCount" ',')&gt;(){};</pre>
 * @author guyadong
 *
#foreach($table in $tables)
 * @param <N_${table.asCoreClassNSP().toUpperCase()}> native type for $table.name
#end
 *
 */
public abstract class ${javaClassName}<#join($tables "N_${e.asCoreClassNSP().toUpperCase()}" ',')> 
    implements IDbConverter<#join($tables "N_${e.asCoreClassNSP().toUpperCase()}" ',')> {
#foreach ( $table in $tables )
#set ( $leftClass  = "${table.asBeanClassNSP()}" )
#set ( $rightClass = "N_${table.asCoreClassNSP().toUpperCase()}" )
    private final IBeanConverter<${leftClass},${rightClass}> #convertVar(${leftClass});
#end
    private static Class<?> getRawClass(Type type){
        if(type instanceof Class<?>){
            return (Class<?>) type;
        } else if(type instanceof ParameterizedType){
            return getRawClass(((ParameterizedType) type).getRawType());
        } else{
            throw new IllegalArgumentException("invalid type");
        }
    }
    @SuppressWarnings("unchecked")
    public ${javaClassName}(){
        Type[] typeArguments = ((ParameterizedType)getClass().getGenericSuperclass()).getActualTypeArguments();
#foreach ( $table in $tables )
#set ( $leftClass  = "${table.asBeanClassNSP()}" )
#set ( $rightClass = "N_${table.asCoreClassNSP().toUpperCase()}" )
#set ( $idx = $velocityCount - 1 )
        this.#convertVar(${leftClass}) = new BeanConverterUtils.#converterClass(${leftClass})<${rightClass}>(${leftClass}.class,
            (Class<N_${table.asCoreClassNSP().toUpperCase()}>)getRawClass(typeArguments[$idx]));            
#end
    }
    @Override
    public <L,R>IBeanConverter<L,R>getBeanConverter(Class<L> lClass,Class<R> rClass){
        throw new UnsupportedOperationException();
    }
    
    @Override
    public <L,R>void setBeanConverter(Class<L> lClass,Class<R> rClass,IBeanConverter<L,R>converter){
        throw new UnsupportedOperationException();
    }

#foreach ( $table in $tables )
#set ( $leftClass  = "${table.asBeanClassNSP()}" )
#set ( $rightClass = "N_${table.asCoreClassNSP().toUpperCase()}" )
    @Override
    public IBeanConverter<${leftClass}, ${rightClass}> get${leftClass}Converter() {
        return #convertVar(${leftClass});
    }
#end    
}
