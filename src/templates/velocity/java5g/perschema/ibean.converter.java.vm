#parse( "header.include.vm" )
#set($gpkg = $codewriter.getProperty('general.package') )
$codewriter.setCurrentJavaFilename($gpkg, "IBeanConverter.java")
package $gpkg;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * 
 * @author guyadong
 *
 * @param <L> left type
 * @param <R> right type
 */
public interface IBeanConverter<L,R> {

	/**
	 * Default abstract implementation of {@link IBeanConverter}<br>
	 * 
	 * @author guyadong
	 *
	 * @param <L> left type
	 * @param <R> right type
	 */
	public static abstract class  AbstractHandle <L,R>implements IBeanConverter<L, R> {
		public AbstractHandle() {
		}

		@Override
		public R[] toRight(L[] beans) {
			if(null==beans)return null;
			@SuppressWarnings("unchecked")
			R[] na = (R[]) new Object[beans.length];
			for(int i=0;i<beans.length;++i){
				na[i]=this.toRight(beans[i]);
			}				
			return na;
		}

		@Override
		public L[] fromRight(R[] beans) {
			if(null==beans)return null;
			@SuppressWarnings("unchecked")
			L[] na = (L[]) new Object[beans.length];
			for(int i=0;i<beans.length;++i){
				na[i]=this.fromRight(beans[i]);
			}				
			return na;
		}

		@Override
		public List<R> toRight(Collection<L> beans) {
			if(null==beans)return null;
			ArrayList<R> na = new ArrayList<R>();
			for(L g:beans){
				na.add(this.toRight(g));
			}
			return na;
		}

		@Override
		public List<L> fromRight(Collection<R> beans) {
			if(null==beans)return null;
			ArrayList<L> na = new ArrayList<L>();
			for(R n:beans){
				na.add(this.fromRight(n));
			}
			return na;
		}
	}
	public L fromRight(R bean);
	public R toRight( L bean);
	public R[] toRight(L[] beans);
	public L[] fromRight(R[] beans);
	public List<R> toRight(Collection<L> beans);
	public List<L> fromRight(Collection<R> beans);

}
