#parse( "schema.include.vm" )
#parse( "header.include.vm" )
$codewriter.setCurrentJavaFilename($gpkg, "IDbConverter.java")
package $gpkg;

/**
 * converter between general type({@code <L>}) and native type ({@code <R>}) for  all Beans
 * @author guyadong
 *
 */
public interface IDbConverter<#join($tables "
                            N_${e.asCoreClassNSP().toUpperCase()}" ',')> {
#foreach ( $table in $tables )
    /**
     * return a converter {@code ${table.asBeanClassNSP()} -> N_${table.asCoreClassNSP().toUpperCase()}}
     * @return
     */
    public abstract IBeanConverter<${table.asBeanClassNSP()}, N_${table.asCoreClassNSP().toUpperCase()}> get${table.asBeanClassNSP()}Converter();
#end

    /**
     * return a converter {@code L - > R}
     * @param <L> general type
     * @param <R> native type
     * @param lClass
     * @param rClass
     * @return
     */
    public abstract<L, R> IBeanConverter<L,R> getBeanConverter(Class<L> lClass,Class<R> rClass);
    /**
     * set converter 
     * @param <L> general type
     * @param <R> native type
     * @param lClass
     * @param rClass
     * @param converter
     */
    public abstract <L, R> void setBeanConverter(Class<L> lClass, Class<R> rClass, IBeanConverter<L,R>converter);

}