#parse( "header.include.vm" )
#parse( "schema.include.vm" )
#set( $gpkg = $codewriter.getProperty('general.package') )
#set( $subpkg=$db.engineAsSubPackage() )
#set( $ignorefields= $codewriter.getProperty('general.beanconverter.tonative.ignore') )
$codewriter.setCurrentJavaFilename("${gpkg}.${subpkg}", "DbConverter.java")
package ${gpkg}.${subpkg};

import java.util.Vector;
import ${gpkg}.IBeanConverter;
import ${gpkg}.IDbConverter;

#foreach ( $table in $tables )
import ${gpkg}.${table.asBeanClassNSP()};
#end
#macro( convertVar $c)_converter$c#end

/**
 * {@link IDbConverter} implemention for $db.engine
 * @author guyadong
 *
 */
public class DbConverter implements IDbConverter {
#foreach ( $table in $tables )
    public static final IBeanConverter<${table.asBeanClassNSP()},${table.getPackage()}.${table.asBeanClass()}> #convertVar(${table.asBeanClassNSP()})=new IBeanConverter.AbstractHandle<${table.asBeanClassNSP()},${table.getPackage()}.${table.asBeanClass()}>(){

        @Override
        public ${table.asBeanClassNSP()} fromRight(${table.getPackage()}.${table.asBeanClass()} bean) {
            ${table.asBeanClassNSP()} generalBean= new ${table.asBeanClassNSP()}();
            generalBean.isNew(bean.isNew());
#foreach ( $column in $table.columns )
            if(bean.${column.getGetMethod()}() != null)
                generalBean.$column.getSetMethod()(bean.${column.getGetMethod()}());
#end
            return generalBean;
        }

        @Override
        public ${table.getPackage()}.${table.asBeanClass()} toRight(${table.asBeanClassNSP()} bean) {
            ${table.getPackage()}.${table.asBeanClass()} nativeBean= new ${table.getPackage()}.${table.asBeanClass()}();
            nativeBean.isNew(bean.isNew());
#foreach ( $column in $table.columns )
#if( $ignorefields.contains($column.name) )// IGNORE field $column.fullName , controlled by 'general.beanconverter.tonative.ignore' in properties file
#end
#if( $ignorefields.contains($column.name) )// #end            if(bean.${column.getGetMethod()}() != null)
#if( $ignorefields.contains($column.name) )// #end                nativeBean.$column.getSetMethod()(bean.${column.getGetMethod()}());
#end
            return nativeBean;
        }};
        
#end
    public static final DbConverter INSTANCE = new DbConverter();
    protected DbConverter() {
    	
    }

    private static final Vector<Object[]> converters= new Vector<Object[]>(){
        private static final long serialVersionUID = 1L;
        {
#foreach ( $table in $tables )
            add(new Object[]{${table.asBeanClassNSP()}.class,${table.getPackage()}.${table.asBeanClass()}.class,#convertVar(${table.asBeanClassNSP()})});
#end
        }};
    
    private static final <L,R> int getIndex(Class<L> lClass,Class<R> rClass){
            Vector<Integer>find= new Vector<Integer>();
            if(null!=lClass && null != rClass){
                for(int i=0;i<converters.size();++i){
                    Object[] converter = converters.get(i);
                    if(((Class<?>)converter[0]).isAssignableFrom(lClass) 
                            && ((Class<?>)converter[1]).isAssignableFrom(rClass)){
                        return i;
                    }
                }
            }else if(null != lClass){
                for(int i=0;i<converters.size();++i){
                    Object[] converter = converters.get(i);
                    if(((Class<?>)converter[0]).isAssignableFrom(lClass) 
                            ){
                        find.add(i);
                    }
                }
            }else if(null != rClass){
                for(int i=0;i<converters.size();++i){
                    Object[] converter = converters.get(i);
                    if(((Class<?>)converter[1]).isAssignableFrom(rClass)){
                        find.add(i);
                    }
                }
            }
            return  1==find.size() ? find.get(0) : -1;
    }  
        
    @Override
    @SuppressWarnings("unchecked")
    public <L,R>IBeanConverter<L,R>getBeanConverter(Class<L> lClass,Class<R> rClass){
        int index = getIndex(lClass, rClass);
        if(index<0)
            throw new IllegalArgumentException(
                    String.format("not found converter for (%s,%s)"
                            ,null==lClass?"null":lClass.getSimpleName()
                            ,null==rClass?"null":rClass.getSimpleName()));
        return (IBeanConverter<L, R>) converters.get(index)[2];
    }
    
    @Override
    public synchronized <L,R>void setBeanConverter(Class<L> lClass,Class<R> rClass,IBeanConverter<L,R>converter){
        if(null == lClass || null == rClass || null == converter)
            throw new NullPointerException();
        Object[] c = new Object[]{lClass,rClass,converter};
        int index = getIndex(lClass, rClass);
        if(index<0){
            converters.add(c);
        }else{
            converters.set(index, c);
        }
    }
#foreach ( $table in $tables )

    @Override
    public IBeanConverter<${table.asBeanClassNSP()}, ${table.getPackage()}.${table.asBeanClass()}> get${table.asBeanClassNSP()}Converter() {
        return #convertVar(${table.asBeanClassNSP()});
    }
#end    
}
