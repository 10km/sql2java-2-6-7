#parse( "header.include.vm" )
#parse( "schema.include.vm" )
#set($npkg = $codewriter.getProperty('general.package') )
$codewriter.setCurrentJavaFilename("${npkg}.orm", "DbConverter.java")
package ${npkg}.orm;

import java.util.HashMap;
import java.util.Map;
import ${npkg}.IBeanConverter;
import ${npkg}.IDbConverter;
import ${npkg}.BaseBean;

#foreach ( $table in $tables )
import ${npkg}.${table.asBeanClassNSP()};
#end
#foreach ( $table in $tables )
import ${table.getPackage()}.${table.asBeanClass()}Base;
#end
#macro( convertVar $c)_convert$c#end
public class DbConverter implements IDbConverter {
#foreach ( $table in $tables )
	public final IBeanConverter<${table.asBeanClassNSP()},${table.asBeanClass()}Base> #convertVar(${table.asBeanClassNSP()})=new IBeanConverter.AbstractHandle<${table.asBeanClassNSP()},${table.asBeanClass()}Base>(){

		@Override
		public ${table.asBeanClassNSP()} fromNative(${table.asBeanClass()}Base bean) {
			return null;
		}

		@Override
		public ${table.asBeanClass()}Base toNative(${table.asBeanClassNSP()} bean) {
			return null;
		}};
#end

		private final Map<Class<? extends BaseBean>,IBeanConverter<? extends BaseBean,?>> converters= new HashMap<Class<? extends BaseBean>,IBeanConverter<?extends BaseBean,?>>(){
			private static final long serialVersionUID = 1L;
			{
#foreach ( $table in $tables )
				put(${table.asBeanClassNSP()}.class,#convertVar(${table.asBeanClassNSP()}));
#end
			}};
	
	@Override
	@SuppressWarnings("unchecked")
	public <G extends BaseBean,N>IBeanConverter<G,N>getBeanConverter(Class<G> clazz){
		return (IBeanConverter<G, N>) converters.get(clazz);
	}
#foreach ( $table in $tables )

	@Override
	public IBeanConverter<${table.asBeanClassNSP()}, ${table.asBeanClass()}Base> get${table.asBeanClassNSP()}Converter() {
		return #convertVar(${table.asBeanClassNSP()});
	}
#end	
}
